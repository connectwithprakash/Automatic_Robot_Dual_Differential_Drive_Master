
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800200  00004566  000045fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002fb  00800268  00800268  00004662  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004662  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  000046d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d72  00000000  00000000  00004b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ba  00000000  00000000  0000a876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003493  00000000  00000000  0000c130  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011bc  00000000  00000000  0000f5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000234f  00000000  00000000  00010780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000042f2  00000000  00000000  00012acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00016dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
       6:	00 00       	nop
       8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c0       	rjmp	.+490    	; 0x1f8 <__vector_3>
       e:	00 00       	nop
      10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
      12:	00 00       	nop
      14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__vector_6>
      1a:	00 00       	nop
      1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__vector_9>
      28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__vector_11>
      30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
      36:	00 00       	nop
      38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__vector_15>
      3e:	00 00       	nop
      40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
      52:	00 00       	nop
      54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
      56:	00 00       	nop
      58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1b c1       	rjmp	.+566    	; 0x294 <__vector_23>
      5e:	00 00       	nop
      60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__vector_25>
      68:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__vector_26>
      6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
      6e:	00 00       	nop
      70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
      72:	00 00       	nop
      74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
      76:	00 00       	nop
      78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
      7e:	00 00       	nop
      80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
      82:	00 00       	nop
      84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
      86:	00 00       	nop
      88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <__vector_36>
      94:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <__vector_37>
      98:	7d c0       	rjmp	.+250    	; 0x194 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7b c0       	rjmp	.+246    	; 0x194 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	79 c0       	rjmp	.+242    	; 0x194 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	77 c0       	rjmp	.+238    	; 0x194 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	75 c0       	rjmp	.+234    	; 0x194 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	73 c0       	rjmp	.+230    	; 0x194 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	71 c0       	rjmp	.+226    	; 0x194 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6f c0       	rjmp	.+222    	; 0x194 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6d c0       	rjmp	.+218    	; 0x194 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6b c0       	rjmp	.+214    	; 0x194 <__bad_interrupt>
      be:	00 00       	nop
      c0:	69 c0       	rjmp	.+210    	; 0x194 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	67 c0       	rjmp	.+206    	; 0x194 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	65 c0       	rjmp	.+202    	; 0x194 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <__vector_51>
      d0:	0c 94 26 1e 	jmp	0x3c4c	; 0x3c4c <__vector_52>
      d4:	5f c0       	rjmp	.+190    	; 0x194 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__vector_54>
      dc:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__vector_55>
      e0:	59 c0       	rjmp	.+178    	; 0x194 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__ctors_start>:
     130:	48 18       	sub	r4, r8

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d1 e2       	ldi	r29, 0x21	; 33
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61
     13e:	00 e0       	ldi	r16, 0x00	; 0
     140:	0c bf       	out	0x3c, r16	; 60

00000142 <__do_copy_data>:
     142:	12 e0       	ldi	r17, 0x02	; 2
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	e6 e6       	ldi	r30, 0x66	; 102
     14a:	f5 e4       	ldi	r31, 0x45	; 69
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a8 36       	cpi	r26, 0x68	; 104
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	25 e0       	ldi	r18, 0x05	; 5
     15e:	a8 e6       	ldi	r26, 0x68	; 104
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a3 36       	cpi	r26, 0x63	; 99
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	c9 e9       	ldi	r28, 0x99	; 153
     170:	d0 e0       	ldi	r29, 0x00	; 0
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	06 c0       	rjmp	.+12     	; 0x182 <__do_global_ctors+0x16>
     176:	21 97       	sbiw	r28, 0x01	; 1
     178:	01 09       	sbc	r16, r1
     17a:	80 2f       	mov	r24, r16
     17c:	fe 01       	movw	r30, r28
     17e:	0e 94 a9 22 	call	0x4552	; 0x4552 <__tablejump2__>
     182:	c8 39       	cpi	r28, 0x98	; 152
     184:	d1 07       	cpc	r29, r17
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 07       	cpc	r16, r24
     18a:	a9 f7       	brne	.-22     	; 0x176 <__do_global_ctors+0xa>
     18c:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <main>
     190:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <_exit>

00000194 <__bad_interrupt>:
     194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <_ZN7encoder22Init_encoder_interruptEv>:
volatile bool PidUpdateFlagDriveY = true;


void encoder::Init_encoder_interrupt()
{
	sei();
     196:	78 94       	sei
	EICRA = 0b00110000;
     198:	80 e3       	ldi	r24, 0x30	; 48
     19a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EICRB = 0b00001100;
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	EIMSK |=  (1<<INT2) |(1<<INT5);
     1a4:	8d b3       	in	r24, 0x1d	; 29
     1a6:	84 62       	ori	r24, 0x24	; 36
     1a8:	8d bb       	out	0x1d, r24	; 29
     1aa:	08 95       	ret

000001ac <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     1ac:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     1ae:	85 b5       	in	r24, 0x25	; 37
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     1ba:	08 95       	ret

000001bc <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
	{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     1c2:	68 81       	ld	r22, Y
     1c4:	79 81       	ldd	r23, Y+1	; 0x01
     1c6:	07 2e       	mov	r0, r23
     1c8:	00 0c       	add	r0, r0
     1ca:	88 0b       	sbc	r24, r24
     1cc:	99 0b       	sbc	r25, r25
     1ce:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     1d2:	2e ef       	ldi	r18, 0xFE	; 254
     1d4:	34 e3       	ldi	r19, 0x34	; 52
     1d6:	46 e3       	ldi	r20, 0x36	; 54
     1d8:	53 e4       	ldi	r21, 0x43	; 67
     1da:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	48 e4       	ldi	r20, 0x48	; 72
     1e4:	53 e4       	ldi	r21, 0x43	; 67
     1e6:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <__divsf3>
     1ea:	6c 83       	std	Y+4, r22	; 0x04
     1ec:	7d 83       	std	Y+5, r23	; 0x05
     1ee:	8e 83       	std	Y+6, r24	; 0x06
     1f0:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     20e:	00 9b       	sbis	0x00, 0	; 0
     210:	08 c0       	rjmp	.+16     	; 0x222 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     212:	e0 e7       	ldi	r30, 0x70	; 112
     214:	f2 e0       	ldi	r31, 0x02	; 2
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	91 83       	std	Z+1, r25	; 0x01
     21e:	80 83       	st	Z, r24
     220:	07 c0       	rjmp	.+14     	; 0x230 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     222:	e0 e7       	ldi	r30, 0x70	; 112
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     25c:	05 9b       	sbis	0x00, 5	; 0
     25e:	08 c0       	rjmp	.+16     	; 0x270 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     260:	e8 e6       	ldi	r30, 0x68	; 104
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
     26e:	07 c0       	rjmp	.+14     	; 0x27e <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     270:	e8 e6       	ldi	r30, 0x68	; 104
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <PidUpdateFlagCompass>
	PidUpdateFlagLinetrackerBack = true;
     2a6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <PidUpdateFlagLinetrackerBack>
	PidUpdateFlagLinetrackerFront = true;
     2aa:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <PidUpdateFlagLinetrackerFront>
 
	PidUpdateFlagDriveX = true;
     2ae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <PidUpdateFlagDriveX>
	PidUpdateFlagDriveY = true;
     2b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <PidUpdateFlagDriveY>
	
     2b6:	8f 91       	pop	r24
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <_Z13init_HMC5883Lv>:
		}
	}
	
	Calculate_Velocity();
	
}
     2c2:	0e 94 a8 1c 	call	0x3950	; 0x3950 <_Z8i2c_initv>
     2c6:	8c e3       	ldi	r24, 0x3C	; 60
     2c8:	0e 94 ae 1c 	call	0x395c	; 0x395c <_Z9i2c_starth>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z9i2c_writeh>
     2d2:	80 e7       	ldi	r24, 0x70	; 112
     2d4:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z9i2c_writeh>
     2d8:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_Z8i2c_stopv>
     2dc:	8c e3       	ldi	r24, 0x3C	; 60
     2de:	0e 94 ae 1c 	call	0x395c	; 0x395c <_Z9i2c_starth>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z9i2c_writeh>
     2e8:	80 ea       	ldi	r24, 0xA0	; 160
     2ea:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z9i2c_writeh>
     2ee:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_Z8i2c_stopv>
     2f2:	8c e3       	ldi	r24, 0x3C	; 60
     2f4:	0e 94 ae 1c 	call	0x395c	; 0x395c <_Z9i2c_starth>
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z9i2c_writeh>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z9i2c_writeh>
     304:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <_Z8i2c_stopv>
     308:	08 95       	ret

0000030a <_Z12read_Compassv>:
     30a:	8c e3       	ldi	r24, 0x3C	; 60
     30c:	0e 94 ae 1c 	call	0x395c	; 0x395c <_Z9i2c_starth>
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z9i2c_writeh>
     316:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_Z8i2c_stopv>
     31a:	8d e3       	ldi	r24, 0x3D	; 61
     31c:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <_Z13i2c_rep_starth>
     320:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <_Z11i2c_readAckv>
     324:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <raw_x>
     328:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <raw_x+0x1>
     32c:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <_Z11i2c_readAckv>
     330:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <raw_x>
     334:	30 91 67 04 	lds	r19, 0x0467	; 0x800467 <raw_x+0x1>
     338:	28 2b       	or	r18, r24
     33a:	30 93 67 04 	sts	0x0467, r19	; 0x800467 <raw_x+0x1>
     33e:	20 93 66 04 	sts	0x0466, r18	; 0x800466 <raw_x>
     342:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <_Z11i2c_readAckv>
     346:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <raw_z>
     34a:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <raw_z+0x1>
     34e:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <_Z11i2c_readAckv>
     352:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <raw_z>
     356:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <raw_z+0x1>
     35a:	28 2b       	or	r18, r24
     35c:	30 93 63 04 	sts	0x0463, r19	; 0x800463 <raw_z+0x1>
     360:	20 93 62 04 	sts	0x0462, r18	; 0x800462 <raw_z>
     364:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <_Z11i2c_readAckv>
     368:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <raw_y>
     36c:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <raw_y+0x1>
     370:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <_Z11i2c_readNakv>
     374:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <raw_y>
     378:	30 91 65 04 	lds	r19, 0x0465	; 0x800465 <raw_y+0x1>
     37c:	28 2b       	or	r18, r24
     37e:	30 93 65 04 	sts	0x0465, r19	; 0x800465 <raw_y+0x1>
     382:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <raw_y>
     386:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <_Z8i2c_stopv>
     38a:	08 95       	ret

0000038c <_Z6millisv>:
     38c:	2f b7       	in	r18, 0x3f	; 63
     38e:	f8 94       	cli
     390:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <timer2_millis>
     394:	70 91 5f 04 	lds	r23, 0x045F	; 0x80045f <timer2_millis+0x1>
     398:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <timer2_millis+0x2>
     39c:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <timer2_millis+0x3>
     3a0:	2f bf       	out	0x3f, r18	; 63
     3a2:	08 95       	ret

000003a4 <_Z21initialise_timeperiodv>:
     3a4:	e1 eb       	ldi	r30, 0xB1	; 177
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	84 60       	ori	r24, 0x04	; 4
     3ac:	80 83       	st	Z, r24
     3ae:	e0 e7       	ldi	r30, 0x70	; 112
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 83       	st	Z, r24
     3b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     3bc:	08 95       	ret

000003be <__vector_15>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	9f 93       	push	r25
     3cc:	af 93       	push	r26
     3ce:	bf 93       	push	r27
     3d0:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <timer2_millis>
     3d4:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <timer2_millis+0x1>
     3d8:	a0 91 60 04 	lds	r26, 0x0460	; 0x800460 <timer2_millis+0x2>
     3dc:	b0 91 61 04 	lds	r27, 0x0461	; 0x800461 <timer2_millis+0x3>
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	a1 1d       	adc	r26, r1
     3e4:	b1 1d       	adc	r27, r1
     3e6:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <timer2_millis>
     3ea:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <timer2_millis+0x1>
     3ee:	a0 93 60 04 	sts	0x0460, r26	; 0x800460 <timer2_millis+0x2>
     3f2:	b0 93 61 04 	sts	0x0461, r27	; 0x800461 <timer2_millis+0x3>
     3f6:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <timer2_fract>
     3fa:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <timer2_fract+0x1>
     3fe:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <timer2_fract+0x2>
     402:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <timer2_fract+0x3>
     406:	03 96       	adiw	r24, 0x03	; 3
     408:	a1 1d       	adc	r26, r1
     40a:	b1 1d       	adc	r27, r1
     40c:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <timer2_fract>
     410:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <timer2_fract+0x1>
     414:	a0 93 5c 04 	sts	0x045C, r26	; 0x80045c <timer2_fract+0x2>
     418:	b0 93 5d 04 	sts	0x045D, r27	; 0x80045d <timer2_fract+0x3>
     41c:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <timer2_fract>
     420:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <timer2_fract+0x1>
     424:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <timer2_fract+0x2>
     428:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <timer2_fract+0x3>
     42c:	8d 37       	cpi	r24, 0x7D	; 125
     42e:	91 05       	cpc	r25, r1
     430:	a1 05       	cpc	r26, r1
     432:	b1 05       	cpc	r27, r1
     434:	38 f1       	brcs	.+78     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     436:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <timer2_fract>
     43a:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <timer2_fract+0x1>
     43e:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <timer2_fract+0x2>
     442:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <timer2_fract+0x3>
     446:	8d 57       	subi	r24, 0x7D	; 125
     448:	91 09       	sbc	r25, r1
     44a:	a1 09       	sbc	r26, r1
     44c:	b1 09       	sbc	r27, r1
     44e:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <timer2_fract>
     452:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <timer2_fract+0x1>
     456:	a0 93 5c 04 	sts	0x045C, r26	; 0x80045c <timer2_fract+0x2>
     45a:	b0 93 5d 04 	sts	0x045D, r27	; 0x80045d <timer2_fract+0x3>
     45e:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <timer2_millis>
     462:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <timer2_millis+0x1>
     466:	a0 91 60 04 	lds	r26, 0x0460	; 0x800460 <timer2_millis+0x2>
     46a:	b0 91 61 04 	lds	r27, 0x0461	; 0x800461 <timer2_millis+0x3>
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	a1 1d       	adc	r26, r1
     472:	b1 1d       	adc	r27, r1
     474:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <timer2_millis>
     478:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <timer2_millis+0x1>
     47c:	a0 93 60 04 	sts	0x0460, r26	; 0x800460 <timer2_millis+0x2>
     480:	b0 93 61 04 	sts	0x0461, r27	; 0x800461 <timer2_millis+0x3>
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <_Z8initGY88v>:
     496:	15 df       	rcall	.-470    	; 0x2c2 <_Z13init_HMC5883Lv>
     498:	81 ee       	ldi	r24, 0xE1	; 225
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	0e 94 d6 18 	call	0x31ac	; 0x31ac <_ZN7MPU60504InitEv>
     4a0:	62 e3       	ldi	r22, 0x32	; 50
     4a2:	81 ee       	ldi	r24, 0xE1	; 225
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	0e 94 88 1a 	call	0x3510	; 0x3510 <_ZN7MPU605013calibrateGyroEh>
     4aa:	7c df       	rcall	.-264    	; 0x3a4 <_Z21initialise_timeperiodv>
     4ac:	6f df       	rcall	.-290    	; 0x38c <_Z6millisv>
     4ae:	60 93 c5 03 	sts	0x03C5, r22	; 0x8003c5 <previousTime>
     4b2:	70 93 c6 03 	sts	0x03C6, r23	; 0x8003c6 <previousTime+0x1>
     4b6:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <previousTime+0x2>
     4ba:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <previousTime+0x3>
     4be:	08 95       	ret

000004c0 <_Z25compass_tilt_compensationfffff>:
     4c0:	4f 92       	push	r4
     4c2:	5f 92       	push	r5
     4c4:	6f 92       	push	r6
     4c6:	7f 92       	push	r7
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	64 97       	sbiw	r28, 0x14	; 20
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	69 83       	std	Y+1, r22	; 0x01
     4f2:	7a 83       	std	Y+2, r23	; 0x02
     4f4:	8b 83       	std	Y+3, r24	; 0x03
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	29 01       	movw	r4, r18
     4fa:	3a 01       	movw	r6, r20
     4fc:	e9 8a       	std	Y+17, r14	; 0x11
     4fe:	fa 8a       	std	Y+18, r15	; 0x12
     500:	0b 8b       	std	Y+19, r16	; 0x13
     502:	1c 8b       	std	Y+20, r17	; 0x14
     504:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <cos>
     508:	6d 87       	std	Y+13, r22	; 0x0d
     50a:	7e 87       	std	Y+14, r23	; 0x0e
     50c:	8f 87       	std	Y+15, r24	; 0x0f
     50e:	98 8b       	std	Y+16, r25	; 0x10
     510:	69 81       	ldd	r22, Y+1	; 0x01
     512:	7a 81       	ldd	r23, Y+2	; 0x02
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	0e 94 11 22 	call	0x4422	; 0x4422 <sin>
     51c:	69 83       	std	Y+1, r22	; 0x01
     51e:	7a 83       	std	Y+2, r23	; 0x02
     520:	8b 83       	std	Y+3, r24	; 0x03
     522:	9c 83       	std	Y+4, r25	; 0x04
     524:	c3 01       	movw	r24, r6
     526:	b2 01       	movw	r22, r4
     528:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <cos>
     52c:	6d 83       	std	Y+5, r22	; 0x05
     52e:	7e 83       	std	Y+6, r23	; 0x06
     530:	8f 83       	std	Y+7, r24	; 0x07
     532:	98 87       	std	Y+8, r25	; 0x08
     534:	c3 01       	movw	r24, r6
     536:	b2 01       	movw	r22, r4
     538:	0e 94 11 22 	call	0x4422	; 0x4422 <sin>
     53c:	69 87       	std	Y+9, r22	; 0x09
     53e:	7a 87       	std	Y+10, r23	; 0x0a
     540:	8b 87       	std	Y+11, r24	; 0x0b
     542:	9c 87       	std	Y+12, r25	; 0x0c
     544:	a6 01       	movw	r20, r12
     546:	95 01       	movw	r18, r10
     548:	6d 81       	ldd	r22, Y+5	; 0x05
     54a:	7e 81       	ldd	r23, Y+6	; 0x06
     54c:	8f 81       	ldd	r24, Y+7	; 0x07
     54e:	98 85       	ldd	r25, Y+8	; 0x08
     550:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     554:	2b 01       	movw	r4, r22
     556:	3c 01       	movw	r6, r24
     558:	28 a5       	ldd	r18, Y+40	; 0x28
     55a:	39 a5       	ldd	r19, Y+41	; 0x29
     55c:	4a a5       	ldd	r20, Y+42	; 0x2a
     55e:	5b a5       	ldd	r21, Y+43	; 0x2b
     560:	69 85       	ldd	r22, Y+9	; 0x09
     562:	7a 85       	ldd	r23, Y+10	; 0x0a
     564:	8b 85       	ldd	r24, Y+11	; 0x0b
     566:	9c 85       	ldd	r25, Y+12	; 0x0c
     568:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	c3 01       	movw	r24, r6
     572:	b2 01       	movw	r22, r4
     574:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
     578:	2b 01       	movw	r4, r22
     57a:	3c 01       	movw	r6, r24
     57c:	a6 01       	movw	r20, r12
     57e:	95 01       	movw	r18, r10
     580:	69 81       	ldd	r22, Y+1	; 0x01
     582:	7a 81       	ldd	r23, Y+2	; 0x02
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     58c:	29 85       	ldd	r18, Y+9	; 0x09
     58e:	3a 85       	ldd	r19, Y+10	; 0x0a
     590:	4b 85       	ldd	r20, Y+11	; 0x0b
     592:	5c 85       	ldd	r21, Y+12	; 0x0c
     594:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
     59c:	a8 01       	movw	r20, r16
     59e:	97 01       	movw	r18, r14
     5a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a6:	98 89       	ldd	r25, Y+16	; 0x10
     5a8:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	c5 01       	movw	r24, r10
     5b2:	b4 01       	movw	r22, r8
     5b4:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
     5b8:	4b 01       	movw	r8, r22
     5ba:	5c 01       	movw	r10, r24
     5bc:	28 a5       	ldd	r18, Y+40	; 0x28
     5be:	39 a5       	ldd	r19, Y+41	; 0x29
     5c0:	4a a5       	ldd	r20, Y+42	; 0x2a
     5c2:	5b a5       	ldd	r21, Y+43	; 0x2b
     5c4:	69 81       	ldd	r22, Y+1	; 0x01
     5c6:	7a 81       	ldd	r23, Y+2	; 0x02
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     5d0:	2d 81       	ldd	r18, Y+5	; 0x05
     5d2:	3e 81       	ldd	r19, Y+6	; 0x06
     5d4:	4f 81       	ldd	r20, Y+7	; 0x07
     5d6:	58 85       	ldd	r21, Y+8	; 0x08
     5d8:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     5dc:	9b 01       	movw	r18, r22
     5de:	ac 01       	movw	r20, r24
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     5e8:	90 58       	subi	r25, 0x80	; 128
     5ea:	a3 01       	movw	r20, r6
     5ec:	92 01       	movw	r18, r4
     5ee:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <atan2>
     5f2:	21 ee       	ldi	r18, 0xE1	; 225
     5f4:	3e e2       	ldi	r19, 0x2E	; 46
     5f6:	45 e6       	ldi	r20, 0x65	; 101
     5f8:	52 e4       	ldi	r21, 0x42	; 66
     5fa:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     5fe:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
     602:	9b 01       	movw	r18, r22
     604:	77 23       	and	r23, r23
     606:	14 f4       	brge	.+4      	; 0x60c <_Z25compass_tilt_compensationfffff+0x14c>
     608:	28 59       	subi	r18, 0x98	; 152
     60a:	3e 4f       	sbci	r19, 0xFE	; 254
     60c:	c9 01       	movw	r24, r18
     60e:	64 96       	adiw	r28, 0x14	; 20
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

0000063c <_Z24getAverageCompensatedYawv>:
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	28 97       	sbiw	r28, 0x08	; 8
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	60 91 64 04 	lds	r22, 0x0464	; 0x800464 <raw_y>
     66c:	70 91 65 04 	lds	r23, 0x0465	; 0x800465 <raw_y+0x1>
     670:	07 2e       	mov	r0, r23
     672:	00 0c       	add	r0, r0
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     67c:	5b 01       	movw	r10, r22
     67e:	6c 01       	movw	r12, r24
     680:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <raw_x>
     684:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <raw_x+0x1>
     688:	07 2e       	mov	r0, r23
     68a:	00 0c       	add	r0, r0
     68c:	88 0b       	sbc	r24, r24
     68e:	99 0b       	sbc	r25, r25
     690:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     694:	69 83       	std	Y+1, r22	; 0x01
     696:	7a 83       	std	Y+2, r23	; 0x02
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	25 e3       	ldi	r18, 0x35	; 53
     69e:	3a ef       	ldi	r19, 0xFA	; 250
     6a0:	4e e8       	ldi	r20, 0x8E	; 142
     6a2:	5c e3       	ldi	r21, 0x3C	; 60
     6a4:	60 91 cd 03 	lds	r22, 0x03CD	; 0x8003cd <_ZL14filtered_pitch>
     6a8:	70 91 ce 03 	lds	r23, 0x03CE	; 0x8003ce <_ZL14filtered_pitch+0x1>
     6ac:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZL14filtered_pitch+0x2>
     6b0:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <_ZL14filtered_pitch+0x3>
     6b4:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     6b8:	6d 83       	std	Y+5, r22	; 0x05
     6ba:	7e 83       	std	Y+6, r23	; 0x06
     6bc:	8f 83       	std	Y+7, r24	; 0x07
     6be:	98 87       	std	Y+8, r25	; 0x08
     6c0:	25 e3       	ldi	r18, 0x35	; 53
     6c2:	3a ef       	ldi	r19, 0xFA	; 250
     6c4:	4e e8       	ldi	r20, 0x8E	; 142
     6c6:	5c e3       	ldi	r21, 0x3C	; 60
     6c8:	60 91 d1 03 	lds	r22, 0x03D1	; 0x8003d1 <_ZL13filtered_roll>
     6cc:	70 91 d2 03 	lds	r23, 0x03D2	; 0x8003d2 <_ZL13filtered_roll+0x1>
     6d0:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <_ZL13filtered_roll+0x2>
     6d4:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <_ZL13filtered_roll+0x3>
     6d8:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
     6e0:	60 91 62 04 	lds	r22, 0x0462	; 0x800462 <raw_z>
     6e4:	70 91 63 04 	lds	r23, 0x0463	; 0x800463 <raw_z+0x1>
     6e8:	07 2e       	mov	r0, r23
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	7f 93       	push	r23
     6fa:	6f 93       	push	r22
     6fc:	e9 80       	ldd	r14, Y+1	; 0x01
     6fe:	fa 80       	ldd	r15, Y+2	; 0x02
     700:	0b 81       	ldd	r16, Y+3	; 0x03
     702:	1c 81       	ldd	r17, Y+4	; 0x04
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	3e 81       	ldd	r19, Y+6	; 0x06
     708:	4f 81       	ldd	r20, Y+7	; 0x07
     70a:	58 85       	ldd	r21, Y+8	; 0x08
     70c:	c3 01       	movw	r24, r6
     70e:	b2 01       	movw	r22, r4
     710:	d7 de       	rcall	.-594    	; 0x4c0 <_Z25compass_tilt_compensationfffff>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	bc 01       	movw	r22, r24
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 93 20 	call	0x4126	; 0x4126 <__floatunsisf>
     724:	2b 01       	movw	r4, r22
     726:	3c 01       	movw	r6, r24
     728:	2a e0       	ldi	r18, 0x0A	; 10
     72a:	29 83       	std	Y+1, r18	; 0x01
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	cb 01       	movw	r24, r22
     732:	a3 01       	movw	r20, r6
     734:	92 01       	movw	r18, r4
     736:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     73a:	29 81       	ldd	r18, Y+1	; 0x01
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	29 83       	std	Y+1, r18	; 0x01
     740:	21 11       	cpse	r18, r1
     742:	f7 cf       	rjmp	.-18     	; 0x732 <_Z24getAverageCompensatedYawv+0xf6>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e2       	ldi	r20, 0x20	; 32
     74a:	51 e4       	ldi	r21, 0x41	; 65
     74c:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <__divsf3>
     750:	28 96       	adiw	r28, 0x08	; 8
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	7f 90       	pop	r7
     772:	6f 90       	pop	r6
     774:	5f 90       	pop	r5
     776:	4f 90       	pop	r4
     778:	08 95       	ret

0000077a <_Z10getYawGY88v>:
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	2c 97       	sbiw	r28, 0x0c	; 12
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	61 ee       	ldi	r22, 0xE1	; 225
     79c:	73 e0       	ldi	r23, 0x03	; 3
     79e:	ce 01       	movw	r24, r28
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	0e 94 77 19 	call	0x32ee	; 0x32ee <_ZN7MPU605018readNormalizeAccelEv>
     7a6:	8c e0       	ldi	r24, 0x0C	; 12
     7a8:	fe 01       	movw	r30, r28
     7aa:	31 96       	adiw	r30, 0x01	; 1
     7ac:	a9 eb       	ldi	r26, 0xB9	; 185
     7ae:	b3 e0       	ldi	r27, 0x03	; 3
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <_Z10getYawGY88v+0x36>
     7b8:	81 ee       	ldi	r24, 0xE1	; 225
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN7MPU60508rateGyroEv>
     7c0:	09 eb       	ldi	r16, 0xB9	; 185
     7c2:	13 e0       	ldi	r17, 0x03	; 3
     7c4:	f8 01       	movw	r30, r16
     7c6:	c0 84       	ldd	r12, Z+8	; 0x08
     7c8:	d1 84       	ldd	r13, Z+9	; 0x09
     7ca:	e2 84       	ldd	r14, Z+10	; 0x0a
     7cc:	f3 84       	ldd	r15, Z+11	; 0x0b
     7ce:	60 81       	ld	r22, Z
     7d0:	71 81       	ldd	r23, Z+1	; 0x01
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	a7 01       	movw	r20, r14
     7d8:	96 01       	movw	r18, r12
     7da:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <atan2>
     7de:	21 ee       	ldi	r18, 0xE1	; 225
     7e0:	3e e2       	ldi	r19, 0x2E	; 46
     7e2:	45 e6       	ldi	r20, 0x65	; 101
     7e4:	52 e4       	ldi	r21, 0x42	; 66
     7e6:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     7ea:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <_ZL15unfiltered_roll>
     7ee:	70 93 de 03 	sts	0x03DE, r23	; 0x8003de <_ZL15unfiltered_roll+0x1>
     7f2:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <_ZL15unfiltered_roll+0x2>
     7f6:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <_ZL15unfiltered_roll+0x3>
     7fa:	f8 01       	movw	r30, r16
     7fc:	64 81       	ldd	r22, Z+4	; 0x04
     7fe:	75 81       	ldd	r23, Z+5	; 0x05
     800:	86 81       	ldd	r24, Z+6	; 0x06
     802:	97 81       	ldd	r25, Z+7	; 0x07
     804:	a7 01       	movw	r20, r14
     806:	96 01       	movw	r18, r12
     808:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <atan2>
     80c:	21 ee       	ldi	r18, 0xE1	; 225
     80e:	3e e2       	ldi	r19, 0x2E	; 46
     810:	45 e6       	ldi	r20, 0x65	; 101
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     818:	60 93 d9 03 	sts	0x03D9, r22	; 0x8003d9 <_ZL16unfiltered_pitch>
     81c:	70 93 da 03 	sts	0x03DA, r23	; 0x8003da <_ZL16unfiltered_pitch+0x1>
     820:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <_ZL16unfiltered_pitch+0x2>
     824:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <_ZL16unfiltered_pitch+0x3>
     828:	70 dd       	rcall	.-1312   	; 0x30a <_Z12read_Compassv>
     82a:	b0 dd       	rcall	.-1184   	; 0x38c <_Z6millisv>
     82c:	00 91 c5 03 	lds	r16, 0x03C5	; 0x8003c5 <previousTime>
     830:	10 91 c6 03 	lds	r17, 0x03C6	; 0x8003c6 <previousTime+0x1>
     834:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <previousTime+0x2>
     838:	30 91 c8 03 	lds	r19, 0x03C8	; 0x8003c8 <previousTime+0x3>
     83c:	60 17       	cp	r22, r16
     83e:	71 07       	cpc	r23, r17
     840:	82 07       	cpc	r24, r18
     842:	93 07       	cpc	r25, r19
     844:	09 f4       	brne	.+2      	; 0x848 <_Z10getYawGY88v+0xce>
     846:	f0 c0       	rjmp	.+480    	; 0xa28 <_Z10getYawGY88v+0x2ae>
     848:	a1 dd       	rcall	.-1214   	; 0x38c <_Z6millisv>
     84a:	60 93 c5 03 	sts	0x03C5, r22	; 0x8003c5 <previousTime>
     84e:	70 93 c6 03 	sts	0x03C6, r23	; 0x8003c6 <previousTime+0x1>
     852:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <previousTime+0x2>
     856:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <previousTime+0x3>
     85a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <readFirstData>
     85e:	88 23       	and	r24, r24
     860:	91 f1       	breq	.+100    	; 0x8c6 <_Z10getYawGY88v+0x14c>
     862:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZL15unfiltered_roll>
     866:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <_ZL15unfiltered_roll+0x1>
     86a:	a0 91 df 03 	lds	r26, 0x03DF	; 0x8003df <_ZL15unfiltered_roll+0x2>
     86e:	b0 91 e0 03 	lds	r27, 0x03E0	; 0x8003e0 <_ZL15unfiltered_roll+0x3>
     872:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <_ZL13filtered_roll>
     876:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <_ZL13filtered_roll+0x1>
     87a:	a0 93 d3 03 	sts	0x03D3, r26	; 0x8003d3 <_ZL13filtered_roll+0x2>
     87e:	b0 93 d4 03 	sts	0x03D4, r27	; 0x8003d4 <_ZL13filtered_roll+0x3>
     882:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <_ZL16unfiltered_pitch>
     886:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <_ZL16unfiltered_pitch+0x1>
     88a:	a0 91 db 03 	lds	r26, 0x03DB	; 0x8003db <_ZL16unfiltered_pitch+0x2>
     88e:	b0 91 dc 03 	lds	r27, 0x03DC	; 0x8003dc <_ZL16unfiltered_pitch+0x3>
     892:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <_ZL14filtered_pitch>
     896:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZL14filtered_pitch+0x1>
     89a:	a0 93 cf 03 	sts	0x03CF, r26	; 0x8003cf <_ZL14filtered_pitch+0x2>
     89e:	b0 93 d0 03 	sts	0x03D0, r27	; 0x8003d0 <_ZL14filtered_pitch+0x3>
     8a2:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <_ZL14unfiltered_yaw>
     8a6:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <_ZL14unfiltered_yaw+0x1>
     8aa:	a0 91 d7 03 	lds	r26, 0x03D7	; 0x8003d7 <_ZL14unfiltered_yaw+0x2>
     8ae:	b0 91 d8 03 	lds	r27, 0x03D8	; 0x8003d8 <_ZL14unfiltered_yaw+0x3>
     8b2:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_ZL12filtered_yaw>
     8b6:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <_ZL12filtered_yaw+0x1>
     8ba:	a0 93 cb 03 	sts	0x03CB, r26	; 0x8003cb <_ZL12filtered_yaw+0x2>
     8be:	b0 93 cc 03 	sts	0x03CC, r27	; 0x8003cc <_ZL12filtered_yaw+0x3>
     8c2:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <readFirstData>
     8c6:	81 ee       	ldi	r24, 0xE1	; 225
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <_ZN7MPU605012getGyroRateXEv>
     8ce:	2f e6       	ldi	r18, 0x6F	; 111
     8d0:	32 e1       	ldi	r19, 0x12	; 18
     8d2:	43 e8       	ldi	r20, 0x83	; 131
     8d4:	5a e3       	ldi	r21, 0x3A	; 58
     8d6:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     8da:	20 91 d1 03 	lds	r18, 0x03D1	; 0x8003d1 <_ZL13filtered_roll>
     8de:	30 91 d2 03 	lds	r19, 0x03D2	; 0x8003d2 <_ZL13filtered_roll+0x1>
     8e2:	40 91 d3 03 	lds	r20, 0x03D3	; 0x8003d3 <_ZL13filtered_roll+0x2>
     8e6:	50 91 d4 03 	lds	r21, 0x03D4	; 0x8003d4 <_ZL13filtered_roll+0x3>
     8ea:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     8ee:	2b e7       	ldi	r18, 0x7B	; 123
     8f0:	34 e1       	ldi	r19, 0x14	; 20
     8f2:	4e e6       	ldi	r20, 0x6E	; 110
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	29 e2       	ldi	r18, 0x29	; 41
     900:	3c e5       	ldi	r19, 0x5C	; 92
     902:	4f e8       	ldi	r20, 0x8F	; 143
     904:	5d e3       	ldi	r21, 0x3D	; 61
     906:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <_ZL15unfiltered_roll>
     90a:	70 91 de 03 	lds	r23, 0x03DE	; 0x8003de <_ZL15unfiltered_roll+0x1>
     90e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <_ZL15unfiltered_roll+0x2>
     912:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <_ZL15unfiltered_roll+0x3>
     916:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     926:	60 93 d1 03 	sts	0x03D1, r22	; 0x8003d1 <_ZL13filtered_roll>
     92a:	70 93 d2 03 	sts	0x03D2, r23	; 0x8003d2 <_ZL13filtered_roll+0x1>
     92e:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <_ZL13filtered_roll+0x2>
     932:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <_ZL13filtered_roll+0x3>
     936:	81 ee       	ldi	r24, 0xE1	; 225
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <_ZN7MPU605012getGyroRateYEv>
     93e:	2f e6       	ldi	r18, 0x6F	; 111
     940:	32 e1       	ldi	r19, 0x12	; 18
     942:	43 e8       	ldi	r20, 0x83	; 131
     944:	5a e3       	ldi	r21, 0x3A	; 58
     946:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     94a:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <_ZL14filtered_pitch>
     94e:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <_ZL14filtered_pitch+0x1>
     952:	40 91 cf 03 	lds	r20, 0x03CF	; 0x8003cf <_ZL14filtered_pitch+0x2>
     956:	50 91 d0 03 	lds	r21, 0x03D0	; 0x8003d0 <_ZL14filtered_pitch+0x3>
     95a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     95e:	2b e7       	ldi	r18, 0x7B	; 123
     960:	34 e1       	ldi	r19, 0x14	; 20
     962:	4e e6       	ldi	r20, 0x6E	; 110
     964:	5f e3       	ldi	r21, 0x3F	; 63
     966:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	29 e2       	ldi	r18, 0x29	; 41
     970:	3c e5       	ldi	r19, 0x5C	; 92
     972:	4f e8       	ldi	r20, 0x8F	; 143
     974:	5d e3       	ldi	r21, 0x3D	; 61
     976:	60 91 d9 03 	lds	r22, 0x03D9	; 0x8003d9 <_ZL16unfiltered_pitch>
     97a:	70 91 da 03 	lds	r23, 0x03DA	; 0x8003da <_ZL16unfiltered_pitch+0x1>
     97e:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <_ZL16unfiltered_pitch+0x2>
     982:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <_ZL16unfiltered_pitch+0x3>
     986:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     996:	60 93 cd 03 	sts	0x03CD, r22	; 0x8003cd <_ZL14filtered_pitch>
     99a:	70 93 ce 03 	sts	0x03CE, r23	; 0x8003ce <_ZL14filtered_pitch+0x1>
     99e:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <_ZL14filtered_pitch+0x2>
     9a2:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <_ZL14filtered_pitch+0x3>
     9a6:	4a de       	rcall	.-876    	; 0x63c <_Z24getAverageCompensatedYawv>
     9a8:	60 93 d5 03 	sts	0x03D5, r22	; 0x8003d5 <_ZL14unfiltered_yaw>
     9ac:	70 93 d6 03 	sts	0x03D6, r23	; 0x8003d6 <_ZL14unfiltered_yaw+0x1>
     9b0:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <_ZL14unfiltered_yaw+0x2>
     9b4:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <_ZL14unfiltered_yaw+0x3>
     9b8:	81 ee       	ldi	r24, 0xE1	; 225
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <_ZN7MPU605012getGyroRateZEv>
     9c0:	2f e6       	ldi	r18, 0x6F	; 111
     9c2:	32 e1       	ldi	r19, 0x12	; 18
     9c4:	43 e8       	ldi	r20, 0x83	; 131
     9c6:	5a e3       	ldi	r21, 0x3A	; 58
     9c8:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     9cc:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <_ZL12filtered_yaw>
     9d0:	30 91 ca 03 	lds	r19, 0x03CA	; 0x8003ca <_ZL12filtered_yaw+0x1>
     9d4:	40 91 cb 03 	lds	r20, 0x03CB	; 0x8003cb <_ZL12filtered_yaw+0x2>
     9d8:	50 91 cc 03 	lds	r21, 0x03CC	; 0x8003cc <_ZL12filtered_yaw+0x3>
     9dc:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     9e0:	2d ec       	ldi	r18, 0xCD	; 205
     9e2:	3c ec       	ldi	r19, 0xCC	; 204
     9e4:	4c ec       	ldi	r20, 0xCC	; 204
     9e6:	5d e3       	ldi	r21, 0x3D	; 61
     9e8:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	26 e6       	ldi	r18, 0x66	; 102
     9f2:	36 e6       	ldi	r19, 0x66	; 102
     9f4:	46 e6       	ldi	r20, 0x66	; 102
     9f6:	5f e3       	ldi	r21, 0x3F	; 63
     9f8:	60 91 d5 03 	lds	r22, 0x03D5	; 0x8003d5 <_ZL14unfiltered_yaw>
     9fc:	70 91 d6 03 	lds	r23, 0x03D6	; 0x8003d6 <_ZL14unfiltered_yaw+0x1>
     a00:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <_ZL14unfiltered_yaw+0x2>
     a04:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <_ZL14unfiltered_yaw+0x3>
     a08:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     a18:	60 93 c9 03 	sts	0x03C9, r22	; 0x8003c9 <_ZL12filtered_yaw>
     a1c:	70 93 ca 03 	sts	0x03CA, r23	; 0x8003ca <_ZL12filtered_yaw+0x1>
     a20:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <_ZL12filtered_yaw+0x2>
     a24:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <_ZL12filtered_yaw+0x3>
     a28:	60 91 c9 03 	lds	r22, 0x03C9	; 0x8003c9 <_ZL12filtered_yaw>
     a2c:	70 91 ca 03 	lds	r23, 0x03CA	; 0x8003ca <_ZL12filtered_yaw+0x1>
     a30:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <_ZL12filtered_yaw+0x2>
     a34:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <_ZL12filtered_yaw+0x3>
     a38:	0e 94 67 20 	call	0x40ce	; 0x40ce <__fixunssfsi>
     a3c:	cb 01       	movw	r24, r22
     a3e:	2c 96       	adiw	r28, 0x0c	; 12
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	08 95       	ret

00000a5c <_Z13initializeAllv>:
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	e7 e1       	ldi	r30, 0x17	; 23
     a66:	f3 e0       	ldi	r31, 0x03	; 3
     a68:	88 e2       	ldi	r24, 0x28	; 40
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	92 8b       	std	Z+18, r25	; 0x12
     a6e:	81 8b       	std	Z+17, r24	; 0x11
     a70:	14 8a       	std	Z+20, r1	; 0x14
     a72:	13 8a       	std	Z+19, r1	; 0x13
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e8       	ldi	r26, 0x80	; 128
     a7a:	b0 e4       	ldi	r27, 0x40	; 64
     a7c:	85 8b       	std	Z+21, r24	; 0x15
     a7e:	96 8b       	std	Z+22, r25	; 0x16
     a80:	a7 8b       	std	Z+23, r26	; 0x17
     a82:	b0 8f       	std	Z+24, r27	; 0x18
     a84:	8a e0       	ldi	r24, 0x0A	; 10
     a86:	97 ed       	ldi	r25, 0xD7	; 215
     a88:	a3 ea       	ldi	r26, 0xA3	; 163
     a8a:	bc e3       	ldi	r27, 0x3C	; 60
     a8c:	81 8f       	std	Z+25, r24	; 0x19
     a8e:	92 8f       	std	Z+26, r25	; 0x1a
     a90:	a3 8f       	std	Z+27, r26	; 0x1b
     a92:	b4 8f       	std	Z+28, r27	; 0x1c
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e2       	ldi	r26, 0x20	; 32
     a9a:	b1 e4       	ldi	r27, 0x41	; 65
     a9c:	85 8f       	std	Z+29, r24	; 0x1d
     a9e:	96 8f       	std	Z+30, r25	; 0x1e
     aa0:	a7 8f       	std	Z+31, r26	; 0x1f
     aa2:	b0 a3       	std	Z+32, r27	; 0x20
     aa4:	e6 ef       	ldi	r30, 0xF6	; 246
     aa6:	f2 e0       	ldi	r31, 0x02	; 2
     aa8:	8a e9       	ldi	r24, 0x9A	; 154
     aaa:	99 e9       	ldi	r25, 0x99	; 153
     aac:	a9 e1       	ldi	r26, 0x19	; 25
     aae:	be e3       	ldi	r27, 0x3E	; 62
     ab0:	85 8b       	std	Z+21, r24	; 0x15
     ab2:	96 8b       	std	Z+22, r25	; 0x16
     ab4:	a7 8b       	std	Z+23, r26	; 0x17
     ab6:	b0 8f       	std	Z+24, r27	; 0x18
     ab8:	11 8e       	std	Z+25, r1	; 0x19
     aba:	12 8e       	std	Z+26, r1	; 0x1a
     abc:	13 8e       	std	Z+27, r1	; 0x1b
     abe:	14 8e       	std	Z+28, r1	; 0x1c
     ac0:	46 e6       	ldi	r20, 0x66	; 102
     ac2:	56 e6       	ldi	r21, 0x66	; 102
     ac4:	66 e6       	ldi	r22, 0x66	; 102
     ac6:	7f e3       	ldi	r23, 0x3F	; 63
     ac8:	45 8f       	std	Z+29, r20	; 0x1d
     aca:	56 8f       	std	Z+30, r21	; 0x1e
     acc:	67 8f       	std	Z+31, r22	; 0x1f
     ace:	70 a3       	std	Z+32, r23	; 0x20
     ad0:	e5 ed       	ldi	r30, 0xD5	; 213
     ad2:	f2 e0       	ldi	r31, 0x02	; 2
     ad4:	85 8b       	std	Z+21, r24	; 0x15
     ad6:	96 8b       	std	Z+22, r25	; 0x16
     ad8:	a7 8b       	std	Z+23, r26	; 0x17
     ada:	b0 8f       	std	Z+24, r27	; 0x18
     adc:	11 8e       	std	Z+25, r1	; 0x19
     ade:	12 8e       	std	Z+26, r1	; 0x1a
     ae0:	13 8e       	std	Z+27, r1	; 0x1b
     ae2:	14 8e       	std	Z+28, r1	; 0x1c
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	a0 e8       	ldi	r26, 0x80	; 128
     aea:	bf e3       	ldi	r27, 0x3F	; 63
     aec:	85 8f       	std	Z+29, r24	; 0x1d
     aee:	96 8f       	std	Z+30, r25	; 0x1e
     af0:	a7 8f       	std	Z+31, r26	; 0x1f
     af2:	b0 a3       	std	Z+32, r27	; 0x20
     af4:	a0 eb       	ldi	r26, 0xB0	; 176
     af6:	b2 e0       	ldi	r27, 0x02	; 2
     af8:	8d e2       	ldi	r24, 0x2D	; 45
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	1f 96       	adiw	r26, 0x0f	; 15
     afe:	9c 93       	st	X, r25
     b00:	8e 93       	st	-X, r24
     b02:	1e 97       	sbiw	r26, 0x0e	; 14
     b04:	ef e8       	ldi	r30, 0x8F	; 143
     b06:	f2 e0       	ldi	r31, 0x02	; 2
     b08:	97 87       	std	Z+15, r25	; 0x0f
     b0a:	86 87       	std	Z+14, r24	; 0x0e
     b0c:	0a e9       	ldi	r16, 0x9A	; 154
     b0e:	19 e9       	ldi	r17, 0x99	; 153
     b10:	29 e9       	ldi	r18, 0x99	; 153
     b12:	3f e3       	ldi	r19, 0x3F	; 63
     b14:	55 96       	adiw	r26, 0x15	; 21
     b16:	0d 93       	st	X+, r16
     b18:	1d 93       	st	X+, r17
     b1a:	2d 93       	st	X+, r18
     b1c:	3c 93       	st	X, r19
     b1e:	58 97       	sbiw	r26, 0x18	; 24
     b20:	59 96       	adiw	r26, 0x19	; 25
     b22:	1d 92       	st	X+, r1
     b24:	1d 92       	st	X+, r1
     b26:	1d 92       	st	X+, r1
     b28:	1c 92       	st	X, r1
     b2a:	5c 97       	sbiw	r26, 0x1c	; 28
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	60 e8       	ldi	r22, 0x80	; 128
     b32:	71 e4       	ldi	r23, 0x41	; 65
     b34:	5d 96       	adiw	r26, 0x1d	; 29
     b36:	4d 93       	st	X+, r20
     b38:	5d 93       	st	X+, r21
     b3a:	6d 93       	st	X+, r22
     b3c:	7c 93       	st	X, r23
     b3e:	90 97       	sbiw	r26, 0x20	; 32
     b40:	05 8b       	std	Z+21, r16	; 0x15
     b42:	16 8b       	std	Z+22, r17	; 0x16
     b44:	27 8b       	std	Z+23, r18	; 0x17
     b46:	30 8f       	std	Z+24, r19	; 0x18
     b48:	11 8e       	std	Z+25, r1	; 0x19
     b4a:	12 8e       	std	Z+26, r1	; 0x1a
     b4c:	13 8e       	std	Z+27, r1	; 0x1b
     b4e:	14 8e       	std	Z+28, r1	; 0x1c
     b50:	45 8f       	std	Z+29, r20	; 0x1d
     b52:	56 8f       	std	Z+30, r21	; 0x1e
     b54:	67 8f       	std	Z+31, r22	; 0x1f
     b56:	70 a3       	std	Z+32, r23	; 0x20
     b58:	9e dc       	rcall	.-1732   	; 0x496 <_Z8initGY88v>
     b5a:	18 dc       	rcall	.-2000   	; 0x38c <_Z6millisv>
     b5c:	60 93 b5 03 	sts	0x03B5, r22	; 0x8003b5 <startTime>
     b60:	70 93 b6 03 	sts	0x03B6, r23	; 0x8003b6 <startTime+0x1>
     b64:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <startTime+0x2>
     b68:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <startTime+0x3>
     b6c:	c7 e1       	ldi	r28, 0x17	; 23
     b6e:	d3 e0       	ldi	r29, 0x03	; 3
     b70:	0d dc       	rcall	.-2022   	; 0x38c <_Z6millisv>
     b72:	00 91 b5 03 	lds	r16, 0x03B5	; 0x8003b5 <startTime>
     b76:	10 91 b6 03 	lds	r17, 0x03B6	; 0x8003b6 <startTime+0x1>
     b7a:	20 91 b7 03 	lds	r18, 0x03B7	; 0x8003b7 <startTime+0x2>
     b7e:	30 91 b8 03 	lds	r19, 0x03B8	; 0x8003b8 <startTime+0x3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	80 1b       	sub	r24, r16
     b88:	91 0b       	sbc	r25, r17
     b8a:	a2 0b       	sbc	r26, r18
     b8c:	b3 0b       	sbc	r27, r19
     b8e:	84 3f       	cpi	r24, 0xF4	; 244
     b90:	91 40       	sbci	r25, 0x01	; 1
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	48 f4       	brcc	.+18     	; 0xbaa <_Z13initializeAllv+0x14e>
     b98:	f0 dd       	rcall	.-1056   	; 0x77a <_Z10getYawGY88v>
     b9a:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <initialCompassAngle+0x1>
     b9e:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <initialCompassAngle>
     ba2:	18 8a       	std	Y+16, r1	; 0x10
     ba4:	9f 87       	std	Y+15, r25	; 0x0f
     ba6:	8e 87       	std	Y+14, r24	; 0x0e
     ba8:	e3 cf       	rjmp	.-58     	; 0xb70 <_Z13initializeAllv+0x114>
     baa:	0e 94 84 1c 	call	0x3908	; 0x3908 <_Z16checkRobotMotionv>
     bae:	88 e6       	ldi	r24, 0x68	; 104
     bb0:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	08 95       	ret

00000bbe <_Z10BrakeMotorv>:
     bbe:	e8 e0       	ldi	r30, 0x08	; 8
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	90 81       	ld	r25, Z
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	89 27       	eor	r24, r25
     bc8:	80 83       	st	Z, r24
     bca:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <movingxfront>
     bce:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <movingxback>
     bd2:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <movingyfront>
     bd6:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <movingyback>
     bda:	08 95       	ret

00000bdc <_Z15sendDataToSlavev>:
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	8f e7       	ldi	r24, 0x7F	; 127
     be2:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_Z10uart2_putch>
     be6:	cd ea       	ldi	r28, 0xAD	; 173
     be8:	d3 e0       	ldi	r29, 0x03	; 3
     bea:	88 81       	ld	r24, Y
     bec:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_Z10uart2_putch>
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_Z10uart2_putch>
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_Z10uart2_putch>
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <_Z10uart2_putch>
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <_Z19calculateCompassPIDv>:
     c08:	2f 92       	push	r2
     c0a:	3f 92       	push	r3
     c0c:	4f 92       	push	r4
     c0e:	5f 92       	push	r5
     c10:	6f 92       	push	r6
     c12:	7f 92       	push	r7
     c14:	8f 92       	push	r8
     c16:	9f 92       	push	r9
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <_Z19calculateCompassPIDv+0x26>
     c2e:	1f 92       	push	r1
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
     c3a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PidUpdateFlagCompass>
     c3e:	88 23       	and	r24, r24
     c40:	09 f4       	brne	.+2      	; 0xc44 <_Z19calculateCompassPIDv+0x3c>
     c42:	19 c1       	rjmp	.+562    	; 0xe76 <_Z19calculateCompassPIDv+0x26e>
     c44:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <compassPID>
     c48:	88 23       	and	r24, r24
     c4a:	09 f4       	brne	.+2      	; 0xc4e <_Z19calculateCompassPIDv+0x46>
     c4c:	18 c1       	rjmp	.+560    	; 0xe7e <_Z19calculateCompassPIDv+0x276>
     c4e:	95 dd       	rcall	.-1238   	; 0x77a <_Z10getYawGY88v>
     c50:	8c 01       	movw	r16, r24
     c52:	e7 e1       	ldi	r30, 0x17	; 23
     c54:	f3 e0       	ldi	r31, 0x03	; 3
     c56:	91 83       	std	Z+1, r25	; 0x01
     c58:	80 83       	st	Z, r24
     c5a:	86 85       	ldd	r24, Z+14	; 0x0e
     c5c:	97 85       	ldd	r25, Z+15	; 0x0f
     c5e:	80 1b       	sub	r24, r16
     c60:	91 0b       	sbc	r25, r17
     c62:	85 3b       	cpi	r24, 0xB5	; 181
     c64:	91 05       	cpc	r25, r1
     c66:	3c f0       	brlt	.+14     	; 0xc76 <_Z19calculateCompassPIDv+0x6e>
     c68:	88 56       	subi	r24, 0x68	; 104
     c6a:	91 40       	sbci	r25, 0x01	; 1
     c6c:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <compass+0x3>
     c70:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <compass+0x2>
     c74:	0f c0       	rjmp	.+30     	; 0xc94 <_Z19calculateCompassPIDv+0x8c>
     c76:	8c 34       	cpi	r24, 0x4C	; 76
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	92 07       	cpc	r25, r18
     c7c:	2c f0       	brlt	.+10     	; 0xc88 <_Z19calculateCompassPIDv+0x80>
     c7e:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <compass+0x3>
     c82:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <compass+0x2>
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <_Z19calculateCompassPIDv+0x8c>
     c88:	88 59       	subi	r24, 0x98	; 152
     c8a:	9e 4f       	sbci	r25, 0xFE	; 254
     c8c:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <compass+0x3>
     c90:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <compass+0x2>
     c94:	20 90 19 03 	lds	r2, 0x0319	; 0x800319 <compass+0x2>
     c98:	30 90 1a 03 	lds	r3, 0x031A	; 0x80031a <compass+0x3>
     c9c:	b1 01       	movw	r22, r2
     c9e:	03 2c       	mov	r0, r3
     ca0:	00 0c       	add	r0, r0
     ca2:	88 0b       	sbc	r24, r24
     ca4:	99 0b       	sbc	r25, r25
     ca6:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     caa:	4b 01       	movw	r8, r22
     cac:	5c 01       	movw	r10, r24
     cae:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <compass+0x19>
     cb2:	30 91 31 03 	lds	r19, 0x0331	; 0x800331 <compass+0x1a>
     cb6:	40 91 32 03 	lds	r20, 0x0332	; 0x800332 <compass+0x1b>
     cba:	50 91 33 03 	lds	r21, 0x0333	; 0x800333 <compass+0x1c>
     cbe:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     cc2:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <compass+0xa>
     cc6:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <compass+0xb>
     cca:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <compass+0xc>
     cce:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <compass+0xd>
     cd2:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     cd6:	6b 01       	movw	r12, r22
     cd8:	7c 01       	movw	r14, r24
     cda:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <compass+0xa>
     cde:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <compass+0xb>
     ce2:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <compass+0xc>
     ce6:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <compass+0xd>
     cea:	60 91 28 03 	lds	r22, 0x0328	; 0x800328 <compass+0x11>
     cee:	70 91 29 03 	lds	r23, 0x0329	; 0x800329 <compass+0x12>
     cf2:	07 2e       	mov	r0, r23
     cf4:	00 0c       	add	r0, r0
     cf6:	88 0b       	sbc	r24, r24
     cf8:	99 0b       	sbc	r25, r25
     cfa:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     cfe:	69 83       	std	Y+1, r22	; 0x01
     d00:	7a 83       	std	Y+2, r23	; 0x02
     d02:	8b 83       	std	Y+3, r24	; 0x03
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	2d ec       	ldi	r18, 0xCD	; 205
     d08:	3c ec       	ldi	r19, 0xCC	; 204
     d0a:	4c ec       	ldi	r20, 0xCC	; 204
     d0c:	5d e3       	ldi	r21, 0x3D	; 61
     d0e:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     d12:	2b 01       	movw	r4, r22
     d14:	3c 01       	movw	r6, r24
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
     d1e:	9b 01       	movw	r18, r22
     d20:	77 23       	and	r23, r23
     d22:	24 f4       	brge	.+8      	; 0xd2c <_Z19calculateCompassPIDv+0x124>
     d24:	22 27       	eor	r18, r18
     d26:	33 27       	eor	r19, r19
     d28:	26 1b       	sub	r18, r22
     d2a:	37 0b       	sbc	r19, r23
     d2c:	b9 01       	movw	r22, r18
     d2e:	33 0f       	add	r19, r19
     d30:	88 0b       	sbc	r24, r24
     d32:	99 0b       	sbc	r25, r25
     d34:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     d38:	a3 01       	movw	r20, r6
     d3a:	92 01       	movw	r18, r4
     d3c:	0e 94 a3 21 	call	0x4346	; 0x4346 <__gesf2>
     d40:	18 16       	cp	r1, r24
     d42:	24 f5       	brge	.+72     	; 0xd8c <_Z19calculateCompassPIDv+0x184>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	a9 01       	movw	r20, r18
     d4a:	c7 01       	movw	r24, r14
     d4c:	b6 01       	movw	r22, r12
     d4e:	0e 94 a3 21 	call	0x4346	; 0x4346 <__gesf2>
     d52:	18 16       	cp	r1, r24
     d54:	4c f4       	brge	.+18     	; 0xd68 <_Z19calculateCompassPIDv+0x160>
     d56:	40 92 21 03 	sts	0x0321, r4	; 0x800321 <compass+0xa>
     d5a:	50 92 22 03 	sts	0x0322, r5	; 0x800322 <compass+0xb>
     d5e:	60 92 23 03 	sts	0x0323, r6	; 0x800323 <compass+0xc>
     d62:	70 92 24 03 	sts	0x0324, r7	; 0x800324 <compass+0xd>
     d66:	12 c0       	rjmp	.+36     	; 0xd8c <_Z19calculateCompassPIDv+0x184>
     d68:	2d ec       	ldi	r18, 0xCD	; 205
     d6a:	3c ec       	ldi	r19, 0xCC	; 204
     d6c:	4c ec       	ldi	r20, 0xCC	; 204
     d6e:	5d eb       	ldi	r21, 0xBD	; 189
     d70:	69 81       	ldd	r22, Y+1	; 0x01
     d72:	7a 81       	ldd	r23, Y+2	; 0x02
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     d7c:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <compass+0xa>
     d80:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <compass+0xb>
     d84:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <compass+0xc>
     d88:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <compass+0xd>
     d8c:	c1 01       	movw	r24, r2
     d8e:	99 23       	and	r25, r25
     d90:	24 f4       	brge	.+8      	; 0xd9a <_Z19calculateCompassPIDv+0x192>
     d92:	88 27       	eor	r24, r24
     d94:	99 27       	eor	r25, r25
     d96:	82 19       	sub	r24, r2
     d98:	93 09       	sbc	r25, r3
     d9a:	02 97       	sbiw	r24, 0x02	; 2
     d9c:	e4 f1       	brlt	.+120    	; 0xe16 <_Z19calculateCompassPIDv+0x20e>
     d9e:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <compass+0x15>
     da2:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <compass+0x16>
     da6:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <compass+0x17>
     daa:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <compass+0x18>
     dae:	c5 01       	movw	r24, r10
     db0:	b4 01       	movw	r22, r8
     db2:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     db6:	6b 01       	movw	r12, r22
     db8:	7c 01       	movw	r14, r24
     dba:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <compass+0x4>
     dbe:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <compass+0x5>
     dc2:	b8 01       	movw	r22, r16
     dc4:	68 1b       	sub	r22, r24
     dc6:	79 0b       	sbc	r23, r25
     dc8:	07 2e       	mov	r0, r23
     dca:	00 0c       	add	r0, r0
     dcc:	88 0b       	sbc	r24, r24
     dce:	99 0b       	sbc	r25, r25
     dd0:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     dd4:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <compass+0x1d>
     dd8:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <compass+0x1e>
     ddc:	40 91 36 03 	lds	r20, 0x0336	; 0x800336 <compass+0x1f>
     de0:	50 91 37 03 	lds	r21, 0x0337	; 0x800337 <compass+0x20>
     de4:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
     df4:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <compass+0xa>
     df8:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <compass+0xb>
     dfc:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <compass+0xc>
     e00:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <compass+0xd>
     e04:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     e08:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
     e0c:	70 93 1e 03 	sts	0x031E, r23	; 0x80031e <compass+0x7>
     e10:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <compass+0x6>
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <_Z19calculateCompassPIDv+0x21e>
     e16:	e7 e1       	ldi	r30, 0x17	; 23
     e18:	f3 e0       	ldi	r31, 0x03	; 3
     e1a:	12 86       	std	Z+10, r1	; 0x0a
     e1c:	13 86       	std	Z+11, r1	; 0x0b
     e1e:	14 86       	std	Z+12, r1	; 0x0c
     e20:	15 86       	std	Z+13, r1	; 0x0d
     e22:	17 82       	std	Z+7, r1	; 0x07
     e24:	16 82       	std	Z+6, r1	; 0x06
     e26:	e7 e1       	ldi	r30, 0x17	; 23
     e28:	f3 e0       	ldi	r31, 0x03	; 3
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	95 83       	std	Z+5, r25	; 0x05
     e30:	84 83       	std	Z+4, r24	; 0x04
     e32:	86 81       	ldd	r24, Z+6	; 0x06
     e34:	97 81       	ldd	r25, Z+7	; 0x07
     e36:	21 89       	ldd	r18, Z+17	; 0x11
     e38:	32 89       	ldd	r19, Z+18	; 0x12
     e3a:	ac 01       	movw	r20, r24
     e3c:	99 23       	and	r25, r25
     e3e:	24 f4       	brge	.+8      	; 0xe48 <_Z19calculateCompassPIDv+0x240>
     e40:	44 27       	eor	r20, r20
     e42:	55 27       	eor	r21, r21
     e44:	48 1b       	sub	r20, r24
     e46:	59 0b       	sbc	r21, r25
     e48:	24 17       	cp	r18, r20
     e4a:	35 07       	cpc	r19, r21
     e4c:	54 f4       	brge	.+20     	; 0xe62 <_Z19calculateCompassPIDv+0x25a>
     e4e:	28 17       	cp	r18, r24
     e50:	39 07       	cpc	r19, r25
     e52:	1c f0       	brlt	.+6      	; 0xe5a <_Z19calculateCompassPIDv+0x252>
     e54:	31 95       	neg	r19
     e56:	21 95       	neg	r18
     e58:	31 09       	sbc	r19, r1
     e5a:	30 93 1e 03 	sts	0x031E, r19	; 0x80031e <compass+0x7>
     e5e:	20 93 1d 03 	sts	0x031D, r18	; 0x80031d <compass+0x6>
     e62:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <compass+0x6>
     e66:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <compass+0x7>
     e6a:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <velocity_robot+0x5>
     e6e:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <velocity_robot+0x4>
     e72:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <PidUpdateFlagCompass>
     e76:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <compassPID>
     e7a:	81 11       	cpse	r24, r1
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <_Z19calculateCompassPIDv+0x27e>
     e7e:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <velocity_robot+0x5>
     e82:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <velocity_robot+0x4>
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	bf 90       	pop	r11
     ea0:	af 90       	pop	r10
     ea2:	9f 90       	pop	r9
     ea4:	8f 90       	pop	r8
     ea6:	7f 90       	pop	r7
     ea8:	6f 90       	pop	r6
     eaa:	5f 90       	pop	r5
     eac:	4f 90       	pop	r4
     eae:	3f 90       	pop	r3
     eb0:	2f 90       	pop	r2
     eb2:	08 95       	ret

00000eb4 <_Z12calculatevelv>:
     eb4:	2f 92       	push	r2
     eb6:	3f 92       	push	r3
     eb8:	4f 92       	push	r4
     eba:	5f 92       	push	r5
     ebc:	6f 92       	push	r6
     ebe:	7f 92       	push	r7
     ec0:	8f 92       	push	r8
     ec2:	9f 92       	push	r9
     ec4:	af 92       	push	r10
     ec6:	bf 92       	push	r11
     ec8:	cf 92       	push	r12
     eca:	df 92       	push	r13
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	00 d0       	rcall	.+0      	; 0xeda <_Z12calculatevelv+0x26>
     eda:	1f 92       	push	r1
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <inverseKinematicsTrue>
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <_Z12calculatevelv+0x36>
     ee8:	57 c0       	rjmp	.+174    	; 0xf98 <_Z12calculatevelv+0xe4>
     eea:	0f 2e       	mov	r0, r31
     eec:	f5 ea       	ldi	r31, 0xA5	; 165
     eee:	cf 2e       	mov	r12, r31
     ef0:	f3 e0       	ldi	r31, 0x03	; 3
     ef2:	df 2e       	mov	r13, r31
     ef4:	f0 2d       	mov	r31, r0
     ef6:	0f 2e       	mov	r0, r31
     ef8:	f3 e2       	ldi	r31, 0x23	; 35
     efa:	4f 2e       	mov	r4, r31
     efc:	f2 e0       	ldi	r31, 0x02	; 2
     efe:	5f 2e       	mov	r5, r31
     f00:	f0 2d       	mov	r31, r0
     f02:	0f 2e       	mov	r0, r31
     f04:	fd ea       	ldi	r31, 0xAD	; 173
     f06:	2f 2e       	mov	r2, r31
     f08:	f3 e0       	ldi	r31, 0x03	; 3
     f0a:	3f 2e       	mov	r3, r31
     f0c:	f0 2d       	mov	r31, r0
     f0e:	0f 2e       	mov	r0, r31
     f10:	f5 ea       	ldi	r31, 0xA5	; 165
     f12:	6f 2e       	mov	r6, r31
     f14:	f3 e0       	ldi	r31, 0x03	; 3
     f16:	7f 2e       	mov	r7, r31
     f18:	f0 2d       	mov	r31, r0
     f1a:	da 82       	std	Y+2, r13	; 0x02
     f1c:	c9 82       	std	Y+1, r12	; 0x01
     f1e:	0f e9       	ldi	r16, 0x9F	; 159
     f20:	13 e0       	ldi	r17, 0x03	; 3
     f22:	72 01       	movw	r14, r4
     f24:	1b 82       	std	Y+3, r1	; 0x03
     f26:	1c 82       	std	Y+4, r1	; 0x04
     f28:	d8 01       	movw	r26, r16
     f2a:	6d 91       	ld	r22, X+
     f2c:	7d 91       	ld	r23, X+
     f2e:	8d 01       	movw	r16, r26
     f30:	f7 01       	movw	r30, r14
     f32:	81 90       	ld	r8, Z+
     f34:	91 90       	ld	r9, Z+
     f36:	a1 90       	ld	r10, Z+
     f38:	b1 90       	ld	r11, Z+
     f3a:	7f 01       	movw	r14, r30
     f3c:	07 2e       	mov	r0, r23
     f3e:	00 0c       	add	r0, r0
     f40:	88 0b       	sbc	r24, r24
     f42:	99 0b       	sbc	r25, r25
     f44:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     f48:	a5 01       	movw	r20, r10
     f4a:	94 01       	movw	r18, r8
     f4c:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
     f50:	4b 01       	movw	r8, r22
     f52:	5c 01       	movw	r10, r24
     f54:	2b 81       	ldd	r18, Y+3	; 0x03
     f56:	3c 81       	ldd	r19, Y+4	; 0x04
     f58:	b9 01       	movw	r22, r18
     f5a:	33 0f       	add	r19, r19
     f5c:	88 0b       	sbc	r24, r24
     f5e:	99 0b       	sbc	r25, r25
     f60:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
     f64:	9b 01       	movw	r18, r22
     f66:	ac 01       	movw	r20, r24
     f68:	c5 01       	movw	r24, r10
     f6a:	b4 01       	movw	r22, r8
     f6c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
     f70:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
     f74:	7c 83       	std	Y+4, r23	; 0x04
     f76:	6b 83       	std	Y+3, r22	; 0x03
     f78:	06 15       	cp	r16, r6
     f7a:	17 05       	cpc	r17, r7
     f7c:	a9 f6       	brne	.-86     	; 0xf28 <_Z12calculatevelv+0x74>
     f7e:	a9 81       	ldd	r26, Y+1	; 0x01
     f80:	ba 81       	ldd	r27, Y+2	; 0x02
     f82:	6d 93       	st	X+, r22
     f84:	7c 93       	st	X, r23
     f86:	f2 e0       	ldi	r31, 0x02	; 2
     f88:	cf 0e       	add	r12, r31
     f8a:	d1 1c       	adc	r13, r1
     f8c:	2c e0       	ldi	r18, 0x0C	; 12
     f8e:	42 0e       	add	r4, r18
     f90:	51 1c       	adc	r5, r1
     f92:	c2 14       	cp	r12, r2
     f94:	d3 04       	cpc	r13, r3
     f96:	09 f6       	brne	.-126    	; 0xf1a <_Z12calculatevelv+0x66>
     f98:	ed ea       	ldi	r30, 0xAD	; 173
     f9a:	f3 e0       	ldi	r31, 0x03	; 3
     f9c:	a5 ea       	ldi	r26, 0xA5	; 165
     f9e:	b3 e0       	ldi	r27, 0x03	; 3
     fa0:	2d 91       	ld	r18, X+
     fa2:	3c 91       	ld	r19, X
     fa4:	47 e1       	ldi	r20, 0x17	; 23
     fa6:	42 9f       	mul	r20, r18
     fa8:	c0 01       	movw	r24, r0
     faa:	43 9f       	mul	r20, r19
     fac:	90 0d       	add	r25, r0
     fae:	11 24       	eor	r1, r1
     fb0:	29 ef       	ldi	r18, 0xF9	; 249
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	b9 01       	movw	r22, r18
     fb6:	0e 94 82 22 	call	0x4504	; 0x4504 <__divmodhi4>
     fba:	60 83       	st	Z, r22
     fbc:	60 91 a7 03 	lds	r22, 0x03A7	; 0x8003a7 <velocity_motor+0x2>
     fc0:	70 91 a8 03 	lds	r23, 0x03A8	; 0x8003a8 <velocity_motor+0x3>
     fc4:	46 9f       	mul	r20, r22
     fc6:	c0 01       	movw	r24, r0
     fc8:	47 9f       	mul	r20, r23
     fca:	90 0d       	add	r25, r0
     fcc:	11 24       	eor	r1, r1
     fce:	b9 01       	movw	r22, r18
     fd0:	0e 94 82 22 	call	0x4504	; 0x4504 <__divmodhi4>
     fd4:	61 83       	std	Z+1, r22	; 0x01
     fd6:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <velocity_motor+0x4>
     fda:	70 91 aa 03 	lds	r23, 0x03AA	; 0x8003aa <velocity_motor+0x5>
     fde:	46 9f       	mul	r20, r22
     fe0:	c0 01       	movw	r24, r0
     fe2:	47 9f       	mul	r20, r23
     fe4:	90 0d       	add	r25, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	b9 01       	movw	r22, r18
     fea:	0e 94 82 22 	call	0x4504	; 0x4504 <__divmodhi4>
     fee:	62 83       	std	Z+2, r22	; 0x02
     ff0:	60 91 ab 03 	lds	r22, 0x03AB	; 0x8003ab <velocity_motor+0x6>
     ff4:	70 91 ac 03 	lds	r23, 0x03AC	; 0x8003ac <velocity_motor+0x7>
     ff8:	46 9f       	mul	r20, r22
     ffa:	c0 01       	movw	r24, r0
     ffc:	47 9f       	mul	r20, r23
     ffe:	90 0d       	add	r25, r0
    1000:	11 24       	eor	r1, r1
    1002:	b9 01       	movw	r22, r18
    1004:	0e 94 82 22 	call	0x4504	; 0x4504 <__divmodhi4>
    1008:	63 83       	std	Z+3, r22	; 0x03
    100a:	e8 dd       	rcall	.-1072   	; 0xbdc <_Z15sendDataToSlavev>
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	7f 90       	pop	r7
    102e:	6f 90       	pop	r6
    1030:	5f 90       	pop	r5
    1032:	4f 90       	pop	r4
    1034:	3f 90       	pop	r3
    1036:	2f 90       	pop	r2
    1038:	08 95       	ret

0000103a <_Z4movxiij>:
    103a:	2f 92       	push	r2
    103c:	3f 92       	push	r3
    103e:	4f 92       	push	r4
    1040:	5f 92       	push	r5
    1042:	6f 92       	push	r6
    1044:	7f 92       	push	r7
    1046:	8f 92       	push	r8
    1048:	9f 92       	push	r9
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	1c 01       	movw	r2, r24
    1060:	8b 01       	movw	r16, r22
    1062:	7a 01       	movw	r14, r20
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
    106a:	80 e7       	ldi	r24, 0x70	; 112
    106c:	92 e0       	ldi	r25, 0x02	; 2
    106e:	a6 d8       	rcall	.-3764   	; 0x1bc <_ZN7encoder11getdistanceEv>
    1070:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1074:	ab 01       	movw	r20, r22
    1076:	77 23       	and	r23, r23
    1078:	24 f4       	brge	.+8      	; 0x1082 <_Z4movxiij+0x48>
    107a:	44 27       	eor	r20, r20
    107c:	55 27       	eor	r21, r21
    107e:	46 1b       	sub	r20, r22
    1080:	57 0b       	sbc	r21, r23
    1082:	ea 01       	movw	r28, r20
    1084:	50 93 9e 03 	sts	0x039E, r21	; 0x80039e <distanceX+0x1>
    1088:	40 93 9d 03 	sts	0x039D, r20	; 0x80039d <distanceX>
    108c:	30 92 05 03 	sts	0x0305, r3	; 0x800305 <driveX+0xf>
    1090:	20 92 04 03 	sts	0x0304, r2	; 0x800304 <driveX+0xe>
    1094:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <PidUpdateFlagDriveX>
    1098:	22 23       	and	r18, r18
    109a:	09 f4       	brne	.+2      	; 0x109e <_Z4movxiij+0x64>
    109c:	55 c1       	rjmp	.+682    	; 0x1348 <_Z4movxiij+0x30e>
    109e:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <movingyfront>
    10a2:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <movingyback>
    10a6:	50 93 f7 02 	sts	0x02F7, r21	; 0x8002f7 <driveX+0x1>
    10aa:	40 93 f6 02 	sts	0x02F6, r20	; 0x8002f6 <driveX>
    10ae:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <PidUpdateFlagDriveX>
    10b2:	48 3e       	cpi	r20, 0xE8	; 232
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	58 07       	cpc	r21, r24
    10b8:	0c f4       	brge	.+2      	; 0x10bc <_Z4movxiij+0x82>
    10ba:	ea c0       	rjmp	.+468    	; 0x1290 <_Z4movxiij+0x256>
    10bc:	24 1a       	sub	r2, r20
    10be:	35 0a       	sbc	r3, r21
    10c0:	0f 2e       	mov	r0, r31
    10c2:	f6 ef       	ldi	r31, 0xF6	; 246
    10c4:	cf 2e       	mov	r12, r31
    10c6:	f2 e0       	ldi	r31, 0x02	; 2
    10c8:	df 2e       	mov	r13, r31
    10ca:	f0 2d       	mov	r31, r0
    10cc:	f6 01       	movw	r30, r12
    10ce:	33 82       	std	Z+3, r3	; 0x03
    10d0:	22 82       	std	Z+2, r2	; 0x02
    10d2:	b1 01       	movw	r22, r2
    10d4:	03 2c       	mov	r0, r3
    10d6:	00 0c       	add	r0, r0
    10d8:	88 0b       	sbc	r24, r24
    10da:	99 0b       	sbc	r25, r25
    10dc:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    10e0:	2b 01       	movw	r4, r22
    10e2:	3c 01       	movw	r6, r24
    10e4:	f6 01       	movw	r30, r12
    10e6:	21 8d       	ldd	r18, Z+25	; 0x19
    10e8:	32 8d       	ldd	r19, Z+26	; 0x1a
    10ea:	43 8d       	ldd	r20, Z+27	; 0x1b
    10ec:	54 8d       	ldd	r21, Z+28	; 0x1c
    10ee:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    10f2:	f6 01       	movw	r30, r12
    10f4:	22 85       	ldd	r18, Z+10	; 0x0a
    10f6:	33 85       	ldd	r19, Z+11	; 0x0b
    10f8:	44 85       	ldd	r20, Z+12	; 0x0c
    10fa:	55 85       	ldd	r21, Z+13	; 0x0d
    10fc:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1100:	4b 01       	movw	r8, r22
    1102:	5c 01       	movw	r10, r24
    1104:	f6 01       	movw	r30, r12
    1106:	62 87       	std	Z+10, r22	; 0x0a
    1108:	73 87       	std	Z+11, r23	; 0x0b
    110a:	84 87       	std	Z+12, r24	; 0x0c
    110c:	95 87       	std	Z+13, r25	; 0x0d
    110e:	80 89       	ldd	r24, Z+16	; 0x10
    1110:	88 23       	and	r24, r24
    1112:	19 f0       	breq	.+6      	; 0x111a <_Z4movxiij+0xe0>
    1114:	d5 83       	std	Z+5, r29	; 0x05
    1116:	c4 83       	std	Z+4, r28	; 0x04
    1118:	10 8a       	std	Z+16, r1	; 0x10
    111a:	c5 01       	movw	r24, r10
    111c:	b4 01       	movw	r22, r8
    111e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1122:	9b 01       	movw	r18, r22
    1124:	77 23       	and	r23, r23
    1126:	24 f4       	brge	.+8      	; 0x1130 <_Z4movxiij+0xf6>
    1128:	22 27       	eor	r18, r18
    112a:	33 27       	eor	r19, r19
    112c:	26 1b       	sub	r18, r22
    112e:	37 0b       	sbc	r19, r23
    1130:	2b 30       	cpi	r18, 0x0B	; 11
    1132:	31 05       	cpc	r19, r1
    1134:	5c f1       	brlt	.+86     	; 0x118c <_Z4movxiij+0x152>
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	c5 01       	movw	r24, r10
    113e:	b4 01       	movw	r22, r8
    1140:	0e 94 a3 21 	call	0x4346	; 0x4346 <__gesf2>
    1144:	18 16       	cp	r1, r24
    1146:	6c f4       	brge	.+26     	; 0x1162 <_Z4movxiij+0x128>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 e2       	ldi	r26, 0x20	; 32
    114e:	b1 e4       	ldi	r27, 0x41	; 65
    1150:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <driveX+0xa>
    1154:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <driveX+0xb>
    1158:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <driveX+0xc>
    115c:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <driveX+0xd>
    1160:	15 c0       	rjmp	.+42     	; 0x118c <_Z4movxiij+0x152>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	c5 01       	movw	r24, r10
    116a:	b4 01       	movw	r22, r8
    116c:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__cmpsf2>
    1170:	88 23       	and	r24, r24
    1172:	64 f4       	brge	.+24     	; 0x118c <_Z4movxiij+0x152>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e2       	ldi	r26, 0x20	; 32
    117a:	b1 ec       	ldi	r27, 0xC1	; 193
    117c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <driveX+0xa>
    1180:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <driveX+0xb>
    1184:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <driveX+0xc>
    1188:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <driveX+0xd>
    118c:	12 14       	cp	r1, r2
    118e:	13 04       	cpc	r1, r3
    1190:	bc f5       	brge	.+110    	; 0x1200 <_Z4movxiij+0x1c6>
    1192:	0f 2e       	mov	r0, r31
    1194:	f6 ef       	ldi	r31, 0xF6	; 246
    1196:	cf 2e       	mov	r12, r31
    1198:	f2 e0       	ldi	r31, 0x02	; 2
    119a:	df 2e       	mov	r13, r31
    119c:	f0 2d       	mov	r31, r0
    119e:	f6 01       	movw	r30, r12
    11a0:	25 89       	ldd	r18, Z+21	; 0x15
    11a2:	36 89       	ldd	r19, Z+22	; 0x16
    11a4:	47 89       	ldd	r20, Z+23	; 0x17
    11a6:	50 8d       	ldd	r21, Z+24	; 0x18
    11a8:	c3 01       	movw	r24, r6
    11aa:	b2 01       	movw	r22, r4
    11ac:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    11b0:	f6 01       	movw	r30, r12
    11b2:	22 85       	ldd	r18, Z+10	; 0x0a
    11b4:	33 85       	ldd	r19, Z+11	; 0x0b
    11b6:	44 85       	ldd	r20, Z+12	; 0x0c
    11b8:	55 85       	ldd	r21, Z+13	; 0x0d
    11ba:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    11be:	4b 01       	movw	r8, r22
    11c0:	5c 01       	movw	r10, r24
    11c2:	f6 01       	movw	r30, r12
    11c4:	84 81       	ldd	r24, Z+4	; 0x04
    11c6:	95 81       	ldd	r25, Z+5	; 0x05
    11c8:	be 01       	movw	r22, r28
    11ca:	68 1b       	sub	r22, r24
    11cc:	79 0b       	sbc	r23, r25
    11ce:	07 2e       	mov	r0, r23
    11d0:	00 0c       	add	r0, r0
    11d2:	88 0b       	sbc	r24, r24
    11d4:	99 0b       	sbc	r25, r25
    11d6:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    11da:	f6 01       	movw	r30, r12
    11dc:	25 8d       	ldd	r18, Z+29	; 0x1d
    11de:	36 8d       	ldd	r19, Z+30	; 0x1e
    11e0:	47 8d       	ldd	r20, Z+31	; 0x1f
    11e2:	50 a1       	ldd	r21, Z+32	; 0x20
    11e4:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	c5 01       	movw	r24, r10
    11ee:	b4 01       	movw	r22, r8
    11f0:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
    11f4:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    11f8:	f6 01       	movw	r30, r12
    11fa:	77 83       	std	Z+7, r23	; 0x07
    11fc:	66 83       	std	Z+6, r22	; 0x06
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <_Z4movxiij+0x1ce>
    1200:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <driveX+0x7>
    1204:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <driveX+0x6>
    1208:	e6 ef       	ldi	r30, 0xF6	; 246
    120a:	f2 e0       	ldi	r31, 0x02	; 2
    120c:	d5 83       	std	Z+5, r29	; 0x05
    120e:	c4 83       	std	Z+4, r28	; 0x04
    1210:	86 81       	ldd	r24, Z+6	; 0x06
    1212:	97 81       	ldd	r25, Z+7	; 0x07
    1214:	9c 01       	movw	r18, r24
    1216:	99 23       	and	r25, r25
    1218:	24 f4       	brge	.+8      	; 0x1222 <_Z4movxiij+0x1e8>
    121a:	22 27       	eor	r18, r18
    121c:	33 27       	eor	r19, r19
    121e:	28 1b       	sub	r18, r24
    1220:	39 0b       	sbc	r19, r25
    1222:	e2 16       	cp	r14, r18
    1224:	f3 06       	cpc	r15, r19
    1226:	78 f4       	brcc	.+30     	; 0x1246 <_Z4movxiij+0x20c>
    1228:	18 16       	cp	r1, r24
    122a:	19 06       	cpc	r1, r25
    122c:	2c f4       	brge	.+10     	; 0x1238 <_Z4movxiij+0x1fe>
    122e:	f0 92 fd 02 	sts	0x02FD, r15	; 0x8002fd <driveX+0x7>
    1232:	e0 92 fc 02 	sts	0x02FC, r14	; 0x8002fc <driveX+0x6>
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <_Z4movxiij+0x20c>
    1238:	f1 94       	neg	r15
    123a:	e1 94       	neg	r14
    123c:	f1 08       	sbc	r15, r1
    123e:	f0 92 fd 02 	sts	0x02FD, r15	; 0x8002fd <driveX+0x7>
    1242:	e0 92 fc 02 	sts	0x02FC, r14	; 0x8002fc <driveX+0x6>
    1246:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <driveX+0x6>
    124a:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <driveX+0x7>
    124e:	43 96       	adiw	r24, 0x13	; 19
    1250:	87 97       	sbiw	r24, 0x27	; 39
    1252:	a8 f4       	brcc	.+42     	; 0x127e <_Z4movxiij+0x244>
    1254:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <movingxfront>
    1258:	88 23       	and	r24, r24
    125a:	39 f0       	breq	.+14     	; 0x126a <_Z4movxiij+0x230>
    125c:	84 e1       	ldi	r24, 0x14	; 20
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <driveX+0x7>
    1264:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <driveX+0x6>
    1268:	0a c0       	rjmp	.+20     	; 0x127e <_Z4movxiij+0x244>
    126a:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <movingxback>
    126e:	88 23       	and	r24, r24
    1270:	31 f0       	breq	.+12     	; 0x127e <_Z4movxiij+0x244>
    1272:	8c ee       	ldi	r24, 0xEC	; 236
    1274:	9f ef       	ldi	r25, 0xFF	; 255
    1276:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <driveX+0x7>
    127a:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <driveX+0x6>
    127e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <driveX+0x6>
    1282:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <driveX+0x7>
    1286:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <velocity_robot+0x1>
    128a:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <velocity_robot>
    128e:	35 c0       	rjmp	.+106    	; 0x12fa <_Z4movxiij+0x2c0>
    1290:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <startingAtFront>
    1294:	88 23       	and	r24, r24
    1296:	c9 f0       	breq	.+50     	; 0x12ca <_Z4movxiij+0x290>
    1298:	ba 01       	movw	r22, r20
    129a:	55 0f       	add	r21, r21
    129c:	88 0b       	sbc	r24, r24
    129e:	99 0b       	sbc	r25, r25
    12a0:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    12a4:	29 e2       	ldi	r18, 0x29	; 41
    12a6:	3c e5       	ldi	r19, 0x5C	; 92
    12a8:	4f e0       	ldi	r20, 0x0F	; 15
    12aa:	5e e3       	ldi	r21, 0x3E	; 62
    12ac:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e7       	ldi	r20, 0x70	; 112
    12b6:	52 e4       	ldi	r21, 0x42	; 66
    12b8:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    12bc:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    12c0:	70 93 a0 03 	sts	0x03A0, r23	; 0x8003a0 <velocity_robot+0x1>
    12c4:	60 93 9f 03 	sts	0x039F, r22	; 0x80039f <velocity_robot>
    12c8:	18 c0       	rjmp	.+48     	; 0x12fa <_Z4movxiij+0x2c0>
    12ca:	ba 01       	movw	r22, r20
    12cc:	55 0f       	add	r21, r21
    12ce:	88 0b       	sbc	r24, r24
    12d0:	99 0b       	sbc	r25, r25
    12d2:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    12d6:	2f e8       	ldi	r18, 0x8F	; 143
    12d8:	32 ec       	ldi	r19, 0xC2	; 194
    12da:	45 e7       	ldi	r20, 0x75	; 117
    12dc:	5d e3       	ldi	r21, 0x3D	; 61
    12de:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e7       	ldi	r20, 0x70	; 112
    12e8:	52 e4       	ldi	r21, 0x42	; 66
    12ea:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    12ee:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    12f2:	70 93 a0 03 	sts	0x03A0, r23	; 0x8003a0 <velocity_robot+0x1>
    12f6:	60 93 9f 03 	sts	0x039F, r22	; 0x80039f <velocity_robot>
    12fa:	02 30       	cpi	r16, 0x02	; 2
    12fc:	11 05       	cpc	r17, r1
    12fe:	51 f4       	brne	.+20     	; 0x1314 <_Z4movxiij+0x2da>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <movingxfront>
    1306:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <movingxback>
    130a:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <movingyback>
    130e:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <movingyfront>
    1312:	1a c0       	rjmp	.+52     	; 0x1348 <_Z4movxiij+0x30e>
    1314:	03 30       	cpi	r16, 0x03	; 3
    1316:	11 05       	cpc	r17, r1
    1318:	b9 f4       	brne	.+46     	; 0x1348 <_Z4movxiij+0x30e>
    131a:	ef e9       	ldi	r30, 0x9F	; 159
    131c:	f3 e0       	ldi	r31, 0x03	; 3
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	99 23       	and	r25, r25
    1324:	1c f4       	brge	.+6      	; 0x132c <_Z4movxiij+0x2f2>
    1326:	91 95       	neg	r25
    1328:	81 95       	neg	r24
    132a:	91 09       	sbc	r25, r1
    132c:	91 95       	neg	r25
    132e:	81 95       	neg	r24
    1330:	91 09       	sbc	r25, r1
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
    1336:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <movingxfront>
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <movingxback>
    1340:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <movingyfront>
    1344:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <movingyback>
    1348:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <startingAtFront>
    134c:	88 23       	and	r24, r24
    134e:	49 f0       	breq	.+18     	; 0x1362 <_Z4movxiij+0x328>
    1350:	ef e9       	ldi	r30, 0x9F	; 159
    1352:	f3 e0       	ldi	r31, 0x03	; 3
    1354:	84 ee       	ldi	r24, 0xE4	; 228
    1356:	9f ef       	ldi	r25, 0xFF	; 255
    1358:	93 83       	std	Z+3, r25	; 0x03
    135a:	82 83       	std	Z+2, r24	; 0x02
    135c:	15 82       	std	Z+5, r1	; 0x05
    135e:	14 82       	std	Z+4, r1	; 0x04
    1360:	05 c0       	rjmp	.+10     	; 0x136c <_Z4movxiij+0x332>
    1362:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <velocity_robot+0x3>
    1366:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <velocity_robot+0x2>
    136a:	4e dc       	rcall	.-1892   	; 0xc08 <_Z19calculateCompassPIDv>
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	df 90       	pop	r13
    137a:	cf 90       	pop	r12
    137c:	bf 90       	pop	r11
    137e:	af 90       	pop	r10
    1380:	9f 90       	pop	r9
    1382:	8f 90       	pop	r8
    1384:	7f 90       	pop	r7
    1386:	6f 90       	pop	r6
    1388:	5f 90       	pop	r5
    138a:	4f 90       	pop	r4
    138c:	3f 90       	pop	r3
    138e:	2f 90       	pop	r2
    1390:	08 95       	ret

00001392 <_Z27Get_Front_LinetrackerY_Datav>:
    1392:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z10uart2_getcv>
    1396:	85 36       	cpi	r24, 0x65	; 101
    1398:	38 f0       	brcs	.+14     	; 0x13a8 <_Z27Get_Front_LinetrackerY_Datav+0x16>
    139a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <_previous_data_of_front_linetracker>
    139e:	90 35       	cpi	r25, 0x50	; 80
    13a0:	61 f0       	breq	.+24     	; 0x13ba <_Z27Get_Front_LinetrackerY_Datav+0x28>
    13a2:	9a 30       	cpi	r25, 0x0A	; 10
    13a4:	d9 f5       	brne	.+118    	; 0x141c <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <_Z27Get_Front_LinetrackerY_Datav+0x1e>
    13a8:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <_previous_data_of_front_linetracker>
    13ac:	9a 30       	cpi	r25, 0x0A	; 10
    13ae:	81 f5       	brne	.+96     	; 0x1410 <_Z27Get_Front_LinetrackerY_Datav+0x7e>
    13b0:	81 11       	cpse	r24, r1
    13b2:	31 c0       	rjmp	.+98     	; 0x1416 <_Z27Get_Front_LinetrackerY_Datav+0x84>
    13b4:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <_front_linetracker_left_edge_left>
    13b8:	2e c0       	rjmp	.+92     	; 0x1416 <_Z27Get_Front_LinetrackerY_Datav+0x84>
    13ba:	86 34       	cpi	r24, 0x46	; 70
    13bc:	79 f4       	brne	.+30     	; 0x13dc <_Z27Get_Front_LinetrackerY_Datav+0x4a>
    13be:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <_front_linetracker_right_edge_left>
    13c2:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <_front_linetracker_left_edge_left>
    13c6:	91 11       	cpse	r25, r1
    13c8:	20 c0       	rjmp	.+64     	; 0x140a <_Z27Get_Front_LinetrackerY_Datav+0x78>
    13ca:	1a c0       	rjmp	.+52     	; 0x1400 <_Z27Get_Front_LinetrackerY_Datav+0x6e>
    13cc:	8a e0       	ldi	r24, 0x0A	; 10
    13ce:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <_front_linetracker_left_edge_left>
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	20 c0       	rjmp	.+64     	; 0x141c <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    13dc:	85 36       	cpi	r24, 0x65	; 101
    13de:	40 f0       	brcs	.+16     	; 0x13f0 <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    13e0:	80 e5       	ldi	r24, 0x50	; 80
    13e2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_front_linetracker_right_edge_left>
    13ec:	9a e5       	ldi	r25, 0x5A	; 90
    13ee:	16 c0       	rjmp	.+44     	; 0x141c <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    13f0:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <_front_linetracker_left_edge_left>
    13f4:	91 11       	cpse	r25, r1
    13f6:	09 c0       	rjmp	.+18     	; 0x140a <_Z27Get_Front_LinetrackerY_Datav+0x78>
    13f8:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <_front_linetracker_right_edge_left>
    13fc:	91 11       	cpse	r25, r1
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <_Z27Get_Front_LinetrackerY_Datav+0x78>
    1400:	9a e0       	ldi	r25, 0x0A	; 10
    1402:	98 0f       	add	r25, r24
    1404:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_previous_data_of_front_linetracker>
    1408:	09 c0       	rjmp	.+18     	; 0x141c <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    140a:	9a e0       	ldi	r25, 0x0A	; 10
    140c:	98 0f       	add	r25, r24
    140e:	06 c0       	rjmp	.+12     	; 0x141c <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1410:	90 35       	cpi	r25, 0x50	; 80
    1412:	71 f7       	brne	.-36     	; 0x13f0 <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    1414:	d2 cf       	rjmp	.-92     	; 0x13ba <_Z27Get_Front_LinetrackerY_Datav+0x28>
    1416:	85 36       	cpi	r24, 0x65	; 101
    1418:	58 f3       	brcs	.-42     	; 0x13f0 <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    141a:	d8 cf       	rjmp	.-80     	; 0x13cc <_Z27Get_Front_LinetrackerY_Datav+0x3a>
    141c:	89 2f       	mov	r24, r25
    141e:	08 95       	ret

00001420 <_Z26Get_Back_LinetrackerY_Datav>:
    1420:	4f 92       	push	r4
    1422:	5f 92       	push	r5
    1424:	6f 92       	push	r6
    1426:	7f 92       	push	r7
    1428:	af 92       	push	r10
    142a:	bf 92       	push	r11
    142c:	cf 92       	push	r12
    142e:	df 92       	push	r13
    1430:	ef 92       	push	r14
    1432:	ff 92       	push	r15
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	0f 2e       	mov	r0, r31
    143e:	f7 e5       	ldi	r31, 0x57	; 87
    1440:	ef 2e       	mov	r14, r31
    1442:	f2 e0       	ldi	r31, 0x02	; 2
    1444:	ff 2e       	mov	r15, r31
    1446:	f0 2d       	mov	r31, r0
    1448:	0a e7       	ldi	r16, 0x7A	; 122
    144a:	13 e0       	ldi	r17, 0x03	; 3
    144c:	c0 e0       	ldi	r28, 0x00	; 0
    144e:	d0 e0       	ldi	r29, 0x00	; 0
    1450:	cc 24       	eor	r12, r12
    1452:	c3 94       	inc	r12
    1454:	d1 2c       	mov	r13, r1
    1456:	86 b1       	in	r24, 0x06	; 6
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0c 2e       	mov	r0, r28
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <_Z26Get_Back_LinetrackerY_Datav+0x42>
    145e:	95 95       	asr	r25
    1460:	87 95       	ror	r24
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <_Z26Get_Back_LinetrackerY_Datav+0x3e>
    1466:	80 ff       	sbrs	r24, 0
    1468:	10 c0       	rjmp	.+32     	; 0x148a <_Z26Get_Back_LinetrackerY_Datav+0x6a>
    146a:	f8 01       	movw	r30, r16
    146c:	d1 82       	std	Z+1, r13	; 0x01
    146e:	c0 82       	st	Z, r12
    1470:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <_ZL9linestate>
    1474:	c6 01       	movw	r24, r12
    1476:	0c 2e       	mov	r0, r28
    1478:	02 c0       	rjmp	.+4      	; 0x147e <_Z26Get_Back_LinetrackerY_Datav+0x5e>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <_Z26Get_Back_LinetrackerY_Datav+0x5a>
    1482:	82 2b       	or	r24, r18
    1484:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <_ZL9linestate>
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <_Z26Get_Back_LinetrackerY_Datav+0x70>
    148a:	f8 01       	movw	r30, r16
    148c:	11 82       	std	Z+1, r1	; 0x01
    148e:	10 82       	st	Z, r1
    1490:	f7 01       	movw	r30, r14
    1492:	81 91       	ld	r24, Z+
    1494:	91 91       	ld	r25, Z+
    1496:	7f 01       	movw	r14, r30
    1498:	f8 01       	movw	r30, r16
    149a:	a1 90       	ld	r10, Z+
    149c:	b1 90       	ld	r11, Z+
    149e:	8f 01       	movw	r16, r30
    14a0:	8a 9d       	mul	r24, r10
    14a2:	b0 01       	movw	r22, r0
    14a4:	8b 9d       	mul	r24, r11
    14a6:	70 0d       	add	r23, r0
    14a8:	9a 9d       	mul	r25, r10
    14aa:	70 0d       	add	r23, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	07 2e       	mov	r0, r23
    14b0:	00 0c       	add	r0, r0
    14b2:	88 0b       	sbc	r24, r24
    14b4:	99 0b       	sbc	r25, r25
    14b6:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    14ba:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <_ZL8totalSum>
    14be:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <_ZL8totalSum+0x1>
    14c2:	40 91 90 03 	lds	r20, 0x0390	; 0x800390 <_ZL8totalSum+0x2>
    14c6:	50 91 91 03 	lds	r21, 0x0391	; 0x800391 <_ZL8totalSum+0x3>
    14ca:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    14ce:	2b 01       	movw	r4, r22
    14d0:	3c 01       	movw	r6, r24
    14d2:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <_ZL8totalSum>
    14d6:	70 93 8f 03 	sts	0x038F, r23	; 0x80038f <_ZL8totalSum+0x1>
    14da:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <_ZL8totalSum+0x2>
    14de:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <_ZL8totalSum+0x3>
    14e2:	b5 01       	movw	r22, r10
    14e4:	bb 0c       	add	r11, r11
    14e6:	88 0b       	sbc	r24, r24
    14e8:	99 0b       	sbc	r25, r25
    14ea:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    14ee:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <_ZL9totalLine>
    14f2:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <_ZL9totalLine+0x1>
    14f6:	40 91 8c 03 	lds	r20, 0x038C	; 0x80038c <_ZL9totalLine+0x2>
    14fa:	50 91 8d 03 	lds	r21, 0x038D	; 0x80038d <_ZL9totalLine+0x3>
    14fe:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1502:	60 93 8a 03 	sts	0x038A, r22	; 0x80038a <_ZL9totalLine>
    1506:	70 93 8b 03 	sts	0x038B, r23	; 0x80038b <_ZL9totalLine+0x1>
    150a:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <_ZL9totalLine+0x2>
    150e:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <_ZL9totalLine+0x3>
    1512:	21 96       	adiw	r28, 0x01	; 1
    1514:	c8 30       	cpi	r28, 0x08	; 8
    1516:	d1 05       	cpc	r29, r1
    1518:	09 f0       	breq	.+2      	; 0x151c <_Z26Get_Back_LinetrackerY_Datav+0xfc>
    151a:	9d cf       	rjmp	.-198    	; 0x1456 <_Z26Get_Back_LinetrackerY_Datav+0x36>
    151c:	9b 01       	movw	r18, r22
    151e:	ac 01       	movw	r20, r24
    1520:	c3 01       	movw	r24, r6
    1522:	b2 01       	movw	r22, r4
    1524:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <__divsf3>
    1528:	0e 94 67 20 	call	0x40ce	; 0x40ce <__fixunssfsi>
    152c:	60 93 92 03 	sts	0x0392, r22	; 0x800392 <_ZL16linetracker_data>
    1530:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <_ZL8totalSum>
    1534:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <_ZL8totalSum+0x1>
    1538:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <_ZL8totalSum+0x2>
    153c:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZL8totalSum+0x3>
    1540:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <_ZL9totalLine>
    1544:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <_ZL9totalLine+0x1>
    1548:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <_ZL9totalLine+0x2>
    154c:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <_ZL9totalLine+0x3>
    1550:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_previous_data_of_back_linetracker>
    1554:	8a 30       	cpi	r24, 0x0A	; 10
    1556:	29 f4       	brne	.+10     	; 0x1562 <_Z26Get_Back_LinetrackerY_Datav+0x142>
    1558:	6a 30       	cpi	r22, 0x0A	; 10
    155a:	81 f5       	brne	.+96     	; 0x15bc <_Z26Get_Back_LinetrackerY_Datav+0x19c>
    155c:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <_back_linetracker_left_edge_left>
    1560:	2d c0       	rjmp	.+90     	; 0x15bc <_Z26Get_Back_LinetrackerY_Datav+0x19c>
    1562:	80 35       	cpi	r24, 0x50	; 80
    1564:	f1 f4       	brne	.+60     	; 0x15a2 <_Z26Get_Back_LinetrackerY_Datav+0x182>
    1566:	60 35       	cpi	r22, 0x50	; 80
    1568:	81 f4       	brne	.+32     	; 0x158a <_Z26Get_Back_LinetrackerY_Datav+0x16a>
    156a:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <_back_linetracker_right_edge_left>
    156e:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_back_linetracker_left_edge_left>
    1572:	88 23       	and	r24, r24
    1574:	f1 f0       	breq	.+60     	; 0x15b2 <_Z26Get_Back_LinetrackerY_Datav+0x192>
    1576:	1f c0       	rjmp	.+62     	; 0x15b6 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    1578:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <_ZL16linetracker_data>
    157c:	8a e0       	ldi	r24, 0x0A	; 10
    157e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <_back_linetracker_left_edge_left>
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    158a:	61 11       	cpse	r22, r1
    158c:	0a c0       	rjmp	.+20     	; 0x15a2 <_Z26Get_Back_LinetrackerY_Datav+0x182>
    158e:	8a e5       	ldi	r24, 0x5A	; 90
    1590:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <_ZL16linetracker_data>
    1594:	80 e5       	ldi	r24, 0x50	; 80
    1596:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <_back_linetracker_right_edge_left>
    15a0:	0a c0       	rjmp	.+20     	; 0x15b6 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    15a2:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_back_linetracker_left_edge_left>
    15a6:	81 11       	cpse	r24, r1
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    15aa:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <_back_linetracker_right_edge_left>
    15ae:	81 11       	cpse	r24, r1
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    15b2:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <_previous_data_of_back_linetracker>
    15b6:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <_ZL16linetracker_data>
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <_Z26Get_Back_LinetrackerY_Datav+0x1a2>
    15bc:	61 11       	cpse	r22, r1
    15be:	f1 cf       	rjmp	.-30     	; 0x15a2 <_Z26Get_Back_LinetrackerY_Datav+0x182>
    15c0:	db cf       	rjmp	.-74     	; 0x1578 <_Z26Get_Back_LinetrackerY_Datav+0x158>
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
    15d4:	af 90       	pop	r10
    15d6:	7f 90       	pop	r7
    15d8:	6f 90       	pop	r6
    15da:	5f 90       	pop	r5
    15dc:	4f 90       	pop	r4
    15de:	08 95       	ret

000015e0 <_Z32Calculate_Front_LinetrackerY_Pidv>:
    15e0:	4f 92       	push	r4
    15e2:	5f 92       	push	r5
    15e4:	6f 92       	push	r6
    15e6:	7f 92       	push	r7
    15e8:	8f 92       	push	r8
    15ea:	9f 92       	push	r9
    15ec:	af 92       	push	r10
    15ee:	bf 92       	push	r11
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <FrontLinetrackerY_+0x10>
    1600:	88 23       	and	r24, r24
    1602:	59 f0       	breq	.+22     	; 0x161a <_Z32Calculate_Front_LinetrackerY_Pidv+0x3a>
    1604:	c6 de       	rcall	.-628    	; 0x1392 <_Z27Get_Front_LinetrackerY_Datav>
    1606:	88 23       	and	r24, r24
    1608:	41 f0       	breq	.+16     	; 0x161a <_Z32Calculate_Front_LinetrackerY_Pidv+0x3a>
    160a:	c3 de       	rcall	.-634    	; 0x1392 <_Z27Get_Front_LinetrackerY_Datav>
    160c:	e0 eb       	ldi	r30, 0xB0	; 176
    160e:	f2 e0       	ldi	r31, 0x02	; 2
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	95 83       	std	Z+5, r25	; 0x05
    1614:	84 83       	std	Z+4, r24	; 0x04
    1616:	10 8a       	std	Z+16, r1	; 0x10
    1618:	c5 c0       	rjmp	.+394    	; 0x17a4 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    161a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    161e:	88 23       	and	r24, r24
    1620:	09 f4       	brne	.+2      	; 0x1624 <_Z32Calculate_Front_LinetrackerY_Pidv+0x44>
    1622:	c0 c0       	rjmp	.+384    	; 0x17a4 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    1624:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1628:	88 23       	and	r24, r24
    162a:	09 f4       	brne	.+2      	; 0x162e <_Z32Calculate_Front_LinetrackerY_Pidv+0x4e>
    162c:	bf c0       	rjmp	.+382    	; 0x17ac <_Z32Calculate_Front_LinetrackerY_Pidv+0x1cc>
    162e:	b1 de       	rcall	.-670    	; 0x1392 <_Z27Get_Front_LinetrackerY_Datav>
    1630:	e8 2e       	mov	r14, r24
    1632:	f1 2c       	mov	r15, r1
    1634:	c0 eb       	ldi	r28, 0xB0	; 176
    1636:	d2 e0       	ldi	r29, 0x02	; 2
    1638:	f9 82       	std	Y+1, r15	; 0x01
    163a:	e8 82       	st	Y, r14
    163c:	0e 85       	ldd	r16, Y+14	; 0x0e
    163e:	1f 85       	ldd	r17, Y+15	; 0x0f
    1640:	0e 19       	sub	r16, r14
    1642:	1f 09       	sbc	r17, r15
    1644:	1b 83       	std	Y+3, r17	; 0x03
    1646:	0a 83       	std	Y+2, r16	; 0x02
    1648:	b8 01       	movw	r22, r16
    164a:	01 2e       	mov	r0, r17
    164c:	00 0c       	add	r0, r0
    164e:	88 0b       	sbc	r24, r24
    1650:	99 0b       	sbc	r25, r25
    1652:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    1656:	4b 01       	movw	r8, r22
    1658:	5c 01       	movw	r10, r24
    165a:	29 8d       	ldd	r18, Y+25	; 0x19
    165c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    165e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1660:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1662:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1666:	2a 85       	ldd	r18, Y+10	; 0x0a
    1668:	3b 85       	ldd	r19, Y+11	; 0x0b
    166a:	4c 85       	ldd	r20, Y+12	; 0x0c
    166c:	5d 85       	ldd	r21, Y+13	; 0x0d
    166e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1672:	2b 01       	movw	r4, r22
    1674:	3c 01       	movw	r6, r24
    1676:	6a 87       	std	Y+10, r22	; 0x0a
    1678:	7b 87       	std	Y+11, r23	; 0x0b
    167a:	8c 87       	std	Y+12, r24	; 0x0c
    167c:	9d 87       	std	Y+13, r25	; 0x0d
    167e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1682:	9b 01       	movw	r18, r22
    1684:	77 23       	and	r23, r23
    1686:	24 f4       	brge	.+8      	; 0x1690 <_Z32Calculate_Front_LinetrackerY_Pidv+0xb0>
    1688:	22 27       	eor	r18, r18
    168a:	33 27       	eor	r19, r19
    168c:	26 1b       	sub	r18, r22
    168e:	37 0b       	sbc	r19, r23
    1690:	26 30       	cpi	r18, 0x06	; 6
    1692:	31 05       	cpc	r19, r1
    1694:	5c f1       	brlt	.+86     	; 0x16ec <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	a9 01       	movw	r20, r18
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	0e 94 a3 21 	call	0x4346	; 0x4346 <__gesf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	6c f4       	brge	.+26     	; 0x16c2 <_Z32Calculate_Front_LinetrackerY_Pidv+0xe2>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a0 ea       	ldi	r26, 0xA0	; 160
    16ae:	b0 e4       	ldi	r27, 0x40	; 64
    16b0:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <FrontLinetrackerY_+0xa>
    16b4:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <FrontLinetrackerY_+0xb>
    16b8:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <FrontLinetrackerY_+0xc>
    16bc:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <FrontLinetrackerY_+0xd>
    16c0:	15 c0       	rjmp	.+42     	; 0x16ec <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	a9 01       	movw	r20, r18
    16c8:	c3 01       	movw	r24, r6
    16ca:	b2 01       	movw	r22, r4
    16cc:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__cmpsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	64 f4       	brge	.+24     	; 0x16ec <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 ea       	ldi	r26, 0xA0	; 160
    16da:	b0 ec       	ldi	r27, 0xC0	; 192
    16dc:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <FrontLinetrackerY_+0xa>
    16e0:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <FrontLinetrackerY_+0xb>
    16e4:	a0 93 bc 02 	sts	0x02BC, r26	; 0x8002bc <FrontLinetrackerY_+0xc>
    16e8:	b0 93 bd 02 	sts	0x02BD, r27	; 0x8002bd <FrontLinetrackerY_+0xd>
    16ec:	01 2b       	or	r16, r17
    16ee:	49 f4       	brne	.+18     	; 0x1702 <_Z32Calculate_Front_LinetrackerY_Pidv+0x122>
    16f0:	e0 eb       	ldi	r30, 0xB0	; 176
    16f2:	f2 e0       	ldi	r31, 0x02	; 2
    16f4:	12 86       	std	Z+10, r1	; 0x0a
    16f6:	13 86       	std	Z+11, r1	; 0x0b
    16f8:	14 86       	std	Z+12, r1	; 0x0c
    16fa:	15 86       	std	Z+13, r1	; 0x0d
    16fc:	17 82       	std	Z+7, r1	; 0x07
    16fe:	16 82       	std	Z+6, r1	; 0x06
    1700:	2d c0       	rjmp	.+90     	; 0x175c <_Z32Calculate_Front_LinetrackerY_Pidv+0x17c>
    1702:	c0 eb       	ldi	r28, 0xB0	; 176
    1704:	d2 e0       	ldi	r29, 0x02	; 2
    1706:	2d 89       	ldd	r18, Y+21	; 0x15
    1708:	3e 89       	ldd	r19, Y+22	; 0x16
    170a:	4f 89       	ldd	r20, Y+23	; 0x17
    170c:	58 8d       	ldd	r21, Y+24	; 0x18
    170e:	c5 01       	movw	r24, r10
    1710:	b4 01       	movw	r22, r8
    1712:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1716:	2a 85       	ldd	r18, Y+10	; 0x0a
    1718:	3b 85       	ldd	r19, Y+11	; 0x0b
    171a:	4c 85       	ldd	r20, Y+12	; 0x0c
    171c:	5d 85       	ldd	r21, Y+13	; 0x0d
    171e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1722:	4b 01       	movw	r8, r22
    1724:	5c 01       	movw	r10, r24
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	b7 01       	movw	r22, r14
    172c:	68 1b       	sub	r22, r24
    172e:	79 0b       	sbc	r23, r25
    1730:	07 2e       	mov	r0, r23
    1732:	00 0c       	add	r0, r0
    1734:	88 0b       	sbc	r24, r24
    1736:	99 0b       	sbc	r25, r25
    1738:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    173c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    173e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1740:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1742:	58 a1       	ldd	r21, Y+32	; 0x20
    1744:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1748:	9b 01       	movw	r18, r22
    174a:	ac 01       	movw	r20, r24
    174c:	c5 01       	movw	r24, r10
    174e:	b4 01       	movw	r22, r8
    1750:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
    1754:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1758:	7f 83       	std	Y+7, r23	; 0x07
    175a:	6e 83       	std	Y+6, r22	; 0x06
    175c:	e0 eb       	ldi	r30, 0xB0	; 176
    175e:	f2 e0       	ldi	r31, 0x02	; 2
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	95 83       	std	Z+5, r25	; 0x05
    1766:	84 83       	std	Z+4, r24	; 0x04
    1768:	86 81       	ldd	r24, Z+6	; 0x06
    176a:	97 81       	ldd	r25, Z+7	; 0x07
    176c:	9c 01       	movw	r18, r24
    176e:	99 23       	and	r25, r25
    1770:	24 f4       	brge	.+8      	; 0x177a <_Z32Calculate_Front_LinetrackerY_Pidv+0x19a>
    1772:	22 27       	eor	r18, r18
    1774:	33 27       	eor	r19, r19
    1776:	28 1b       	sub	r18, r24
    1778:	39 0b       	sbc	r19, r25
    177a:	21 35       	cpi	r18, 0x51	; 81
    177c:	31 05       	cpc	r19, r1
    177e:	84 f0       	brlt	.+32     	; 0x17a0 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    1780:	18 16       	cp	r1, r24
    1782:	19 06       	cpc	r1, r25
    1784:	3c f4       	brge	.+14     	; 0x1794 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1b4>
    1786:	80 e5       	ldi	r24, 0x50	; 80
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <FrontLinetrackerY_+0x7>
    178e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <FrontLinetrackerY_+0x6>
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    1794:	80 eb       	ldi	r24, 0xB0	; 176
    1796:	9f ef       	ldi	r25, 0xFF	; 255
    1798:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <FrontLinetrackerY_+0x7>
    179c:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <FrontLinetrackerY_+0x6>
    17a0:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <PidUpdateFlagLinetrackerFront>
    17a4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    17a8:	81 11       	cpse	r24, r1
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    17ac:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <FrontLinetrackerY_+0x7>
    17b0:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <FrontLinetrackerY_+0x6>
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	bf 90       	pop	r11
    17c2:	af 90       	pop	r10
    17c4:	9f 90       	pop	r9
    17c6:	8f 90       	pop	r8
    17c8:	7f 90       	pop	r7
    17ca:	6f 90       	pop	r6
    17cc:	5f 90       	pop	r5
    17ce:	4f 90       	pop	r4
    17d0:	08 95       	ret

000017d2 <_Z31Calculate_Back_LinetrackerY_Pidv>:
    17d2:	4f 92       	push	r4
    17d4:	5f 92       	push	r5
    17d6:	6f 92       	push	r6
    17d8:	7f 92       	push	r7
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <BackLinetrackerY_+0x10>
    17f2:	88 23       	and	r24, r24
    17f4:	51 f0       	breq	.+20     	; 0x180a <_Z31Calculate_Back_LinetrackerY_Pidv+0x38>
    17f6:	14 de       	rcall	.-984    	; 0x1420 <_Z26Get_Back_LinetrackerY_Datav>
    17f8:	88 23       	and	r24, r24
    17fa:	39 f0       	breq	.+14     	; 0x180a <_Z31Calculate_Back_LinetrackerY_Pidv+0x38>
    17fc:	11 de       	rcall	.-990    	; 0x1420 <_Z26Get_Back_LinetrackerY_Datav>
    17fe:	ef e8       	ldi	r30, 0x8F	; 143
    1800:	f2 e0       	ldi	r31, 0x02	; 2
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	95 83       	std	Z+5, r25	; 0x05
    1806:	84 83       	std	Z+4, r24	; 0x04
    1808:	10 8a       	std	Z+16, r1	; 0x10
    180a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    180e:	88 23       	and	r24, r24
    1810:	09 f4       	brne	.+2      	; 0x1814 <_Z31Calculate_Back_LinetrackerY_Pidv+0x42>
    1812:	c0 c0       	rjmp	.+384    	; 0x1994 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1c2>
    1814:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1818:	88 23       	and	r24, r24
    181a:	09 f4       	brne	.+2      	; 0x181e <_Z31Calculate_Back_LinetrackerY_Pidv+0x4c>
    181c:	bf c0       	rjmp	.+382    	; 0x199c <_Z31Calculate_Back_LinetrackerY_Pidv+0x1ca>
    181e:	00 de       	rcall	.-1024   	; 0x1420 <_Z26Get_Back_LinetrackerY_Datav>
    1820:	e8 2e       	mov	r14, r24
    1822:	f1 2c       	mov	r15, r1
    1824:	cf e8       	ldi	r28, 0x8F	; 143
    1826:	d2 e0       	ldi	r29, 0x02	; 2
    1828:	f9 82       	std	Y+1, r15	; 0x01
    182a:	e8 82       	st	Y, r14
    182c:	0e 85       	ldd	r16, Y+14	; 0x0e
    182e:	1f 85       	ldd	r17, Y+15	; 0x0f
    1830:	0e 19       	sub	r16, r14
    1832:	1f 09       	sbc	r17, r15
    1834:	1b 83       	std	Y+3, r17	; 0x03
    1836:	0a 83       	std	Y+2, r16	; 0x02
    1838:	b8 01       	movw	r22, r16
    183a:	01 2e       	mov	r0, r17
    183c:	00 0c       	add	r0, r0
    183e:	88 0b       	sbc	r24, r24
    1840:	99 0b       	sbc	r25, r25
    1842:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    1846:	4b 01       	movw	r8, r22
    1848:	5c 01       	movw	r10, r24
    184a:	29 8d       	ldd	r18, Y+25	; 0x19
    184c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    184e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1850:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1852:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1856:	2a 85       	ldd	r18, Y+10	; 0x0a
    1858:	3b 85       	ldd	r19, Y+11	; 0x0b
    185a:	4c 85       	ldd	r20, Y+12	; 0x0c
    185c:	5d 85       	ldd	r21, Y+13	; 0x0d
    185e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1862:	2b 01       	movw	r4, r22
    1864:	3c 01       	movw	r6, r24
    1866:	6a 87       	std	Y+10, r22	; 0x0a
    1868:	7b 87       	std	Y+11, r23	; 0x0b
    186a:	8c 87       	std	Y+12, r24	; 0x0c
    186c:	9d 87       	std	Y+13, r25	; 0x0d
    186e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1872:	9b 01       	movw	r18, r22
    1874:	77 23       	and	r23, r23
    1876:	24 f4       	brge	.+8      	; 0x1880 <_Z31Calculate_Back_LinetrackerY_Pidv+0xae>
    1878:	22 27       	eor	r18, r18
    187a:	33 27       	eor	r19, r19
    187c:	26 1b       	sub	r18, r22
    187e:	37 0b       	sbc	r19, r23
    1880:	26 30       	cpi	r18, 0x06	; 6
    1882:	31 05       	cpc	r19, r1
    1884:	5c f1       	brlt	.+86     	; 0x18dc <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	a9 01       	movw	r20, r18
    188c:	c3 01       	movw	r24, r6
    188e:	b2 01       	movw	r22, r4
    1890:	0e 94 a3 21 	call	0x4346	; 0x4346 <__gesf2>
    1894:	18 16       	cp	r1, r24
    1896:	6c f4       	brge	.+26     	; 0x18b2 <_Z31Calculate_Back_LinetrackerY_Pidv+0xe0>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 ea       	ldi	r26, 0xA0	; 160
    189e:	b0 e4       	ldi	r27, 0x40	; 64
    18a0:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <BackLinetrackerY_+0xa>
    18a4:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <BackLinetrackerY_+0xb>
    18a8:	a0 93 9b 02 	sts	0x029B, r26	; 0x80029b <BackLinetrackerY_+0xc>
    18ac:	b0 93 9c 02 	sts	0x029C, r27	; 0x80029c <BackLinetrackerY_+0xd>
    18b0:	15 c0       	rjmp	.+42     	; 0x18dc <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	a9 01       	movw	r20, r18
    18b8:	c3 01       	movw	r24, r6
    18ba:	b2 01       	movw	r22, r4
    18bc:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__cmpsf2>
    18c0:	88 23       	and	r24, r24
    18c2:	64 f4       	brge	.+24     	; 0x18dc <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 ea       	ldi	r26, 0xA0	; 160
    18ca:	b0 ec       	ldi	r27, 0xC0	; 192
    18cc:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <BackLinetrackerY_+0xa>
    18d0:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <BackLinetrackerY_+0xb>
    18d4:	a0 93 9b 02 	sts	0x029B, r26	; 0x80029b <BackLinetrackerY_+0xc>
    18d8:	b0 93 9c 02 	sts	0x029C, r27	; 0x80029c <BackLinetrackerY_+0xd>
    18dc:	01 2b       	or	r16, r17
    18de:	49 f4       	brne	.+18     	; 0x18f2 <_Z31Calculate_Back_LinetrackerY_Pidv+0x120>
    18e0:	ef e8       	ldi	r30, 0x8F	; 143
    18e2:	f2 e0       	ldi	r31, 0x02	; 2
    18e4:	12 86       	std	Z+10, r1	; 0x0a
    18e6:	13 86       	std	Z+11, r1	; 0x0b
    18e8:	14 86       	std	Z+12, r1	; 0x0c
    18ea:	15 86       	std	Z+13, r1	; 0x0d
    18ec:	17 82       	std	Z+7, r1	; 0x07
    18ee:	16 82       	std	Z+6, r1	; 0x06
    18f0:	2d c0       	rjmp	.+90     	; 0x194c <_Z31Calculate_Back_LinetrackerY_Pidv+0x17a>
    18f2:	cf e8       	ldi	r28, 0x8F	; 143
    18f4:	d2 e0       	ldi	r29, 0x02	; 2
    18f6:	2d 89       	ldd	r18, Y+21	; 0x15
    18f8:	3e 89       	ldd	r19, Y+22	; 0x16
    18fa:	4f 89       	ldd	r20, Y+23	; 0x17
    18fc:	58 8d       	ldd	r21, Y+24	; 0x18
    18fe:	c5 01       	movw	r24, r10
    1900:	b4 01       	movw	r22, r8
    1902:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1906:	2a 85       	ldd	r18, Y+10	; 0x0a
    1908:	3b 85       	ldd	r19, Y+11	; 0x0b
    190a:	4c 85       	ldd	r20, Y+12	; 0x0c
    190c:	5d 85       	ldd	r21, Y+13	; 0x0d
    190e:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1912:	4b 01       	movw	r8, r22
    1914:	5c 01       	movw	r10, r24
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	b7 01       	movw	r22, r14
    191c:	68 1b       	sub	r22, r24
    191e:	79 0b       	sbc	r23, r25
    1920:	07 2e       	mov	r0, r23
    1922:	00 0c       	add	r0, r0
    1924:	88 0b       	sbc	r24, r24
    1926:	99 0b       	sbc	r25, r25
    1928:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    192c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    192e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1930:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1932:	58 a1       	ldd	r21, Y+32	; 0x20
    1934:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1938:	9b 01       	movw	r18, r22
    193a:	ac 01       	movw	r20, r24
    193c:	c5 01       	movw	r24, r10
    193e:	b4 01       	movw	r22, r8
    1940:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
    1944:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1948:	7f 83       	std	Y+7, r23	; 0x07
    194a:	6e 83       	std	Y+6, r22	; 0x06
    194c:	ef e8       	ldi	r30, 0x8F	; 143
    194e:	f2 e0       	ldi	r31, 0x02	; 2
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	95 83       	std	Z+5, r25	; 0x05
    1956:	84 83       	std	Z+4, r24	; 0x04
    1958:	86 81       	ldd	r24, Z+6	; 0x06
    195a:	97 81       	ldd	r25, Z+7	; 0x07
    195c:	9c 01       	movw	r18, r24
    195e:	99 23       	and	r25, r25
    1960:	24 f4       	brge	.+8      	; 0x196a <_Z31Calculate_Back_LinetrackerY_Pidv+0x198>
    1962:	22 27       	eor	r18, r18
    1964:	33 27       	eor	r19, r19
    1966:	28 1b       	sub	r18, r24
    1968:	39 0b       	sbc	r19, r25
    196a:	21 35       	cpi	r18, 0x51	; 81
    196c:	31 05       	cpc	r19, r1
    196e:	84 f0       	brlt	.+32     	; 0x1990 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1be>
    1970:	18 16       	cp	r1, r24
    1972:	19 06       	cpc	r1, r25
    1974:	3c f4       	brge	.+14     	; 0x1984 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1b2>
    1976:	80 e5       	ldi	r24, 0x50	; 80
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <BackLinetrackerY_+0x7>
    197e:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <BackLinetrackerY_+0x6>
    1982:	06 c0       	rjmp	.+12     	; 0x1990 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1be>
    1984:	80 eb       	ldi	r24, 0xB0	; 176
    1986:	9f ef       	ldi	r25, 0xFF	; 255
    1988:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <BackLinetrackerY_+0x7>
    198c:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <BackLinetrackerY_+0x6>
    1990:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1994:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1998:	81 11       	cpse	r24, r1
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d2>
    199c:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <BackLinetrackerY_+0x7>
    19a0:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <BackLinetrackerY_+0x6>
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	bf 90       	pop	r11
    19b2:	af 90       	pop	r10
    19b4:	9f 90       	pop	r9
    19b6:	8f 90       	pop	r8
    19b8:	7f 90       	pop	r7
    19ba:	6f 90       	pop	r6
    19bc:	5f 90       	pop	r5
    19be:	4f 90       	pop	r4
    19c0:	08 95       	ret

000019c2 <_Z18Calculate_Velocityv>:
    19c2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_axis>
    19c6:	81 11       	cpse	r24, r1
    19c8:	08 c0       	rjmp	.+16     	; 0x19da <_Z18Calculate_Velocityv+0x18>
    19ca:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	71 f0       	breq	.+28     	; 0x19ee <_Z18Calculate_Velocityv+0x2c>
    19d2:	83 30       	cpi	r24, 0x03	; 3
    19d4:	71 f4       	brne	.+28     	; 0x19f2 <_Z18Calculate_Velocityv+0x30>
    19d6:	a1 e0       	ldi	r26, 0x01	; 1
    19d8:	13 c0       	rjmp	.+38     	; 0x1a00 <_Z18Calculate_Velocityv+0x3e>
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	61 f4       	brne	.+24     	; 0x19f6 <_Z18Calculate_Velocityv+0x34>
    19de:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    19e2:	82 30       	cpi	r24, 0x02	; 2
    19e4:	51 f0       	breq	.+20     	; 0x19fa <_Z18Calculate_Velocityv+0x38>
    19e6:	83 30       	cpi	r24, 0x03	; 3
    19e8:	51 f4       	brne	.+20     	; 0x19fe <_Z18Calculate_Velocityv+0x3c>
    19ea:	a3 e0       	ldi	r26, 0x03	; 3
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <_Z18Calculate_Velocityv+0x3e>
    19ee:	a0 e0       	ldi	r26, 0x00	; 0
    19f0:	07 c0       	rjmp	.+14     	; 0x1a00 <_Z18Calculate_Velocityv+0x3e>
    19f2:	a4 e0       	ldi	r26, 0x04	; 4
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <_Z18Calculate_Velocityv+0x3e>
    19f6:	a4 e0       	ldi	r26, 0x04	; 4
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <_Z18Calculate_Velocityv+0x3e>
    19fa:	a2 e0       	ldi	r26, 0x02	; 2
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <_Z18Calculate_Velocityv+0x3e>
    19fe:	a4 e0       	ldi	r26, 0x04	; 4
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	aa 0f       	add	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	aa 0f       	add	r26, r26
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	a3 5f       	subi	r26, 0xF3	; 243
    1a0c:	bd 4f       	sbci	r27, 0xFD	; 253
    1a0e:	e5 ea       	ldi	r30, 0xA5	; 165
    1a10:	f3 e0       	ldi	r31, 0x03	; 3
    1a12:	6d ea       	ldi	r22, 0xAD	; 173
    1a14:	73 e0       	ldi	r23, 0x03	; 3
    1a16:	4d 91       	ld	r20, X+
    1a18:	20 81       	ld	r18, Z
    1a1a:	31 81       	ldd	r19, Z+1	; 0x01
    1a1c:	42 03       	mulsu	r20, r18
    1a1e:	c0 01       	movw	r24, r0
    1a20:	43 9f       	mul	r20, r19
    1a22:	90 0d       	add	r25, r0
    1a24:	11 24       	eor	r1, r1
    1a26:	81 93       	st	Z+, r24
    1a28:	91 93       	st	Z+, r25
    1a2a:	e6 17       	cp	r30, r22
    1a2c:	f7 07       	cpc	r31, r23
    1a2e:	99 f7       	brne	.-26     	; 0x1a16 <_Z18Calculate_Velocityv+0x54>
    1a30:	08 95       	ret

00001a32 <_Z15Move_Xaxis_Slowjhh>:
    1a32:	8f 92       	push	r8
    1a34:	9f 92       	push	r9
    1a36:	af 92       	push	r10
    1a38:	bf 92       	push	r11
    1a3a:	cf 92       	push	r12
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	d6 2f       	mov	r29, r22
    1a48:	c4 2f       	mov	r28, r20
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
    1a50:	80 e7       	ldi	r24, 0x70	; 112
    1a52:	92 e0       	ldi	r25, 0x02	; 2
    1a54:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1a58:	6b 01       	movw	r12, r22
    1a5a:	7c 01       	movw	r14, r24
    1a5c:	6c 2f       	mov	r22, r28
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    1a68:	4b 01       	movw	r8, r22
    1a6a:	5c 01       	movw	r10, r24
    1a6c:	c7 01       	movw	r24, r14
    1a6e:	b6 01       	movw	r22, r12
    1a70:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1a74:	9b 01       	movw	r18, r22
    1a76:	77 23       	and	r23, r23
    1a78:	24 f4       	brge	.+8      	; 0x1a82 <_Z15Move_Xaxis_Slowjhh+0x50>
    1a7a:	22 27       	eor	r18, r18
    1a7c:	33 27       	eor	r19, r19
    1a7e:	26 1b       	sub	r18, r22
    1a80:	37 0b       	sbc	r19, r23
    1a82:	b9 01       	movw	r22, r18
    1a84:	33 0f       	add	r19, r19
    1a86:	88 0b       	sbc	r24, r24
    1a88:	99 0b       	sbc	r25, r25
    1a8a:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    1a8e:	2c e4       	ldi	r18, 0x4C	; 76
    1a90:	37 e3       	ldi	r19, 0x37	; 55
    1a92:	49 e8       	ldi	r20, 0x89	; 137
    1a94:	5d e3       	ldi	r21, 0x3D	; 61
    1a96:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1a9a:	9b 01       	movw	r18, r22
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	c5 01       	movw	r24, r10
    1aa0:	b4 01       	movw	r22, r8
    1aa2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
    1aa6:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1aaa:	70 93 a0 03 	sts	0x03A0, r23	; 0x8003a0 <velocity_robot+0x1>
    1aae:	60 93 9f 03 	sts	0x039F, r22	; 0x80039f <velocity_robot>
    1ab2:	d2 30       	cpi	r29, 0x02	; 2
    1ab4:	51 f4       	brne	.+20     	; 0x1aca <_Z15Move_Xaxis_Slowjhh+0x98>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <movingxfront>
    1abc:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <movingxback>
    1ac0:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <movingyback>
    1ac4:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <movingyfront>
    1ac8:	19 c0       	rjmp	.+50     	; 0x1afc <_Z15Move_Xaxis_Slowjhh+0xca>
    1aca:	d3 30       	cpi	r29, 0x03	; 3
    1acc:	b9 f4       	brne	.+46     	; 0x1afc <_Z15Move_Xaxis_Slowjhh+0xca>
    1ace:	9b 01       	movw	r18, r22
    1ad0:	77 23       	and	r23, r23
    1ad2:	24 f4       	brge	.+8      	; 0x1adc <_Z15Move_Xaxis_Slowjhh+0xaa>
    1ad4:	22 27       	eor	r18, r18
    1ad6:	33 27       	eor	r19, r19
    1ad8:	26 1b       	sub	r18, r22
    1ada:	37 0b       	sbc	r19, r23
    1adc:	31 95       	neg	r19
    1ade:	21 95       	neg	r18
    1ae0:	31 09       	sbc	r19, r1
    1ae2:	30 93 a0 03 	sts	0x03A0, r19	; 0x8003a0 <velocity_robot+0x1>
    1ae6:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <velocity_robot>
    1aea:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <movingxfront>
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <movingxback>
    1af4:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <movingyfront>
    1af8:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <movingyback>
    1afc:	ef e9       	ldi	r30, 0x9F	; 159
    1afe:	f3 e0       	ldi	r31, 0x03	; 3
    1b00:	13 82       	std	Z+3, r1	; 0x03
    1b02:	12 82       	std	Z+2, r1	; 0x02
    1b04:	15 82       	std	Z+5, r1	; 0x05
    1b06:	14 82       	std	Z+4, r1	; 0x04
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	bf 90       	pop	r11
    1b16:	af 90       	pop	r10
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	08 95       	ret

00001b1e <_Z21Goto_Fence_And_Detectv>:
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <movingyfront>
    1b26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1b2a:	83 ff       	sbrs	r24, 3
    1b2c:	59 c0       	rjmp	.+178    	; 0x1be0 <_Z21Goto_Fence_And_Detectv+0xc2>
    1b2e:	63 9b       	sbis	0x0c, 3	; 12
    1b30:	5a c0       	rjmp	.+180    	; 0x1be6 <_Z21Goto_Fence_And_Detectv+0xc8>
    1b32:	56 c0       	rjmp	.+172    	; 0x1be0 <_Z21Goto_Fence_And_Detectv+0xc2>
    1b34:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1b38:	83 ff       	sbrs	r24, 3
    1b3a:	6f c0       	rjmp	.+222    	; 0x1c1a <_Z21Goto_Fence_And_Detectv+0xfc>
    1b3c:	88 c0       	rjmp	.+272    	; 0x1c4e <_Z21Goto_Fence_And_Detectv+0x130>
    1b3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1b42:	83 fd       	sbrc	r24, 3
    1b44:	87 c0       	rjmp	.+270    	; 0x1c54 <_Z21Goto_Fence_And_Detectv+0x136>
    1b46:	63 99       	sbic	0x0c, 3	; 12
    1b48:	49 c0       	rjmp	.+146    	; 0x1bdc <_Z21Goto_Fence_And_Detectv+0xbe>
    1b4a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1b4e:	83 ff       	sbrs	r24, 3
    1b50:	94 c0       	rjmp	.+296    	; 0x1c7a <_Z21Goto_Fence_And_Detectv+0x15c>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	99 c0       	rjmp	.+306    	; 0x1c88 <_Z21Goto_Fence_And_Detectv+0x16a>
    1b56:	e5 ea       	ldi	r30, 0xA5	; 165
    1b58:	f3 e0       	ldi	r31, 0x03	; 3
    1b5a:	11 82       	std	Z+1, r1	; 0x01
    1b5c:	10 82       	st	Z, r1
    1b5e:	13 82       	std	Z+3, r1	; 0x03
    1b60:	12 82       	std	Z+2, r1	; 0x02
    1b62:	15 82       	std	Z+5, r1	; 0x05
    1b64:	14 82       	std	Z+4, r1	; 0x04
    1b66:	17 82       	std	Z+7, r1	; 0x07
    1b68:	16 82       	std	Z+6, r1	; 0x06
    1b6a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <first_data_time_of_limit_switches_pressed>
    1b6e:	88 23       	and	r24, r24
    1b70:	61 f0       	breq	.+24     	; 0x1b8a <_Z21Goto_Fence_And_Detectv+0x6c>
    1b72:	0e 94 c6 01 	call	0x38c	; 0x38c <_Z6millisv>
    1b76:	60 93 b1 03 	sts	0x03B1, r22	; 0x8003b1 <time_of_limit_switches_pressed>
    1b7a:	70 93 b2 03 	sts	0x03B2, r23	; 0x8003b2 <time_of_limit_switches_pressed+0x1>
    1b7e:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <time_of_limit_switches_pressed+0x2>
    1b82:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <time_of_limit_switches_pressed+0x3>
    1b86:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <first_data_time_of_limit_switches_pressed>
    1b8a:	0e 94 c6 01 	call	0x38c	; 0x38c <_Z6millisv>
    1b8e:	00 91 b1 03 	lds	r16, 0x03B1	; 0x8003b1 <time_of_limit_switches_pressed>
    1b92:	10 91 b2 03 	lds	r17, 0x03B2	; 0x8003b2 <time_of_limit_switches_pressed+0x1>
    1b96:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <time_of_limit_switches_pressed+0x2>
    1b9a:	30 91 b4 03 	lds	r19, 0x03B4	; 0x8003b4 <time_of_limit_switches_pressed+0x3>
    1b9e:	ab 01       	movw	r20, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	40 1b       	sub	r20, r16
    1ba4:	51 0b       	sbc	r21, r17
    1ba6:	62 0b       	sbc	r22, r18
    1ba8:	73 0b       	sbc	r23, r19
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	49 3c       	cpi	r20, 0xC9	; 201
    1bae:	51 05       	cpc	r21, r1
    1bb0:	61 05       	cpc	r22, r1
    1bb2:	71 05       	cpc	r23, r1
    1bb4:	08 f0       	brcs	.+2      	; 0x1bb8 <_Z21Goto_Fence_And_Detectv+0x9a>
    1bb6:	68 c0       	rjmp	.+208    	; 0x1c88 <_Z21Goto_Fence_And_Detectv+0x16a>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	66 c0       	rjmp	.+204    	; 0x1c88 <_Z21Goto_Fence_And_Detectv+0x16a>
    1bbc:	e5 ea       	ldi	r30, 0xA5	; 165
    1bbe:	f3 e0       	ldi	r31, 0x03	; 3
    1bc0:	8f e0       	ldi	r24, 0x0F	; 15
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
    1bc8:	13 82       	std	Z+3, r1	; 0x03
    1bca:	12 82       	std	Z+2, r1	; 0x02
    1bcc:	15 82       	std	Z+5, r1	; 0x05
    1bce:	14 82       	std	Z+4, r1	; 0x04
    1bd0:	81 ef       	ldi	r24, 0xF1	; 241
    1bd2:	9f ef       	ldi	r25, 0xFF	; 255
    1bd4:	97 83       	std	Z+7, r25	; 0x07
    1bd6:	86 83       	std	Z+6, r24	; 0x06
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	56 c0       	rjmp	.+172    	; 0x1c88 <_Z21Goto_Fence_And_Detectv+0x16a>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	54 c0       	rjmp	.+168    	; 0x1c88 <_Z21Goto_Fence_And_Detectv+0x16a>
    1be0:	63 99       	sbic	0x0c, 3	; 12
    1be2:	a8 cf       	rjmp	.-176    	; 0x1b34 <_Z21Goto_Fence_And_Detectv+0x16>
    1be4:	34 c0       	rjmp	.+104    	; 0x1c4e <_Z21Goto_Fence_And_Detectv+0x130>
    1be6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
    1bea:	e5 ea       	ldi	r30, 0xA5	; 165
    1bec:	f3 e0       	ldi	r31, 0x03	; 3
    1bee:	8e e1       	ldi	r24, 0x1E	; 30
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
    1bf6:	93 83       	std	Z+3, r25	; 0x03
    1bf8:	82 83       	std	Z+2, r24	; 0x02
    1bfa:	15 82       	std	Z+5, r1	; 0x05
    1bfc:	14 82       	std	Z+4, r1	; 0x04
    1bfe:	17 82       	std	Z+7, r1	; 0x07
    1c00:	16 82       	std	Z+6, r1	; 0x06
    1c02:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <time_of_limit_switches_pressed>
    1c06:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <time_of_limit_switches_pressed+0x1>
    1c0a:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <time_of_limit_switches_pressed+0x2>
    1c0e:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <time_of_limit_switches_pressed+0x3>
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
    1c18:	96 cf       	rjmp	.-212    	; 0x1b46 <_Z21Goto_Fence_And_Detectv+0x28>
    1c1a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
    1c1e:	e5 ea       	ldi	r30, 0xA5	; 165
    1c20:	f3 e0       	ldi	r31, 0x03	; 3
    1c22:	11 82       	std	Z+1, r1	; 0x01
    1c24:	10 82       	st	Z, r1
    1c26:	13 82       	std	Z+3, r1	; 0x03
    1c28:	12 82       	std	Z+2, r1	; 0x02
    1c2a:	82 ee       	ldi	r24, 0xE2	; 226
    1c2c:	9f ef       	ldi	r25, 0xFF	; 255
    1c2e:	95 83       	std	Z+5, r25	; 0x05
    1c30:	84 83       	std	Z+4, r24	; 0x04
    1c32:	97 83       	std	Z+7, r25	; 0x07
    1c34:	86 83       	std	Z+6, r24	; 0x06
    1c36:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <time_of_limit_switches_pressed>
    1c3a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <time_of_limit_switches_pressed+0x1>
    1c3e:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <time_of_limit_switches_pressed+0x2>
    1c42:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <time_of_limit_switches_pressed+0x3>
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
    1c4c:	7c cf       	rjmp	.-264    	; 0x1b46 <_Z21Goto_Fence_And_Detectv+0x28>
    1c4e:	63 99       	sbic	0x0c, 3	; 12
    1c50:	76 cf       	rjmp	.-276    	; 0x1b3e <_Z21Goto_Fence_And_Detectv+0x20>
    1c52:	79 cf       	rjmp	.-270    	; 0x1b46 <_Z21Goto_Fence_And_Detectv+0x28>
    1c54:	11 e0       	ldi	r17, 0x01	; 1
    1c56:	10 93 21 02 	sts	0x0221, r17	; 0x800221 <inverseKinematicsTrue>
    1c5a:	4c e3       	ldi	r20, 0x3C	; 60
    1c5c:	63 e0       	ldi	r22, 0x03	; 3
    1c5e:	88 e5       	ldi	r24, 0x58	; 88
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	e7 de       	rcall	.-562    	; 0x1a32 <_Z15Move_Xaxis_Slowjhh>
    1c64:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <time_of_limit_switches_pressed>
    1c68:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <time_of_limit_switches_pressed+0x1>
    1c6c:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <time_of_limit_switches_pressed+0x2>
    1c70:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <time_of_limit_switches_pressed+0x3>
    1c74:	10 93 53 02 	sts	0x0253, r17	; 0x800253 <first_data_time_of_limit_switches_pressed>
    1c78:	66 cf       	rjmp	.-308    	; 0x1b46 <_Z21Goto_Fence_And_Detectv+0x28>
    1c7a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
    1c7e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <pressRobot>
    1c82:	81 11       	cpse	r24, r1
    1c84:	9b cf       	rjmp	.-202    	; 0x1bbc <_Z21Goto_Fence_And_Detectv+0x9e>
    1c86:	67 cf       	rjmp	.-306    	; 0x1b56 <_Z21Goto_Fence_And_Detectv+0x38>
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	08 95       	ret

00001c8e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>:
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	ec 01       	movw	r28, r24
    1c94:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
    1c98:	a3 dc       	rcall	.-1722   	; 0x15e0 <_Z32Calculate_Front_LinetrackerY_Pidv>
    1c9a:	9b dd       	rcall	.-1226   	; 0x17d2 <_Z31Calculate_Back_LinetrackerY_Pidv>
    1c9c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	f1 f4       	brne	.+60     	; 0x1ce0 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x52>
    1ca4:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <FrontLinetrackerY_+0x6>
    1ca8:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <FrontLinetrackerY_+0x7>
    1cac:	e5 ea       	ldi	r30, 0xA5	; 165
    1cae:	f3 e0       	ldi	r31, 0x03	; 3
    1cb0:	9c 01       	movw	r18, r24
    1cb2:	2c 0f       	add	r18, r28
    1cb4:	3d 1f       	adc	r19, r29
    1cb6:	31 83       	std	Z+1, r19	; 0x01
    1cb8:	20 83       	st	Z, r18
    1cba:	9e 01       	movw	r18, r28
    1cbc:	28 1b       	sub	r18, r24
    1cbe:	39 0b       	sbc	r19, r25
    1cc0:	33 83       	std	Z+3, r19	; 0x03
    1cc2:	22 83       	std	Z+2, r18	; 0x02
    1cc4:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <BackLinetrackerY_+0x6>
    1cc8:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <BackLinetrackerY_+0x7>
    1ccc:	9e 01       	movw	r18, r28
    1cce:	28 0f       	add	r18, r24
    1cd0:	39 1f       	adc	r19, r25
    1cd2:	35 83       	std	Z+5, r19	; 0x05
    1cd4:	24 83       	std	Z+4, r18	; 0x04
    1cd6:	c8 1b       	sub	r28, r24
    1cd8:	d9 0b       	sbc	r29, r25
    1cda:	d7 83       	std	Z+7, r29	; 0x07
    1cdc:	c6 83       	std	Z+6, r28	; 0x06
    1cde:	1c c0       	rjmp	.+56     	; 0x1d18 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x8a>
    1ce0:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <FrontLinetrackerY_+0x6>
    1ce4:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <FrontLinetrackerY_+0x7>
    1ce8:	e5 ea       	ldi	r30, 0xA5	; 165
    1cea:	f3 e0       	ldi	r31, 0x03	; 3
    1cec:	9e 01       	movw	r18, r28
    1cee:	28 1b       	sub	r18, r24
    1cf0:	39 0b       	sbc	r19, r25
    1cf2:	31 83       	std	Z+1, r19	; 0x01
    1cf4:	20 83       	st	Z, r18
    1cf6:	8c 0f       	add	r24, r28
    1cf8:	9d 1f       	adc	r25, r29
    1cfa:	93 83       	std	Z+3, r25	; 0x03
    1cfc:	82 83       	std	Z+2, r24	; 0x02
    1cfe:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <BackLinetrackerY_+0x6>
    1d02:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <BackLinetrackerY_+0x7>
    1d06:	9e 01       	movw	r18, r28
    1d08:	28 1b       	sub	r18, r24
    1d0a:	39 0b       	sbc	r19, r25
    1d0c:	35 83       	std	Z+5, r19	; 0x05
    1d0e:	24 83       	std	Z+4, r18	; 0x04
    1d10:	c8 0f       	add	r28, r24
    1d12:	d9 1f       	adc	r29, r25
    1d14:	d7 83       	std	Z+7, r29	; 0x07
    1d16:	c6 83       	std	Z+6, r28	; 0x06
    1d18:	54 de       	rcall	.-856    	; 0x19c2 <_Z18Calculate_Velocityv>
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	08 95       	ret

00001d20 <_Z10Move_Yaxisiij>:
    1d20:	2f 92       	push	r2
    1d22:	3f 92       	push	r3
    1d24:	4f 92       	push	r4
    1d26:	5f 92       	push	r5
    1d28:	6f 92       	push	r6
    1d2a:	7f 92       	push	r7
    1d2c:	8f 92       	push	r8
    1d2e:	9f 92       	push	r9
    1d30:	af 92       	push	r10
    1d32:	bf 92       	push	r11
    1d34:	cf 92       	push	r12
    1d36:	df 92       	push	r13
    1d38:	ef 92       	push	r14
    1d3a:	ff 92       	push	r15
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	1c 01       	movw	r2, r24
    1d46:	8b 01       	movw	r16, r22
    1d48:	7a 01       	movw	r14, r20
    1d4a:	e0 eb       	ldi	r30, 0xB0	; 176
    1d4c:	f2 e0       	ldi	r31, 0x02	; 2
    1d4e:	8a e9       	ldi	r24, 0x9A	; 154
    1d50:	99 e9       	ldi	r25, 0x99	; 153
    1d52:	a9 e9       	ldi	r26, 0x99	; 153
    1d54:	bf e3       	ldi	r27, 0x3F	; 63
    1d56:	85 8b       	std	Z+21, r24	; 0x15
    1d58:	96 8b       	std	Z+22, r25	; 0x16
    1d5a:	a7 8b       	std	Z+23, r26	; 0x17
    1d5c:	b0 8f       	std	Z+24, r27	; 0x18
    1d5e:	11 8e       	std	Z+25, r1	; 0x19
    1d60:	12 8e       	std	Z+26, r1	; 0x1a
    1d62:	13 8e       	std	Z+27, r1	; 0x1b
    1d64:	14 8e       	std	Z+28, r1	; 0x1c
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e8       	ldi	r26, 0x80	; 128
    1d6c:	b1 e4       	ldi	r27, 0x41	; 65
    1d6e:	85 8f       	std	Z+29, r24	; 0x1d
    1d70:	96 8f       	std	Z+30, r25	; 0x1e
    1d72:	a7 8f       	std	Z+31, r26	; 0x1f
    1d74:	b0 a3       	std	Z+32, r27	; 0x20
    1d76:	88 e6       	ldi	r24, 0x68	; 104
    1d78:	92 e0       	ldi	r25, 0x02	; 2
    1d7a:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1d7e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1d82:	9b 01       	movw	r18, r22
    1d84:	77 23       	and	r23, r23
    1d86:	24 f4       	brge	.+8      	; 0x1d90 <_Z10Move_Yaxisiij+0x70>
    1d88:	22 27       	eor	r18, r18
    1d8a:	33 27       	eor	r19, r19
    1d8c:	26 1b       	sub	r18, r22
    1d8e:	37 0b       	sbc	r19, r23
    1d90:	e9 01       	movw	r28, r18
    1d92:	30 93 9c 03 	sts	0x039C, r19	; 0x80039c <distanceY+0x1>
    1d96:	20 93 9b 03 	sts	0x039B, r18	; 0x80039b <distanceY>
    1d9a:	30 92 e4 02 	sts	0x02E4, r3	; 0x8002e4 <driveY+0xf>
    1d9e:	20 92 e3 02 	sts	0x02E3, r2	; 0x8002e3 <driveY+0xe>
    1da2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PidUpdateFlagDriveY>
    1da6:	88 23       	and	r24, r24
    1da8:	09 f4       	brne	.+2      	; 0x1dac <_Z10Move_Yaxisiij+0x8c>
    1daa:	0a c1       	rjmp	.+532    	; 0x1fc0 <_Z10Move_Yaxisiij+0x2a0>
    1dac:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PidUpdateFlagDriveY>
    1db0:	28 35       	cpi	r18, 0x58	; 88
    1db2:	82 e0       	ldi	r24, 0x02	; 2
    1db4:	38 07       	cpc	r19, r24
    1db6:	0c f4       	brge	.+2      	; 0x1dba <_Z10Move_Yaxisiij+0x9a>
    1db8:	ad c0       	rjmp	.+346    	; 0x1f14 <_Z10Move_Yaxisiij+0x1f4>
    1dba:	0f 2e       	mov	r0, r31
    1dbc:	f5 ed       	ldi	r31, 0xD5	; 213
    1dbe:	cf 2e       	mov	r12, r31
    1dc0:	f2 e0       	ldi	r31, 0x02	; 2
    1dc2:	df 2e       	mov	r13, r31
    1dc4:	f0 2d       	mov	r31, r0
    1dc6:	f6 01       	movw	r30, r12
    1dc8:	31 83       	std	Z+1, r19	; 0x01
    1dca:	20 83       	st	Z, r18
    1dcc:	22 1a       	sub	r2, r18
    1dce:	33 0a       	sbc	r3, r19
    1dd0:	33 82       	std	Z+3, r3	; 0x03
    1dd2:	22 82       	std	Z+2, r2	; 0x02
    1dd4:	b1 01       	movw	r22, r2
    1dd6:	03 2c       	mov	r0, r3
    1dd8:	00 0c       	add	r0, r0
    1dda:	88 0b       	sbc	r24, r24
    1ddc:	99 0b       	sbc	r25, r25
    1dde:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    1de2:	2b 01       	movw	r4, r22
    1de4:	3c 01       	movw	r6, r24
    1de6:	f6 01       	movw	r30, r12
    1de8:	21 8d       	ldd	r18, Z+25	; 0x19
    1dea:	32 8d       	ldd	r19, Z+26	; 0x1a
    1dec:	43 8d       	ldd	r20, Z+27	; 0x1b
    1dee:	54 8d       	ldd	r21, Z+28	; 0x1c
    1df0:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1df4:	f6 01       	movw	r30, r12
    1df6:	22 85       	ldd	r18, Z+10	; 0x0a
    1df8:	33 85       	ldd	r19, Z+11	; 0x0b
    1dfa:	44 85       	ldd	r20, Z+12	; 0x0c
    1dfc:	55 85       	ldd	r21, Z+13	; 0x0d
    1dfe:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1e02:	4b 01       	movw	r8, r22
    1e04:	5c 01       	movw	r10, r24
    1e06:	f6 01       	movw	r30, r12
    1e08:	62 87       	std	Z+10, r22	; 0x0a
    1e0a:	73 87       	std	Z+11, r23	; 0x0b
    1e0c:	84 87       	std	Z+12, r24	; 0x0c
    1e0e:	95 87       	std	Z+13, r25	; 0x0d
    1e10:	80 89       	ldd	r24, Z+16	; 0x10
    1e12:	88 23       	and	r24, r24
    1e14:	19 f0       	breq	.+6      	; 0x1e1c <_Z10Move_Yaxisiij+0xfc>
    1e16:	d5 83       	std	Z+5, r29	; 0x05
    1e18:	c4 83       	std	Z+4, r28	; 0x04
    1e1a:	10 8a       	std	Z+16, r1	; 0x10
    1e1c:	c5 01       	movw	r24, r10
    1e1e:	b4 01       	movw	r22, r8
    1e20:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1e24:	9b 01       	movw	r18, r22
    1e26:	77 23       	and	r23, r23
    1e28:	24 f4       	brge	.+8      	; 0x1e32 <_Z10Move_Yaxisiij+0x112>
    1e2a:	22 27       	eor	r18, r18
    1e2c:	33 27       	eor	r19, r19
    1e2e:	26 1b       	sub	r18, r22
    1e30:	37 0b       	sbc	r19, r23
    1e32:	2b 30       	cpi	r18, 0x0B	; 11
    1e34:	31 05       	cpc	r19, r1
    1e36:	5c f1       	brlt	.+86     	; 0x1e8e <_Z10Move_Yaxisiij+0x16e>
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	a9 01       	movw	r20, r18
    1e3e:	c5 01       	movw	r24, r10
    1e40:	b4 01       	movw	r22, r8
    1e42:	0e 94 a3 21 	call	0x4346	; 0x4346 <__gesf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	6c f4       	brge	.+26     	; 0x1e64 <_Z10Move_Yaxisiij+0x144>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	a0 e2       	ldi	r26, 0x20	; 32
    1e50:	b1 e4       	ldi	r27, 0x41	; 65
    1e52:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <driveY+0xa>
    1e56:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <driveY+0xb>
    1e5a:	a0 93 e1 02 	sts	0x02E1, r26	; 0x8002e1 <driveY+0xc>
    1e5e:	b0 93 e2 02 	sts	0x02E2, r27	; 0x8002e2 <driveY+0xd>
    1e62:	15 c0       	rjmp	.+42     	; 0x1e8e <_Z10Move_Yaxisiij+0x16e>
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	a9 01       	movw	r20, r18
    1e6a:	c5 01       	movw	r24, r10
    1e6c:	b4 01       	movw	r22, r8
    1e6e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__cmpsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	64 f4       	brge	.+24     	; 0x1e8e <_Z10Move_Yaxisiij+0x16e>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a0 e2       	ldi	r26, 0x20	; 32
    1e7c:	b1 ec       	ldi	r27, 0xC1	; 193
    1e7e:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <driveY+0xa>
    1e82:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <driveY+0xb>
    1e86:	a0 93 e1 02 	sts	0x02E1, r26	; 0x8002e1 <driveY+0xc>
    1e8a:	b0 93 e2 02 	sts	0x02E2, r27	; 0x8002e2 <driveY+0xd>
    1e8e:	12 14       	cp	r1, r2
    1e90:	13 04       	cpc	r1, r3
    1e92:	bc f5       	brge	.+110    	; 0x1f02 <_Z10Move_Yaxisiij+0x1e2>
    1e94:	0f 2e       	mov	r0, r31
    1e96:	f5 ed       	ldi	r31, 0xD5	; 213
    1e98:	cf 2e       	mov	r12, r31
    1e9a:	f2 e0       	ldi	r31, 0x02	; 2
    1e9c:	df 2e       	mov	r13, r31
    1e9e:	f0 2d       	mov	r31, r0
    1ea0:	f6 01       	movw	r30, r12
    1ea2:	25 89       	ldd	r18, Z+21	; 0x15
    1ea4:	36 89       	ldd	r19, Z+22	; 0x16
    1ea6:	47 89       	ldd	r20, Z+23	; 0x17
    1ea8:	50 8d       	ldd	r21, Z+24	; 0x18
    1eaa:	c3 01       	movw	r24, r6
    1eac:	b2 01       	movw	r22, r4
    1eae:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1eb2:	f6 01       	movw	r30, r12
    1eb4:	22 85       	ldd	r18, Z+10	; 0x0a
    1eb6:	33 85       	ldd	r19, Z+11	; 0x0b
    1eb8:	44 85       	ldd	r20, Z+12	; 0x0c
    1eba:	55 85       	ldd	r21, Z+13	; 0x0d
    1ebc:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1ec0:	4b 01       	movw	r8, r22
    1ec2:	5c 01       	movw	r10, r24
    1ec4:	f6 01       	movw	r30, r12
    1ec6:	84 81       	ldd	r24, Z+4	; 0x04
    1ec8:	95 81       	ldd	r25, Z+5	; 0x05
    1eca:	be 01       	movw	r22, r28
    1ecc:	68 1b       	sub	r22, r24
    1ece:	79 0b       	sbc	r23, r25
    1ed0:	07 2e       	mov	r0, r23
    1ed2:	00 0c       	add	r0, r0
    1ed4:	88 0b       	sbc	r24, r24
    1ed6:	99 0b       	sbc	r25, r25
    1ed8:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    1edc:	f6 01       	movw	r30, r12
    1ede:	25 8d       	ldd	r18, Z+29	; 0x1d
    1ee0:	36 8d       	ldd	r19, Z+30	; 0x1e
    1ee2:	47 8d       	ldd	r20, Z+31	; 0x1f
    1ee4:	50 a1       	ldd	r21, Z+32	; 0x20
    1ee6:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1eea:	9b 01       	movw	r18, r22
    1eec:	ac 01       	movw	r20, r24
    1eee:	c5 01       	movw	r24, r10
    1ef0:	b4 01       	movw	r22, r8
    1ef2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
    1ef6:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1efa:	f6 01       	movw	r30, r12
    1efc:	77 83       	std	Z+7, r23	; 0x07
    1efe:	66 83       	std	Z+6, r22	; 0x06
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <_Z10Move_Yaxisiij+0x1ea>
    1f02:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <driveY+0x7>
    1f06:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <driveY+0x6>
    1f0a:	d0 93 da 02 	sts	0x02DA, r29	; 0x8002da <driveY+0x5>
    1f0e:	c0 93 d9 02 	sts	0x02D9, r28	; 0x8002d9 <driveY+0x4>
    1f12:	18 c0       	rjmp	.+48     	; 0x1f44 <_Z10Move_Yaxisiij+0x224>
    1f14:	b9 01       	movw	r22, r18
    1f16:	33 0f       	add	r19, r19
    1f18:	88 0b       	sbc	r24, r24
    1f1a:	99 0b       	sbc	r25, r25
    1f1c:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    1f20:	2a e9       	ldi	r18, 0x9A	; 154
    1f22:	39 e9       	ldi	r19, 0x99	; 153
    1f24:	49 e1       	ldi	r20, 0x19	; 25
    1f26:	5e e3       	ldi	r21, 0x3E	; 62
    1f28:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e7       	ldi	r20, 0x70	; 112
    1f32:	52 e4       	ldi	r21, 0x42	; 66
    1f34:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__addsf3>
    1f38:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    1f3c:	70 93 dc 02 	sts	0x02DC, r23	; 0x8002dc <driveY+0x7>
    1f40:	60 93 db 02 	sts	0x02DB, r22	; 0x8002db <driveY+0x6>
    1f44:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <driveY+0x6>
    1f48:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <driveY+0x7>
    1f4c:	99 23       	and	r25, r25
    1f4e:	1c f4       	brge	.+6      	; 0x1f56 <_Z10Move_Yaxisiij+0x236>
    1f50:	91 95       	neg	r25
    1f52:	81 95       	neg	r24
    1f54:	91 09       	sbc	r25, r1
    1f56:	8e 15       	cp	r24, r14
    1f58:	9f 05       	cpc	r25, r15
    1f5a:	20 f0       	brcs	.+8      	; 0x1f64 <_Z10Move_Yaxisiij+0x244>
    1f5c:	f0 92 dc 02 	sts	0x02DC, r15	; 0x8002dc <driveY+0x7>
    1f60:	e0 92 db 02 	sts	0x02DB, r14	; 0x8002db <driveY+0x6>
    1f64:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <driveY+0x6>
    1f68:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <driveY+0x7>
    1f6c:	43 96       	adiw	r24, 0x13	; 19
    1f6e:	87 97       	sbiw	r24, 0x27	; 39
    1f70:	30 f4       	brcc	.+12     	; 0x1f7e <_Z10Move_Yaxisiij+0x25e>
    1f72:	84 e1       	ldi	r24, 0x14	; 20
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <driveY+0x7>
    1f7a:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <driveY+0x6>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
    1f84:	02 30       	cpi	r16, 0x02	; 2
    1f86:	11 05       	cpc	r17, r1
    1f88:	61 f4       	brne	.+24     	; 0x1fa2 <_Z10Move_Yaxisiij+0x282>
    1f8a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <movingyfront>
    1f8e:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <movingyback>
    1f92:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <movingxfront>
    1f96:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <movingxback>
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <_Z10Move_Yaxisiij+0x2a0>
    1fa2:	03 30       	cpi	r16, 0x03	; 3
    1fa4:	11 05       	cpc	r17, r1
    1fa6:	61 f4       	brne	.+24     	; 0x1fc0 <_Z10Move_Yaxisiij+0x2a0>
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <movingyback>
    1fae:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <movingyfront>
    1fb2:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <movingxfront>
    1fb6:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <movingxback>
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    1fc0:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <driveY+0x6>
    1fc4:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <driveY+0x7>
    1fc8:	62 de       	rcall	.-828    	; 0x1c8e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	df 90       	pop	r13
    1fd8:	cf 90       	pop	r12
    1fda:	bf 90       	pop	r11
    1fdc:	af 90       	pop	r10
    1fde:	9f 90       	pop	r9
    1fe0:	8f 90       	pop	r8
    1fe2:	7f 90       	pop	r7
    1fe4:	6f 90       	pop	r6
    1fe6:	5f 90       	pop	r5
    1fe8:	4f 90       	pop	r4
    1fea:	3f 90       	pop	r3
    1fec:	2f 90       	pop	r2
    1fee:	08 95       	ret

00001ff0 <_Z15Move_Yaxis_Slowjhh>:
    1ff0:	8f 92       	push	r8
    1ff2:	9f 92       	push	r9
    1ff4:	af 92       	push	r10
    1ff6:	bf 92       	push	r11
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	d6 2f       	mov	r29, r22
    200a:	c4 2f       	mov	r28, r20
    200c:	e0 eb       	ldi	r30, 0xB0	; 176
    200e:	f2 e0       	ldi	r31, 0x02	; 2
    2010:	0a e9       	ldi	r16, 0x9A	; 154
    2012:	19 e9       	ldi	r17, 0x99	; 153
    2014:	29 e1       	ldi	r18, 0x19	; 25
    2016:	3f e3       	ldi	r19, 0x3F	; 63
    2018:	05 8b       	std	Z+21, r16	; 0x15
    201a:	16 8b       	std	Z+22, r17	; 0x16
    201c:	27 8b       	std	Z+23, r18	; 0x17
    201e:	30 8f       	std	Z+24, r19	; 0x18
    2020:	4a e0       	ldi	r20, 0x0A	; 10
    2022:	57 ed       	ldi	r21, 0xD7	; 215
    2024:	63 ea       	ldi	r22, 0xA3	; 163
    2026:	7c e3       	ldi	r23, 0x3C	; 60
    2028:	41 8f       	std	Z+25, r20	; 0x19
    202a:	52 8f       	std	Z+26, r21	; 0x1a
    202c:	63 8f       	std	Z+27, r22	; 0x1b
    202e:	74 8f       	std	Z+28, r23	; 0x1c
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e2       	ldi	r26, 0x20	; 32
    2036:	b1 e4       	ldi	r27, 0x41	; 65
    2038:	85 8f       	std	Z+29, r24	; 0x1d
    203a:	96 8f       	std	Z+30, r25	; 0x1e
    203c:	a7 8f       	std	Z+31, r26	; 0x1f
    203e:	b0 a3       	std	Z+32, r27	; 0x20
    2040:	ef e8       	ldi	r30, 0x8F	; 143
    2042:	f2 e0       	ldi	r31, 0x02	; 2
    2044:	05 8b       	std	Z+21, r16	; 0x15
    2046:	16 8b       	std	Z+22, r17	; 0x16
    2048:	27 8b       	std	Z+23, r18	; 0x17
    204a:	30 8f       	std	Z+24, r19	; 0x18
    204c:	41 8f       	std	Z+25, r20	; 0x19
    204e:	52 8f       	std	Z+26, r21	; 0x1a
    2050:	63 8f       	std	Z+27, r22	; 0x1b
    2052:	74 8f       	std	Z+28, r23	; 0x1c
    2054:	85 8f       	std	Z+29, r24	; 0x1d
    2056:	96 8f       	std	Z+30, r25	; 0x1e
    2058:	a7 8f       	std	Z+31, r26	; 0x1f
    205a:	b0 a3       	std	Z+32, r27	; 0x20
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
    2062:	d2 30       	cpi	r29, 0x02	; 2
    2064:	21 f4       	brne	.+8      	; 0x206e <_Z15Move_Yaxis_Slowjhh+0x7e>
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    206c:	05 c0       	rjmp	.+10     	; 0x2078 <_Z15Move_Yaxis_Slowjhh+0x88>
    206e:	d3 30       	cpi	r29, 0x03	; 3
    2070:	19 f4       	brne	.+6      	; 0x2078 <_Z15Move_Yaxis_Slowjhh+0x88>
    2072:	83 e0       	ldi	r24, 0x03	; 3
    2074:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    2078:	88 e6       	ldi	r24, 0x68	; 104
    207a:	92 e0       	ldi	r25, 0x02	; 2
    207c:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    2080:	4b 01       	movw	r8, r22
    2082:	5c 01       	movw	r10, r24
    2084:	6c 2f       	mov	r22, r28
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    2090:	6b 01       	movw	r12, r22
    2092:	7c 01       	movw	r14, r24
    2094:	c5 01       	movw	r24, r10
    2096:	b4 01       	movw	r22, r8
    2098:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    209c:	9b 01       	movw	r18, r22
    209e:	77 23       	and	r23, r23
    20a0:	24 f4       	brge	.+8      	; 0x20aa <_Z15Move_Yaxis_Slowjhh+0xba>
    20a2:	22 27       	eor	r18, r18
    20a4:	33 27       	eor	r19, r19
    20a6:	26 1b       	sub	r18, r22
    20a8:	37 0b       	sbc	r19, r23
    20aa:	b9 01       	movw	r22, r18
    20ac:	33 0f       	add	r19, r19
    20ae:	88 0b       	sbc	r24, r24
    20b0:	99 0b       	sbc	r25, r25
    20b2:	0e 94 95 20 	call	0x412a	; 0x412a <__floatsisf>
    20b6:	2a e0       	ldi	r18, 0x0A	; 10
    20b8:	37 ed       	ldi	r19, 0xD7	; 215
    20ba:	43 e2       	ldi	r20, 0x23	; 35
    20bc:	5d e3       	ldi	r21, 0x3D	; 61
    20be:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    20c2:	9b 01       	movw	r18, r22
    20c4:	ac 01       	movw	r20, r24
    20c6:	c7 01       	movw	r24, r14
    20c8:	b6 01       	movw	r22, r12
    20ca:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__subsf3>
    20ce:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    20d2:	cb 01       	movw	r24, r22
    20d4:	dc dd       	rcall	.-1096   	; 0x1c8e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	bf 90       	pop	r11
    20e8:	af 90       	pop	r10
    20ea:	9f 90       	pop	r9
    20ec:	8f 90       	pop	r8
    20ee:	08 95       	ret

000020f0 <_Z13Hold_Positionv>:

void Hold_Position(void)
{
	_axis = Y_Axis;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
	_direction = Back;
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    20fc:	e0 eb       	ldi	r30, 0xB0	; 176
    20fe:	f2 e0       	ldi	r31, 0x02	; 2
    2100:	46 e6       	ldi	r20, 0x66	; 102
    2102:	56 e6       	ldi	r21, 0x66	; 102
    2104:	66 ee       	ldi	r22, 0xE6	; 230
    2106:	7f e3       	ldi	r23, 0x3F	; 63
    2108:	45 8b       	std	Z+21, r20	; 0x15
    210a:	56 8b       	std	Z+22, r21	; 0x16
    210c:	67 8b       	std	Z+23, r22	; 0x17
    210e:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    2110:	11 8e       	std	Z+25, r1	; 0x19
    2112:	12 8e       	std	Z+26, r1	; 0x1a
    2114:	13 8e       	std	Z+27, r1	; 0x1b
    2116:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	b1 e4       	ldi	r27, 0x41	; 65
    2120:	85 8f       	std	Z+29, r24	; 0x1d
    2122:	96 8f       	std	Z+30, r25	; 0x1e
    2124:	a7 8f       	std	Z+31, r26	; 0x1f
    2126:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2128:	ef e8       	ldi	r30, 0x8F	; 143
    212a:	f2 e0       	ldi	r31, 0x02	; 2
    212c:	45 8b       	std	Z+21, r20	; 0x15
    212e:	56 8b       	std	Z+22, r21	; 0x16
    2130:	67 8b       	std	Z+23, r22	; 0x17
    2132:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    2134:	11 8e       	std	Z+25, r1	; 0x19
    2136:	12 8e       	std	Z+26, r1	; 0x1a
    2138:	13 8e       	std	Z+27, r1	; 0x1b
    213a:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    213c:	85 8f       	std	Z+29, r24	; 0x1d
    213e:	96 8f       	std	Z+30, r25	; 0x1e
    2140:	a7 8f       	std	Z+31, r26	; 0x1f
    2142:	b0 a3       	std	Z+32, r27	; 0x20
	
	
 	FrontLinetrackerY_.setPid(1.8,0,16);
 	BackLinetrackerY_.setPid(1.8,0,16);
	
	Calculate_Motor_Differential_Velocity_With_Center_Pivot(0);
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a2 cd       	rjmp	.-1212   	; 0x1c8e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    214a:	08 95       	ret

0000214c <_Z14updateZoneflagv>:
//  		if(task8)	//uart0_puts("8 \n");
//  		else        //uart0_puts("0 \n");

}

void updateZoneflag(void){
    214c:	cf 93       	push	r28
	/*if low on shuttlecock pin then shuttlecock received
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
    214e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <ShuttleCockGiven>
    2152:	81 11       	cpse	r24, r1
    2154:	b1 c0       	rjmp	.+354    	; 0x22b8 <__stack+0xb9>
		////uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
    2156:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    215a:	86 fd       	sbrc	r24, 6
    215c:	69 c0       	rjmp	.+210    	; 0x2230 <__stack+0x31>
    215e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2162:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    2166:	05 97       	sbiw	r24, 0x05	; 5
    2168:	09 f0       	breq	.+2      	; 0x216c <_Z14updateZoneflagv+0x20>
    216a:	62 c0       	rjmp	.+196    	; 0x2230 <__stack+0x31>
    216c:	54 c0       	rjmp	.+168    	; 0x2216 <__stack+0x17>
			GoThrowingZone1 = true;
			task3 = task4 = false;
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    216e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2172:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    2176:	06 97       	sbiw	r24, 0x06	; 6
    2178:	f9 f4       	brne	.+62     	; 0x21b8 <_Z14updateZoneflagv+0x6c>
    217a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    217e:	81 11       	cpse	r24, r1
    2180:	5c c0       	rjmp	.+184    	; 0x223a <__stack+0x3b>
    2182:	1a c0       	rjmp	.+52     	; 0x21b8 <_Z14updateZoneflagv+0x6c>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    2184:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2188:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    218c:	05 97       	sbiw	r24, 0x05	; 5
    218e:	31 f0       	breq	.+12     	; 0x219c <_Z14updateZoneflagv+0x50>
    2190:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2194:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    2198:	06 97       	sbiw	r24, 0x06	; 6
    219a:	31 f4       	brne	.+12     	; 0x21a8 <_Z14updateZoneflagv+0x5c>
		/*//uart0_puts("Shuttlecock arm gone \r\n");*/
		ShuttleCockArmGone = true;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <ShuttleCockArmGone>
		uart3_putc('w');
    21a2:	87 e7       	ldi	r24, 0x77	; 119
    21a4:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
	}
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
    21a8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <ShuttleCockGiven>
    21ac:	88 23       	and	r24, r24
    21ae:	21 f0       	breq	.+8      	; 0x21b8 <_Z14updateZoneflagv+0x6c>
    21b0:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <GoldenRackGiven>
    21b4:	81 11       	cpse	r24, r1
    21b6:	85 c0       	rjmp	.+266    	; 0x22c2 <__stack+0xc3>
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && ((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
    21b8:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <sendoncetorotateGeneva>
    21bc:	88 23       	and	r24, r24
    21be:	99 f0       	breq	.+38     	; 0x21e6 <_Z14updateZoneflagv+0x9a>
    21c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    21c4:	86 fd       	sbrc	r24, 6
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <_Z14updateZoneflagv+0x9a>
    21c8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    21cc:	82 ff       	sbrs	r24, 2
    21ce:	0b c0       	rjmp	.+22     	; 0x21e6 <_Z14updateZoneflagv+0x9a>
    21d0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    21d4:	81 11       	cpse	r24, r1
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <_Z14updateZoneflagv+0x9a>
    21d8:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    21dc:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    21e0:	06 97       	sbiw	r24, 0x06	; 6
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <_Z14updateZoneflagv+0x9a>
    21e4:	3f c0       	rjmp	.+126    	; 0x2264 <__stack+0x65>
			uart3_putc('k');
			sendoncetorotateGeneva = false;
		}
		////uart0_puts("entered rack wala \r\n");
		if((!(RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
    21e6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    21ea:	82 fd       	sbrc	r24, 2
    21ec:	5e c0       	rjmp	.+188    	; 0x22aa <__stack+0xab>
    21ee:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    21f2:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    21f6:	06 97       	sbiw	r24, 0x06	; 6
    21f8:	09 f0       	breq	.+2      	; 0x21fc <_Z14updateZoneflagv+0xb0>
    21fa:	57 c0       	rjmp	.+174    	; 0x22aa <__stack+0xab>
    21fc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    2200:	81 11       	cpse	r24, r1
    2202:	53 c0       	rjmp	.+166    	; 0x22aa <__stack+0xab>
    2204:	35 c0       	rjmp	.+106    	; 0x2270 <__stack+0x71>
			GoThrowingZone2 = false;
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
			////uart0_puts("none \r\n");
			GoldenRackGiven = false;
    2206:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <GoldenRackGiven>
			GoThrowingZone2 = true;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <GoThrowingZone2>
			GoThrowingZone3 = false;
    2210:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <GoThrowingZone3>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    2214:	56 c0       	rjmp	.+172    	; 0x22c2 <__stack+0xc3>
	if(!ShuttleCockGiven){
		////uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
			//'w' is sent to throwing mechanism to grip shuttlecock
			//uart0_puts("shuttlecock given \r\n");
			uart3_putc('o');
    2216:	8f e6       	ldi	r24, 0x6F	; 111
    2218:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
			ShuttleCockGiven = true;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = true;
    2222:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <GoThrowingZone1>
			task3 = task4 = false;
    2226:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <task4>
    222a:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <task3>
    222e:	44 c0       	rjmp	.+136    	; 0x22b8 <__stack+0xb9>
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    2230:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2234:	86 ff       	sbrs	r24, 6
    2236:	9b cf       	rjmp	.-202    	; 0x216e <_Z14updateZoneflagv+0x22>
    2238:	bf cf       	rjmp	.-130    	; 0x21b8 <_Z14updateZoneflagv+0x6c>
		/*	//uart0_puts("Shuttlecock given in loading zone 2\r\nManual robot ahead \r\n");*/
			//'o' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    223a:	8f e6       	ldi	r24, 0x6F	; 111
    223c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
			ShuttleCockGiven = true;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = false;
    2246:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <GoThrowingZone1>
			GoThrowingZone2 = true;
    224a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <GoThrowingZone2>
			//robotState = moving;
			task3 = task4 = task5 = true;
    224e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <task5>
    2252:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <task4>
    2256:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <task3>
			task6 = task7 = false;
    225a:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <task7>
    225e:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <task6>
    2262:	2a c0       	rjmp	.+84     	; 0x22b8 <__stack+0xb9>
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && ((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
			uart3_putc('k');
    2264:	8b e6       	ldi	r24, 0x6B	; 107
    2266:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
			sendoncetorotateGeneva = false;
    226a:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sendoncetorotateGeneva>
    226e:	bb cf       	rjmp	.-138    	; 0x21e6 <_Z14updateZoneflagv+0x9a>
		}
		////uart0_puts("entered rack wala \r\n");
		if((!(RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
			//'f' is sent to throwing mechanism to tell to throwing zone 3 from golden rack
			task6 = task7 = true;
    2270:	c1 e0       	ldi	r28, 0x01	; 1
    2272:	c0 93 7c 02 	sts	0x027C, r28	; 0x80027c <task7>
    2276:	c0 93 7d 02 	sts	0x027D, r28	; 0x80027d <task6>
			task8 = task9 = false;
    227a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <task9>
    227e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <task8>
			/*//uart0_puts("going throwing zone 3\r\n");*/
			uart3_putc('j');
    2282:	8a e6       	ldi	r24, 0x6A	; 106
    2284:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
			GoldenRackGiven = true;
    2288:	c0 93 8d 02 	sts	0x028D, r28	; 0x80028d <GoldenRackGiven>
			ShuttleCockArmGone = true;
    228c:	c0 93 8c 02 	sts	0x028C, r28	; 0x80028c <ShuttleCockArmGone>
			ShuttleCockGiven = true;
    2290:	c0 93 8e 02 	sts	0x028E, r28	; 0x80028e <ShuttleCockGiven>
			GoThrowingZone3 = true;
    2294:	c0 93 88 02 	sts	0x0288, r28	; 0x800288 <GoThrowingZone3>
			robotState = moving;
    2298:	87 e0       	ldi	r24, 0x07	; 7
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    22a0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
			GoThrowingZone2 = false;
    22a4:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <GoThrowingZone2>
    22a8:	0c c0       	rjmp	.+24     	; 0x22c2 <__stack+0xc3>
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
    22aa:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    22ae:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    22b2:	06 97       	sbiw	r24, 0x06	; 6
    22b4:	31 f4       	brne	.+12     	; 0x22c2 <__stack+0xc3>
    22b6:	a7 cf       	rjmp	.-178    	; 0x2206 <__stack+0x7>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    22b8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    22bc:	86 fd       	sbrc	r24, 6
    22be:	62 cf       	rjmp	.-316    	; 0x2184 <_Z14updateZoneflagv+0x38>
    22c0:	77 cf       	rjmp	.-274    	; 0x21b0 <_Z14updateZoneflagv+0x64>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <_Z18gorockthegamefieldv>:
// 	else{
// 		PORTK |= (1<<PK2);
// 	}
	
	
	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
    22c6:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    22ca:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    22ce:	05 97       	sbiw	r24, 0x05	; 5
    22d0:	39 f0       	breq	.+14     	; 0x22e0 <_Z18gorockthegamefieldv+0x1a>
    22d2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    22d6:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    22da:	06 97       	sbiw	r24, 0x06	; 6
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <_Z18gorockthegamefieldv+0x1a>
    22de:	4b c0       	rjmp	.+150    	; 0x2376 <_Z18gorockthegamefieldv+0xb0>
    22e0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    22e4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    22e8:	08 97       	sbiw	r24, 0x08	; 8
    22ea:	09 f0       	breq	.+2      	; 0x22ee <_Z18gorockthegamefieldv+0x28>
    22ec:	44 c0       	rjmp	.+136    	; 0x2376 <_Z18gorockthegamefieldv+0xb0>
    22ee:	04 c4       	rjmp	.+2056   	; 0x2af8 <_Z18gorockthegamefieldv+0x832>
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    22f0:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <task5>
    22f4:	81 11       	cpse	r24, r1
    22f6:	09 c0       	rjmp	.+18     	; 0x230a <_Z18gorockthegamefieldv+0x44>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
    22f8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    22fc:	84 ff       	sbrs	r24, 4
    22fe:	01 c4       	rjmp	.+2050   	; 0x2b02 <_Z18gorockthegamefieldv+0x83c>
    2300:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <alwaysTZ1>
    2304:	81 11       	cpse	r24, r1
    2306:	fd c3       	rjmp	.+2042   	; 0x2b02 <_Z18gorockthegamefieldv+0x83c>
    2308:	05 c4       	rjmp	.+2058   	; 0x2b14 <_Z18gorockthegamefieldv+0x84e>
				GoThrowingZone1 = true;
				task3 = task4 = false;
				updateZoneflag();
			}	
		}
 		else if(task6 && task7 ){
    230a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <task6>
    230e:	88 23       	and	r24, r24
    2310:	81 f1       	breq	.+96     	; 0x2372 <_Z18gorockthegamefieldv+0xac>
    2312:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <task7>
    2316:	88 23       	and	r24, r24
    2318:	61 f1       	breq	.+88     	; 0x2372 <_Z18gorockthegamefieldv+0xac>
			 //if manual robot is not ahead and not always throw from throwing zone 2
			 //or just goto throwing zone 3 from loading zone 2		
 			if( ((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !alwaysTZ2) || LZ2ForTZ3){
    231a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    231e:	84 ff       	sbrs	r24, 4
    2320:	04 c0       	rjmp	.+8      	; 0x232a <_Z18gorockthegamefieldv+0x64>
    2322:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <alwaysTZ2>
    2326:	88 23       	and	r24, r24
    2328:	21 f0       	breq	.+8      	; 0x2332 <_Z18gorockthegamefieldv+0x6c>
    232a:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <LZ2ForTZ3>
    232e:	88 23       	and	r24, r24
    2330:	59 f0       	breq	.+22     	; 0x2348 <_Z18gorockthegamefieldv+0x82>
			    /*//uart0_puts("no manual in front\r\n");*/
 				where = inLZ2;
    2332:	86 e0       	ldi	r24, 0x06	; 6
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
    233a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
 				ManualInFrontOfLZ2 = false;
    233e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
 				updateZoneflag();
    2342:	04 df       	rcall	.-504    	; 0x214c <_Z14updateZoneflagv>
 				Hold_Position();
    2344:	d5 de       	rcall	.-598    	; 0x20f0 <_Z13Hold_Positionv>
    2346:	17 c0       	rjmp	.+46     	; 0x2376 <_Z18gorockthegamefieldv+0xb0>
    2348:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 			}
			//if there is manual robot ahead of automatic robot && robot is not going 
			//..directly to throwing zone 3 
 			else if (!(ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !LZ2ForTZ3){
    234c:	84 fd       	sbrc	r24, 4
    234e:	f0 c3       	rjmp	.+2016   	; 0x2b30 <_Z18gorockthegamefieldv+0x86a>
    2350:	81 e0       	ldi	r24, 0x01	; 1
				/*//uart0_puts("manual infront \r\n");*/
				ManualInFrontOfLZ2 = true;
    2352:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
    2356:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <xJunctionMeetFromTZ2>
 				xJunctionMeetFromTZ2 = false;
				updateZoneflag();
    235a:	f8 de       	rcall	.-528    	; 0x214c <_Z14updateZoneflagv>
    235c:	c9 de       	rcall	.-622    	; 0x20f0 <_Z13Hold_Positionv>
				Hold_Position();
    235e:	0b c0       	rjmp	.+22     	; 0x2376 <_Z18gorockthegamefieldv+0xb0>
    2360:	81 e0       	ldi	r24, 0x01	; 1
 			}
			//if always throw from throwing zone 2
			//automatic robot must force to know there is manual robot ahead.
			else if(alwaysTZ2){
				/*//uart0_puts("always tz2 \r\n");*/
				ManualInFrontOfLZ2 = true;
    2362:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
				updateZoneflag();
    2366:	f2 de       	rcall	.-540    	; 0x214c <_Z14updateZoneflagv>
				Hold_Position();
    2368:	c3 de       	rcall	.-634    	; 0x20f0 <_Z13Hold_Positionv>
			}
			//otherwise updatezone flag
 			else{
 				updateZoneflag();
    236a:	05 c0       	rjmp	.+10     	; 0x2376 <_Z18gorockthegamefieldv+0xb0>
    236c:	ef de       	rcall	.-546    	; 0x214c <_Z14updateZoneflagv>
 				Hold_Position();
    236e:	c0 de       	rcall	.-640    	; 0x20f0 <_Z13Hold_Positionv>
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <_Z18gorockthegamefieldv+0xb0>
    2372:	ec de       	rcall	.-552    	; 0x214c <_Z14updateZoneflagv>
 			}
 		}
		/*if the robot is in loading zone 1 or loading zone 2  otherwise */
		else{
			updateZoneflag();
    2374:	bd de       	rcall	.-646    	; 0x20f0 <_Z13Hold_Positionv>
    2376:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <task1>
			Hold_Position();
    237a:	81 11       	cpse	r24, r1
		}
	}
	
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
    237c:	6d c5       	rjmp	.+2778   	; 0x2e58 <_Z18gorockthegamefieldv+0xb92>
    237e:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <where>
    2382:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <where+0x1>
    2386:	23 2b       	or	r18, r19
    2388:	09 f0       	breq	.+2      	; 0x238c <_Z18gorockthegamefieldv+0xc6>
    238a:	60 c5       	rjmp	.+2752   	; 0x2e4c <_Z18gorockthegamefieldv+0xb86>
    238c:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <normalGame>
    2390:	91 11       	cpse	r25, r1
    2392:	d3 c3       	rjmp	.+1958   	; 0x2b3a <_Z18gorockthegamefieldv+0x874>
    2394:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <alwaysTZ1>
    2398:	91 11       	cpse	r25, r1
    239a:	cf c3       	rjmp	.+1950   	; 0x2b3a <_Z18gorockthegamefieldv+0x874>
    239c:	57 c5       	rjmp	.+2734   	; 0x2e4c <_Z18gorockthegamefieldv+0xb86>
    239e:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    23a2:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
		inline void resetCount(){count_encoder = 0;};
    23a6:	78 94       	sei
    23a8:	e8 e6       	ldi	r30, 0x68	; 104
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
	uart3_putc('h');
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    23ac:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE0);
    23ae:	81 60       	ori	r24, 0x01	; 1
    23b0:	80 83       	st	Z, r24
    23b2:	eb e6       	ldi	r30, 0x6B	; 107
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
	PCMSK0 |= (1<<PCINT4);
    23b8:	80 61       	ori	r24, 0x10	; 16
    23ba:	80 83       	st	Z, r24
    23bc:	2c c1       	rjmp	.+600    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    23be:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <directlyTZ3>
    23c2:	21 11       	cpse	r18, r1
			linetrackerXjunctionWatch();
			////uart0_puts("int on");
		}
		////uart0_puts("\r\n");
	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    23c4:	08 c0       	rjmp	.+16     	; 0x23d6 <_Z18gorockthegamefieldv+0x110>
    23c6:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <LZ2ForTZ3>
    23ca:	21 11       	cpse	r18, r1
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <_Z18gorockthegamefieldv+0x110>
    23ce:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <alwaysTZ2>
    23d2:	22 23       	and	r18, r18
    23d4:	69 f1       	breq	.+90     	; 0x2430 <_Z18gorockthegamefieldv+0x16a>
    23d6:	81 11       	cpse	r24, r1
    23d8:	2e c0       	rjmp	.+92     	; 0x2436 <_Z18gorockthegamefieldv+0x170>
    23da:	48 ec       	ldi	r20, 0xC8	; 200
    23dc:	50 e0       	ldi	r21, 0x00	; 0
    23de:	62 e0       	ldi	r22, 0x02	; 2
		movx((Throwingzone2.x-150),Front,STARTZONEtoCORNER);
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	8a ef       	ldi	r24, 0xFA	; 250
    23e4:	99 e1       	ldi	r25, 0x19	; 25
    23e6:	0e 94 1d 08 	call	0x103a	; 0x103a <_Z4movxiij>
    23ea:	87 e0       	ldi	r24, 0x07	; 7
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		robotState = moving;
    23f2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    23f6:	80 e7       	ldi	r24, 0x70	; 112
    23f8:	92 e0       	ldi	r25, 0x02	; 2
    23fa:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
		if(abs(encoderX.getdistance()) >= 6600){
    23fe:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    2402:	9b 01       	movw	r18, r22
    2404:	77 23       	and	r23, r23
    2406:	24 f4       	brge	.+8      	; 0x2410 <_Z18gorockthegamefieldv+0x14a>
    2408:	22 27       	eor	r18, r18
    240a:	33 27       	eor	r19, r19
    240c:	26 1b       	sub	r18, r22
    240e:	37 0b       	sbc	r19, r23
    2410:	28 3c       	cpi	r18, 0xC8	; 200
    2412:	39 41       	sbci	r19, 0x19	; 25
    2414:	0c f4       	brge	.+2      	; 0x2418 <_Z18gorockthegamefieldv+0x152>
    2416:	ff c0       	rjmp	.+510    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    2418:	78 94       	sei
    241a:	e8 e6       	ldi	r30, 0x68	; 104
    241c:	f0 e0       	ldi	r31, 0x00	; 0
	uart3_putc('h');
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    241e:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE0);
    2420:	81 60       	ori	r24, 0x01	; 1
    2422:	80 83       	st	Z, r24
    2424:	eb e6       	ldi	r30, 0x6B	; 107
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
	PCMSK0 |= (1<<PCINT4);
    242a:	80 61       	ori	r24, 0x10	; 16
    242c:	80 83       	st	Z, r24
    242e:	f3 c0       	rjmp	.+486    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    2430:	88 23       	and	r24, r24
    2432:	09 f4       	brne	.+2      	; 0x2436 <_Z18gorockthegamefieldv+0x170>
    2434:	7a c0       	rjmp	.+244    	; 0x252a <_Z18gorockthegamefieldv+0x264>
			////uart0_puts("interrupt on\t");
			linetrackerXjunctionWatch();
		}
	}
	///move from corner to loading zone1 if task1 is completed and task2 not completed
	else if(task1 && !task2){	
    2436:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <task2>
    243a:	81 11       	cpse	r24, r1
    243c:	3a c0       	rjmp	.+116    	; 0x24b2 <_Z18gorockthegamefieldv+0x1ec>
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
		where = inFirstloadingCorner;
    2446:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    244a:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <startingAtFront>
    244e:	e7 e1       	ldi	r30, 0x17	; 23
		startingAtFront = false;
    2450:	f3 e0       	ldi	r31, 0x03	; 3
    2452:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a0 e0       	ldi	r26, 0x00	; 0
    2458:	b0 e4       	ldi	r27, 0x40	; 64
    245a:	85 8b       	std	Z+21, r24	; 0x15
    245c:	96 8b       	std	Z+22, r25	; 0x16
    245e:	a7 8b       	std	Z+23, r26	; 0x17
    2460:	b0 8f       	std	Z+24, r27	; 0x18
    2462:	11 8e       	std	Z+25, r1	; 0x19
    2464:	12 8e       	std	Z+26, r1	; 0x1a
    2466:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    2468:	14 8e       	std	Z+28, r1	; 0x1c
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    2470:	b1 e4       	ldi	r27, 0x41	; 65
    2472:	85 8f       	std	Z+29, r24	; 0x1d
    2474:	96 8f       	std	Z+30, r25	; 0x1e
    2476:	a7 8f       	std	Z+31, r26	; 0x1f
    2478:	b0 a3       	std	Z+32, r27	; 0x20
    247a:	87 e0       	ldi	r24, 0x07	; 7
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		compass.setPid(2.0,0,30);
		////uart0_puts("moving aheead \r\n");
		robotState = moving;
    2482:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2486:	eb e6       	ldi	r30, 0x6B	; 107
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    248c:	8f 7e       	andi	r24, 0xEF	; 239
    248e:	80 83       	st	Z, r24
    2490:	78 94       	sei
    2492:	e8 e6       	ldi	r30, 0x68	; 104
    2494:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2496:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    2498:	84 60       	ori	r24, 0x04	; 4
    249a:	80 83       	st	Z, r24
    249c:	ed e6       	ldi	r30, 0x6D	; 109
    249e:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    24a0:	80 81       	ld	r24, Z
    24a2:	80 68       	ori	r24, 0x80	; 128
    24a4:	80 83       	st	Z, r24
    24a6:	4c e3       	ldi	r20, 0x3C	; 60
    24a8:	62 e0       	ldi	r22, 0x02	; 2
		linetrackerXjunctionWatchOff();
		linetrackerYjunctionWatch();
		//movYForwardSlow(CORNERtoLZ1);
		Move_Yaxis_Slow(1000, Front, CORNERtoLZ1);
    24aa:	88 ee       	ldi	r24, 0xE8	; 232
    24ac:	93 e0       	ldi	r25, 0x03	; 3
    24ae:	a0 dd       	rcall	.-1216   	; 0x1ff0 <_Z15Move_Yaxis_Slowjhh>
    24b0:	b2 c0       	rjmp	.+356    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    24b2:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <where>
    24b6:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <where+0x1>
		//movYForwardSlow(CORNERtoLZ1);
	}
	/*if task2 is completed and robot just reached loading zone 1*/
	else if(task1 && task2 && where == inFirstloadingCorner && (robotState == moving) && (normalGame||alwaysTZ1)){
    24ba:	21 30       	cpi	r18, 0x01	; 1
    24bc:	31 05       	cpc	r19, r1
    24be:	09 f0       	breq	.+2      	; 0x24c2 <_Z18gorockthegamefieldv+0x1fc>
    24c0:	bc c4       	rjmp	.+2424   	; 0x2e3a <_Z18gorockthegamefieldv+0xb74>
    24c2:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <robotState>
    24c6:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <robotState+0x1>
    24ca:	27 30       	cpi	r18, 0x07	; 7
    24cc:	31 05       	cpc	r19, r1
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <_Z18gorockthegamefieldv+0x20c>
    24d0:	b4 c4       	rjmp	.+2408   	; 0x2e3a <_Z18gorockthegamefieldv+0xb74>
    24d2:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <normalGame>
    24d6:	81 11       	cpse	r24, r1
    24d8:	05 c0       	rjmp	.+10     	; 0x24e4 <_Z18gorockthegamefieldv+0x21e>
    24da:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <alwaysTZ1>
    24de:	88 23       	and	r24, r24
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <_Z18gorockthegamefieldv+0x21e>
    24e2:	ab c4       	rjmp	.+2390   	; 0x2e3a <_Z18gorockthegamefieldv+0xb74>
    24e4:	85 e0       	ldi	r24, 0x05	; 5
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
		where = inLZ1;
    24ec:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    24f0:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z10getYawGY88v>
    24f4:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <compass+0xf>
		compass.SETPOINT = getYawGY88();
    24f8:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <compass+0xe>
    24fc:	88 e0       	ldi	r24, 0x08	; 8
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		////uart0_puts("in loading zone 1\r\n");
		//compass.setPid(2.0,0,30);
		robotState = notmoving;
    2504:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2508:	ed e6       	ldi	r30, 0x6D	; 109
    250a:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    250c:	80 81       	ld	r24, Z
    250e:	8f 77       	andi	r24, 0x7F	; 127
    2510:	80 83       	st	Z, r24
    2512:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
		linetrackerYjunctionWatchOff();
		BrakeMotor();
    2516:	ec dd       	rcall	.-1064   	; 0x20f0 <_Z13Hold_Positionv>
    2518:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
		Hold_Position();
    251c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2520:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2524:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2528:	76 c0       	rjmp	.+236    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    252a:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <where>
    252e:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <where+0x1>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    2532:	21 30       	cpi	r18, 0x01	; 1
    2534:	31 05       	cpc	r19, r1
    2536:	09 f0       	breq	.+2      	; 0x253a <_Z18gorockthegamefieldv+0x274>
    2538:	6e c0       	rjmp	.+220    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    253a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <task2>
    253e:	88 23       	and	r24, r24
    2540:	09 f4       	brne	.+2      	; 0x2544 <_Z18gorockthegamefieldv+0x27e>
    2542:	69 c0       	rjmp	.+210    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    2544:	91 11       	cpse	r25, r1
    2546:	0d c0       	rjmp	.+26     	; 0x2562 <_Z18gorockthegamefieldv+0x29c>
    2548:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <directlyTZ3>
    254c:	81 11       	cpse	r24, r1
    254e:	09 c0       	rjmp	.+18     	; 0x2562 <_Z18gorockthegamefieldv+0x29c>
    2550:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <LZ2ForTZ3>
    2554:	81 11       	cpse	r24, r1
    2556:	05 c0       	rjmp	.+10     	; 0x2562 <_Z18gorockthegamefieldv+0x29c>
    2558:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <alwaysTZ2>
    255c:	88 23       	and	r24, r24
    255e:	09 f4       	brne	.+2      	; 0x2562 <_Z18gorockthegamefieldv+0x29c>
    2560:	5a c0       	rjmp	.+180    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    2562:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2566:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    256a:	07 97       	sbiw	r24, 0x07	; 7
    256c:	09 f0       	breq	.+2      	; 0x2570 <_Z18gorockthegamefieldv+0x2aa>
    256e:	53 c0       	rjmp	.+166    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    2570:	1a c3       	rjmp	.+1588   	; 0x2ba6 <_Z18gorockthegamefieldv+0x8e0>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <task5>
		robotState = notmoving;
		BrakeMotor();
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
			task1 = task2 = task3 = task4 = task5 = true;
    2578:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <task4>
    257c:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <task3>
    2580:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <task2>
    2584:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <task1>
    2588:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
    258c:	44 c0       	rjmp	.+136    	; 0x2616 <_Z18gorockthegamefieldv+0x350>
			ManualInFrontOfLZ2 = true;
    258e:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <directlyTZ3>
    2592:	88 23       	and	r24, r24
		}
		else if(directlyTZ3){
    2594:	c9 f0       	breq	.+50     	; 0x25c8 <_Z18gorockthegamefieldv+0x302>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <task7>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    259c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <task6>
    25a0:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <task5>
    25a4:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <task4>
    25a8:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <task3>
    25ac:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <task2>
    25b0:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <task1>
    25b4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <ShuttleCockArmGone>
    25b8:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ShuttleCockGiven>
			ShuttleCockArmGone = true;
    25bc:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <GoThrowingZone3>
			ShuttleCockGiven = true;
    25c0:	8a e6       	ldi	r24, 0x6A	; 106
			GoThrowingZone3 = true;
    25c2:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
			uart3_putc('j');
    25c6:	27 c0       	rjmp	.+78     	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    25c8:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <LZ2ForTZ3>
    25cc:	88 23       	and	r24, r24
		}
		else if(LZ2ForTZ3){
    25ce:	91 f0       	breq	.+36     	; 0x25f4 <_Z18gorockthegamefieldv+0x32e>
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <task7>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    25d6:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <task6>
    25da:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <task5>
    25de:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <task4>
    25e2:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <task3>
    25e6:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <task2>
    25ea:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <task1>
    25ee:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
    25f2:	11 c0       	rjmp	.+34     	; 0x2616 <_Z18gorockthegamefieldv+0x350>
			ManualInFrontOfLZ2 = false;
    25f4:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <alwaysTZ2>
    25f8:	88 23       	and	r24, r24
		}
		else if(alwaysTZ2){
    25fa:	69 f0       	breq	.+26     	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <task5>
			task1 = task2 = task3 = task4 = task5 = true;
    2602:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <task4>
    2606:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <task3>
    260a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <task2>
    260e:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <task1>
    2612:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
    2616:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <ShuttleCockGiven>
			ManualInFrontOfLZ2 = true;
    261a:	88 23       	and	r24, r24
		}
	}
	/*if Shuttlecock is given*/
	if(ShuttleCockGiven && ShuttleCockArmGone)
    261c:	09 f4       	brne	.+2      	; 0x2620 <_Z18gorockthegamefieldv+0x35a>
    261e:	29 c4       	rjmp	.+2130   	; 0x2e72 <_Z18gorockthegamefieldv+0xbac>
    2620:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <ShuttleCockArmGone>
    2624:	88 23       	and	r24, r24
    2626:	09 f4       	brne	.+2      	; 0x262a <_Z18gorockthegamefieldv+0x364>
    2628:	24 c4       	rjmp	.+2120   	; 0x2e72 <_Z18gorockthegamefieldv+0xbac>
    262a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <GoThrowingZone1>
    262e:	88 23       	and	r24, r24
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
    2630:	09 f4       	brne	.+2      	; 0x2634 <_Z18gorockthegamefieldv+0x36e>
    2632:	db c2       	rjmp	.+1462   	; 0x2bea <_Z18gorockthegamefieldv+0x924>
    2634:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <task3>
    2638:	81 11       	cpse	r24, r1
    263a:	13 c0       	rjmp	.+38     	; 0x2662 <_Z18gorockthegamefieldv+0x39c>
    263c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2640:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    2644:	05 97       	sbiw	r24, 0x05	; 5
    2646:	f1 f4       	brne	.+60     	; 0x2684 <_Z18gorockthegamefieldv+0x3be>
    2648:	d6 c2       	rjmp	.+1452   	; 0x2bf6 <_Z18gorockthegamefieldv+0x930>
    264a:	78 94       	sei
    264c:	e8 e6       	ldi	r30, 0x68	; 104
    264e:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2650:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    2652:	84 60       	ori	r24, 0x04	; 4
    2654:	80 83       	st	Z, r24
    2656:	ed e6       	ldi	r30, 0x6D	; 109
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    265c:	80 68       	ori	r24, 0x80	; 128
    265e:	80 83       	st	Z, r24
    2660:	11 c0       	rjmp	.+34     	; 0x2684 <_Z18gorockthegamefieldv+0x3be>
    2662:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <task4>
    2666:	81 11       	cpse	r24, r1
					////uart0_puts("INT ON");
				}
				////uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    2668:	0d c0       	rjmp	.+26     	; 0x2684 <_Z18gorockthegamefieldv+0x3be>
    266a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    266e:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    2672:	05 97       	sbiw	r24, 0x05	; 5
    2674:	39 f4       	brne	.+14     	; 0x2684 <_Z18gorockthegamefieldv+0x3be>
    2676:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    267a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    267e:	07 97       	sbiw	r24, 0x07	; 7
    2680:	09 f4       	brne	.+2      	; 0x2684 <_Z18gorockthegamefieldv+0x3be>
    2682:	d8 c2       	rjmp	.+1456   	; 0x2c34 <_Z18gorockthegamefieldv+0x96e>
    2684:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2688:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
				robotState = notmoving;
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
    268c:	02 97       	sbiw	r24, 0x02	; 2
    268e:	d9 f4       	brne	.+54     	; 0x26c6 <_Z18gorockthegamefieldv+0x400>
    2690:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2694:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2698:	08 97       	sbiw	r24, 0x08	; 8
    269a:	a9 f4       	brne	.+42     	; 0x26c6 <_Z18gorockthegamefieldv+0x400>
    269c:	e7 c2       	rjmp	.+1486   	; 0x2c6c <_Z18gorockthegamefieldv+0x9a6>
    269e:	81 e3       	ldi	r24, 0x31	; 49
    26a0:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
			//	//uart0_puts("Throwing \r\n");
				Hold_Position();

				if(_b_Transmit_once)	//Stable_Robot() && 
				{	
					uart3_putc('1');
    26a4:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_b_Transmit_once>
    26a8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_Z10uart3_getcv>
					//uart3_puts("Job Done\r\n\n");
					_b_Transmit_once = false;
    26ac:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <receiveAck>
				}
				
				receiveAck = uart3_getc();
    26b0:	87 36       	cpi	r24, 0x67	; 103
    26b2:	49 f4       	brne	.+18     	; 0x26c6 <_Z18gorockthegamefieldv+0x400>
    26b4:	81 e0       	ldi	r24, 0x01	; 1
				if(receiveAck == 'g'){
    26b6:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <backtoLZ1>
					////uart0_puts("received ack\r\n");
					backtoLZ1 = true;
    26ba:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <GoThrowingZone1>
    26be:	80 e2       	ldi	r24, 0x20	; 32
					GoThrowingZone1 = false;
    26c0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <receiveAck>
					receiveAck = ' ';
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <_Z18gorockthegamefieldv+0x408>
    26c6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <backtoLZ1>
    26ca:	88 23       	and	r24, r24
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ1 && task3 && !task4){
    26cc:	91 f1       	breq	.+100    	; 0x2732 <_Z18gorockthegamefieldv+0x46c>
    26ce:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <task3>
    26d2:	88 23       	and	r24, r24
    26d4:	71 f1       	breq	.+92     	; 0x2732 <_Z18gorockthegamefieldv+0x46c>
    26d6:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <task4>
    26da:	81 11       	cpse	r24, r1
    26dc:	2f c0       	rjmp	.+94     	; 0x273c <_Z18gorockthegamefieldv+0x476>
    26de:	44 e6       	ldi	r20, 0x64	; 100
    26e0:	50 e0       	ldi	r21, 0x00	; 0
				////compass.setPid(6.6,0.02,10.0);
				////uart0_puts("Returning from tz1 \t");
				Move_Yaxis(Throwingzone1.y-50, Back, LZ1toTZ1);
    26e2:	63 e0       	ldi	r22, 0x03	; 3
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	8c e6       	ldi	r24, 0x6C	; 108
    26e8:	97 e0       	ldi	r25, 0x07	; 7
    26ea:	1a db       	rcall	.-2508   	; 0x1d20 <_Z10Move_Yaxisiij>
    26ec:	87 e0       	ldi	r24, 0x07	; 7
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				//movy(Throwingzone1.y, Back,TZ1toLZ1);
				robotState = moving;
    26f4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    26f8:	88 e6       	ldi	r24, 0x68	; 104
    26fa:	92 e0       	ldi	r25, 0x02	; 2
    26fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				if(abs(encoderY.getdistance()) >= 1200){
    2700:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    2704:	9b 01       	movw	r18, r22
    2706:	77 23       	and	r23, r23
    2708:	24 f4       	brge	.+8      	; 0x2712 <_Z18gorockthegamefieldv+0x44c>
    270a:	22 27       	eor	r18, r18
    270c:	33 27       	eor	r19, r19
    270e:	26 1b       	sub	r18, r22
    2710:	37 0b       	sbc	r19, r23
    2712:	20 3b       	cpi	r18, 0xB0	; 176
    2714:	34 40       	sbci	r19, 0x04	; 4
    2716:	0c f4       	brge	.+2      	; 0x271a <_Z18gorockthegamefieldv+0x454>
    2718:	5f c0       	rjmp	.+190    	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
    271a:	78 94       	sei
    271c:	e8 e6       	ldi	r30, 0x68	; 104
    271e:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2720:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    2722:	84 60       	ori	r24, 0x04	; 4
    2724:	80 83       	st	Z, r24
    2726:	ed e6       	ldi	r30, 0x6D	; 109
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    272c:	80 68       	ori	r24, 0x80	; 128
    272e:	80 83       	st	Z, r24
    2730:	53 c0       	rjmp	.+166    	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
    2732:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <task4>
    2736:	88 23       	and	r24, r24
				////uart0_puts("\r\n");
			
			}
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
    2738:	09 f4       	brne	.+2      	; 0x273c <_Z18gorockthegamefieldv+0x476>
    273a:	c1 c2       	rjmp	.+1410   	; 0x2cbe <_Z18gorockthegamefieldv+0x9f8>
    273c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2740:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2744:	07 97       	sbiw	r24, 0x07	; 7
    2746:	09 f0       	breq	.+2      	; 0x274a <_Z18gorockthegamefieldv+0x484>
    2748:	ba c2       	rjmp	.+1396   	; 0x2cbe <_Z18gorockthegamefieldv+0x9f8>
    274a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    274e:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    2752:	02 97       	sbiw	r24, 0x02	; 2
    2754:	09 f0       	breq	.+2      	; 0x2758 <_Z18gorockthegamefieldv+0x492>
    2756:	b3 c2       	rjmp	.+1382   	; 0x2cbe <_Z18gorockthegamefieldv+0x9f8>
    2758:	90 c2       	rjmp	.+1312   	; 0x2c7a <_Z18gorockthegamefieldv+0x9b4>
    275a:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <task5>
    275e:	81 11       	cpse	r24, r1
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2760:	2e c0       	rjmp	.+92     	; 0x27be <_Z18gorockthegamefieldv+0x4f8>
    2762:	44 e6       	ldi	r20, 0x64	; 100
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	62 e0       	ldi	r22, 0x02	; 2
				////uart0_puts("heading loading zone 2\t");
				//compass.setPid(6.6,0.02,10.0);
				movx(2100,Front,LZ1toLZ2);
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	84 e3       	ldi	r24, 0x34	; 52
    276c:	98 e0       	ldi	r25, 0x08	; 8
    276e:	0e 94 1d 08 	call	0x103a	; 0x103a <_Z4movxiij>
    2772:	87 e0       	ldi	r24, 0x07	; 7
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				robotState = moving;
    277a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    277e:	80 e7       	ldi	r24, 0x70	; 112
    2780:	92 e0       	ldi	r25, 0x02	; 2
    2782:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				if(abs(encoderX.getdistance()) >= 1900){
    2786:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    278a:	9b 01       	movw	r18, r22
    278c:	77 23       	and	r23, r23
    278e:	24 f4       	brge	.+8      	; 0x2798 <_Z18gorockthegamefieldv+0x4d2>
    2790:	22 27       	eor	r18, r18
    2792:	33 27       	eor	r19, r19
    2794:	26 1b       	sub	r18, r22
    2796:	37 0b       	sbc	r19, r23
    2798:	2c 36       	cpi	r18, 0x6C	; 108
    279a:	37 40       	sbci	r19, 0x07	; 7
    279c:	ec f0       	brlt	.+58     	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
    279e:	78 94       	sei
    27a0:	e8 e6       	ldi	r30, 0x68	; 104
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
	uart3_putc('h');
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    27a4:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE0);
    27a6:	81 60       	ori	r24, 0x01	; 1
    27a8:	80 83       	st	Z, r24
    27aa:	eb e6       	ldi	r30, 0x6B	; 107
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
	PCMSK0 |= (1<<PCINT4);
    27b0:	80 61       	ori	r24, 0x10	; 16
    27b2:	80 83       	st	Z, r24
    27b4:	11 c0       	rjmp	.+34     	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
    27b6:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <task5>
    27ba:	88 23       	and	r24, r24
				}
				////uart0_puts("\r\n");
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
    27bc:	69 f0       	breq	.+26     	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
    27be:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    27c2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    27c6:	07 97       	sbiw	r24, 0x07	; 7
    27c8:	39 f4       	brne	.+14     	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
    27ca:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    27ce:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    27d2:	05 97       	sbiw	r24, 0x05	; 5
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
    27d6:	78 c2       	rjmp	.+1264   	; 0x2cc8 <_Z18gorockthegamefieldv+0xa02>
    27d8:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <GoThrowingZone2>
    27dc:	88 23       	and	r24, r24
			}
			
			
			/*if there is manual robot ahead of automatic robot && golden rack is not given and shuttlecock
			is given*/
			if(GoThrowingZone2 && !task6 ){
    27de:	69 f1       	breq	.+90     	; 0x283a <_Z18gorockthegamefieldv+0x574>
    27e0:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <task6>
    27e4:	81 11       	cpse	r24, r1
    27e6:	2d c0       	rjmp	.+90     	; 0x2842 <_Z18gorockthegamefieldv+0x57c>
    27e8:	87 e0       	ldi	r24, 0x07	; 7
    27ea:	90 e0       	ldi	r25, 0x00	; 0
				////uart0_puts("going tz2 \t");
				//compass.setPid(6.6,0.02,10.0);
				robotState = moving;
    27ec:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    27f0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    27f4:	44 e6       	ldi	r20, 0x64	; 100
    27f6:	50 e0       	ldi	r21, 0x00	; 0
				Move_Yaxis(Throwingzone2.y+40, Front, LZ2toTZ2);
    27f8:	62 e0       	ldi	r22, 0x02	; 2
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	86 ec       	ldi	r24, 0xC6	; 198
    27fe:	97 e0       	ldi	r25, 0x07	; 7
    2800:	8f da       	rcall	.-2786   	; 0x1d20 <_Z10Move_Yaxisiij>
    2802:	88 e6       	ldi	r24, 0x68	; 104
    2804:	92 e0       	ldi	r25, 0x02	; 2
    2806:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				//movy(Throwingzone2.y, Front,LZ2toTZ2);
			
				if(abs(encoderY.getdistance()) >=1200){
    280a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    280e:	9b 01       	movw	r18, r22
    2810:	77 23       	and	r23, r23
    2812:	24 f4       	brge	.+8      	; 0x281c <_Z18gorockthegamefieldv+0x556>
    2814:	22 27       	eor	r18, r18
    2816:	33 27       	eor	r19, r19
    2818:	26 1b       	sub	r18, r22
    281a:	37 0b       	sbc	r19, r23
    281c:	20 3b       	cpi	r18, 0xB0	; 176
    281e:	34 40       	sbci	r19, 0x04	; 4
    2820:	0c f1       	brlt	.+66     	; 0x2864 <_Z18gorockthegamefieldv+0x59e>
    2822:	78 94       	sei
    2824:	e8 e6       	ldi	r30, 0x68	; 104
    2826:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2828:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    282a:	84 60       	ori	r24, 0x04	; 4
    282c:	80 83       	st	Z, r24
    282e:	ed e6       	ldi	r30, 0x6D	; 109
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    2834:	80 68       	ori	r24, 0x80	; 128
    2836:	80 83       	st	Z, r24
    2838:	15 c0       	rjmp	.+42     	; 0x2864 <_Z18gorockthegamefieldv+0x59e>
    283a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <task6>
    283e:	88 23       	and	r24, r24
				}
				////uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
    2840:	89 f0       	breq	.+34     	; 0x2864 <_Z18gorockthegamefieldv+0x59e>
    2842:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <task7>
    2846:	81 11       	cpse	r24, r1
    2848:	0d c0       	rjmp	.+26     	; 0x2864 <_Z18gorockthegamefieldv+0x59e>
    284a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    284e:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    2852:	06 97       	sbiw	r24, 0x06	; 6
    2854:	39 f4       	brne	.+14     	; 0x2864 <_Z18gorockthegamefieldv+0x59e>
    2856:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    285a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    285e:	07 97       	sbiw	r24, 0x07	; 7
    2860:	09 f4       	brne	.+2      	; 0x2864 <_Z18gorockthegamefieldv+0x59e>
    2862:	54 c2       	rjmp	.+1192   	; 0x2d0c <_Z18gorockthegamefieldv+0xa46>
    2864:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2868:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
				//uart3_putc('2');
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
    286c:	03 97       	sbiw	r24, 0x03	; 3
    286e:	19 f5       	brne	.+70     	; 0x28b6 <_Z18gorockthegamefieldv+0x5f0>
    2870:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2874:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2878:	08 97       	sbiw	r24, 0x08	; 8
    287a:	e9 f4       	brne	.+58     	; 0x28b6 <_Z18gorockthegamefieldv+0x5f0>
    287c:	63 c2       	rjmp	.+1222   	; 0x2d44 <_Z18gorockthegamefieldv+0xa7e>
    287e:	82 e3       	ldi	r24, 0x32	; 50
    2880:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
				velocity_robot[0] =0;
				velocity_robot[1]=0;
				Hold_Position();
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
				{
					uart3_putc('2');
    2884:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
    2888:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    288c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2890:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2894:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_b_Transmit_once>
    2898:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_Z10uart3_getcv>
					encoderX.resetCount();
					encoderY.resetCount();
					_b_Transmit_once = false;
    289c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <receiveAck>
				}
				
				receiveAck = uart3_getc();
    28a0:	87 36       	cpi	r24, 0x67	; 103
    28a2:	49 f4       	brne	.+18     	; 0x28b6 <_Z18gorockthegamefieldv+0x5f0>
    28a4:	81 e0       	ldi	r24, 0x01	; 1
				if(receiveAck == 'g'){
    28a6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <backtoLZ2>
					backtoLZ2 = true;
    28aa:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <GoThrowingZone3>
    28ae:	80 e2       	ldi	r24, 0x20	; 32
					GoThrowingZone3 = false;
    28b0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <receiveAck>
					receiveAck = ' ';
    28b4:	04 c0       	rjmp	.+8      	; 0x28be <_Z18gorockthegamefieldv+0x5f8>
    28b6:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <backtoLZ2>
    28ba:	88 23       	and	r24, r24
				}
			}
			///if acknowledge received from throwing mechanism after throwing then back to loading zone 2
			if(backtoLZ2 && task6 && !task7){
    28bc:	89 f1       	breq	.+98     	; 0x2920 <_Z18gorockthegamefieldv+0x65a>
    28be:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <task6>
    28c2:	88 23       	and	r24, r24
    28c4:	69 f1       	breq	.+90     	; 0x2920 <_Z18gorockthegamefieldv+0x65a>
    28c6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <task7>
    28ca:	81 11       	cpse	r24, r1
    28cc:	2d c0       	rjmp	.+90     	; 0x2928 <_Z18gorockthegamefieldv+0x662>
    28ce:	44 e6       	ldi	r20, 0x64	; 100
    28d0:	50 e0       	ldi	r21, 0x00	; 0
					//if(abs(encoderX.getdistance()) >= 400){
						//linetrackerXjunctionWatch();
					//}
				//}
				//else{
					Move_Yaxis(Throwingzone2.y-80, Back, LZ2toTZ2);
    28d2:	63 e0       	ldi	r22, 0x03	; 3
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	8e e4       	ldi	r24, 0x4E	; 78
    28d8:	97 e0       	ldi	r25, 0x07	; 7
    28da:	22 da       	rcall	.-3004   	; 0x1d20 <_Z10Move_Yaxisiij>
    28dc:	87 e0       	ldi	r24, 0x07	; 7
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
					//movy(Throwingzone2.y,Back,TZ2toLZ2);
					robotState = moving;
    28e4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    28e8:	88 e6       	ldi	r24, 0x68	; 104
    28ea:	92 e0       	ldi	r25, 0x02	; 2
    28ec:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
			
					if(abs(encoderY.getdistance()) >= 1200){
    28f0:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    28f4:	9b 01       	movw	r18, r22
    28f6:	77 23       	and	r23, r23
    28f8:	24 f4       	brge	.+8      	; 0x2902 <_Z18gorockthegamefieldv+0x63c>
    28fa:	22 27       	eor	r18, r18
    28fc:	33 27       	eor	r19, r19
    28fe:	26 1b       	sub	r18, r22
    2900:	37 0b       	sbc	r19, r23
    2902:	20 3b       	cpi	r18, 0xB0	; 176
    2904:	34 40       	sbci	r19, 0x04	; 4
    2906:	ec f0       	brlt	.+58     	; 0x2942 <_Z18gorockthegamefieldv+0x67c>
    2908:	78 94       	sei
    290a:	e8 e6       	ldi	r30, 0x68	; 104
    290c:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    290e:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    2910:	84 60       	ori	r24, 0x04	; 4
    2912:	80 83       	st	Z, r24
    2914:	ed e6       	ldi	r30, 0x6D	; 109
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    291a:	80 68       	ori	r24, 0x80	; 128
    291c:	80 83       	st	Z, r24
    291e:	11 c0       	rjmp	.+34     	; 0x2942 <_Z18gorockthegamefieldv+0x67c>
    2920:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <task7>
    2924:	88 23       	and	r24, r24
				////uart0_puts("\r\n");
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
    2926:	69 f0       	breq	.+26     	; 0x2942 <_Z18gorockthegamefieldv+0x67c>
    2928:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    292c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2930:	07 97       	sbiw	r24, 0x07	; 7
    2932:	39 f4       	brne	.+14     	; 0x2942 <_Z18gorockthegamefieldv+0x67c>
    2934:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2938:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    293c:	03 97       	sbiw	r24, 0x03	; 3
    293e:	09 f4       	brne	.+2      	; 0x2942 <_Z18gorockthegamefieldv+0x67c>
    2940:	0e c2       	rjmp	.+1052   	; 0x2d5e <_Z18gorockthegamefieldv+0xa98>
    2942:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <GoThrowingZone3>
    2946:	88 23       	and	r24, r24
				ShuttleCockArmGone = false;
				backtoLZ2 = false;
			}
			
			/*if golden rack is given to automatic robot and says goto throwingzone 1*/
			if(GoThrowingZone3 && !task8){
    2948:	09 f4       	brne	.+2      	; 0x294c <_Z18gorockthegamefieldv+0x686>
    294a:	44 c0       	rjmp	.+136    	; 0x29d4 <_Z18gorockthegamefieldv+0x70e>
    294c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <task8>
    2950:	81 11       	cpse	r24, r1
    2952:	44 c0       	rjmp	.+136    	; 0x29dc <_Z18gorockthegamefieldv+0x716>
    2954:	e7 e1       	ldi	r30, 0x17	; 23
    2956:	f3 e0       	ldi	r31, 0x03	; 3
    2958:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 e0       	ldi	r26, 0x00	; 0
    295e:	b0 e4       	ldi	r27, 0x40	; 64
    2960:	85 8b       	std	Z+21, r24	; 0x15
    2962:	96 8b       	std	Z+22, r25	; 0x16
    2964:	a7 8b       	std	Z+23, r26	; 0x17
    2966:	b0 8f       	std	Z+24, r27	; 0x18
    2968:	11 8e       	std	Z+25, r1	; 0x19
    296a:	12 8e       	std	Z+26, r1	; 0x1a
    296c:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    296e:	14 8e       	std	Z+28, r1	; 0x1c
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
		kd = d;
    2974:	a0 ef       	ldi	r26, 0xF0	; 240
    2976:	b1 e4       	ldi	r27, 0x41	; 65
    2978:	85 8f       	std	Z+29, r24	; 0x1d
    297a:	96 8f       	std	Z+30, r25	; 0x1e
    297c:	a7 8f       	std	Z+31, r26	; 0x1f
    297e:	b0 a3       	std	Z+32, r27	; 0x20
    2980:	46 e9       	ldi	r20, 0x96	; 150
    2982:	50 e0       	ldi	r21, 0x00	; 0
				compass.setPid(2.0,0,30);//2.0
				//////uart0_puts("going tz3 \t");
				//compass.SETPOINT = 181;
				Move_Yaxis(Throwingzone3.y-125, Front, LZ2toTZ3);
    2984:	62 e0       	ldi	r22, 0x02	; 2
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	89 e6       	ldi	r24, 0x69	; 105
    298a:	94 e1       	ldi	r25, 0x14	; 20
    298c:	c9 d9       	rcall	.-3182   	; 0x1d20 <_Z10Move_Yaxisiij>
    298e:	87 e0       	ldi	r24, 0x07	; 7
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				//movy(5300,Front,LZ2toTZ3);
				robotState = moving;
    2996:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    299a:	88 e6       	ldi	r24, 0x68	; 104
    299c:	92 e0       	ldi	r25, 0x02	; 2
    299e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				if(abs(encoderY.getdistance()) >= 4000){
    29a2:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    29a6:	9b 01       	movw	r18, r22
    29a8:	77 23       	and	r23, r23
    29aa:	24 f4       	brge	.+8      	; 0x29b4 <_Z18gorockthegamefieldv+0x6ee>
    29ac:	22 27       	eor	r18, r18
    29ae:	33 27       	eor	r19, r19
    29b0:	26 1b       	sub	r18, r22
    29b2:	37 0b       	sbc	r19, r23
    29b4:	20 3a       	cpi	r18, 0xA0	; 160
    29b6:	3f 40       	sbci	r19, 0x0F	; 15
    29b8:	0c f4       	brge	.+2      	; 0x29bc <_Z18gorockthegamefieldv+0x6f6>
    29ba:	44 c0       	rjmp	.+136    	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
    29bc:	78 94       	sei
    29be:	e8 e6       	ldi	r30, 0x68	; 104
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    29c2:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    29c4:	84 60       	ori	r24, 0x04	; 4
    29c6:	80 83       	st	Z, r24
    29c8:	ed e6       	ldi	r30, 0x6D	; 109
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    29ce:	80 68       	ori	r24, 0x80	; 128
    29d0:	80 83       	st	Z, r24
    29d2:	38 c0       	rjmp	.+112    	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
    29d4:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <task8>
    29d8:	88 23       	and	r24, r24
					//////uart0_puts("interrupt on");
				}
				////uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
    29da:	a1 f1       	breq	.+104    	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
    29dc:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    29e0:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    29e4:	06 97       	sbiw	r24, 0x06	; 6
    29e6:	09 f0       	breq	.+2      	; 0x29ea <_Z18gorockthegamefieldv+0x724>
    29e8:	3c c2       	rjmp	.+1144   	; 0x2e62 <_Z18gorockthegamefieldv+0xb9c>
    29ea:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    29ee:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    29f2:	07 97       	sbiw	r24, 0x07	; 7
    29f4:	09 f0       	breq	.+2      	; 0x29f8 <_Z18gorockthegamefieldv+0x732>
    29f6:	35 c2       	rjmp	.+1130   	; 0x2e62 <_Z18gorockthegamefieldv+0xb9c>
    29f8:	d5 c1       	rjmp	.+938    	; 0x2da4 <_Z18gorockthegamefieldv+0xade>
    29fa:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    29fe:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2a02:	08 97       	sbiw	r24, 0x08	; 8
    2a04:	f9 f4       	brne	.+62     	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
    2a06:	ec c1       	rjmp	.+984    	; 0x2de0 <_Z18gorockthegamefieldv+0xb1a>
    2a08:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_b_Transmit_once>
    2a0c:	81 11       	cpse	r24, r1
				//velocity_robot[0] = velocity_robot[1] = velocity_robot[2] = 0;
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2a0e:	ed c1       	rjmp	.+986    	; 0x2dea <_Z18gorockthegamefieldv+0xb24>
    2a10:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <_Z10uart3_getcv>
    2a14:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <receiveAck>
				{	
					uart3_putc('3');
					_b_Transmit_once = false;
				}
				
				receiveAck = uart3_getc();
    2a18:	80 37       	cpi	r24, 0x70	; 112
    2a1a:	21 f4       	brne	.+8      	; 0x2a24 <_Z18gorockthegamefieldv+0x75e>
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
				
				if (receiveAck == 'p')
    2a1e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <pressRobot>
				{
					pressRobot = true;
    2a22:	10 c0       	rjmp	.+32     	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
    2a24:	84 36       	cpi	r24, 0x64	; 100
    2a26:	19 f4       	brne	.+6      	; 0x2a2e <_Z18gorockthegamefieldv+0x768>
    2a28:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <pressRobot>
				}
				else if (receiveAck == 'd')
    2a2c:	0b c0       	rjmp	.+22     	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
				{
					pressRobot = false;
    2a2e:	87 36       	cpi	r24, 0x67	; 103
    2a30:	49 f4       	brne	.+18     	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
    2a32:	81 e0       	ldi	r24, 0x01	; 1
				}
				
				if(receiveAck == 'g'){
    2a34:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <backtoLZ2>
					backtoLZ2 = true;
    2a38:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <GoThrowingZone3>
    2a3c:	80 e2       	ldi	r24, 0x20	; 32
					GoThrowingZone3 = false;
    2a3e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <receiveAck>
					receiveAck = ' ';
    2a42:	05 c0       	rjmp	.+10     	; 0x2a4e <_Z18gorockthegamefieldv+0x788>
    2a44:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <backtoLZ2>
    2a48:	88 23       	and	r24, r24
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ2 && task8 && !task9){
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <_Z18gorockthegamefieldv+0x788>
    2a4c:	41 c0       	rjmp	.+130    	; 0x2ad0 <_Z18gorockthegamefieldv+0x80a>
    2a4e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <task8>
    2a52:	88 23       	and	r24, r24
    2a54:	e9 f1       	breq	.+122    	; 0x2ad0 <_Z18gorockthegamefieldv+0x80a>
    2a56:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <task9>
    2a5a:	81 11       	cpse	r24, r1
    2a5c:	3e c0       	rjmp	.+124    	; 0x2ada <_Z18gorockthegamefieldv+0x814>
    2a5e:	e7 e1       	ldi	r30, 0x17	; 23
    2a60:	f3 e0       	ldi	r31, 0x03	; 3
    2a62:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a0 e0       	ldi	r26, 0x00	; 0
    2a68:	b0 e4       	ldi	r27, 0x40	; 64
    2a6a:	85 8b       	std	Z+21, r24	; 0x15
    2a6c:	96 8b       	std	Z+22, r25	; 0x16
    2a6e:	a7 8b       	std	Z+23, r26	; 0x17
    2a70:	b0 8f       	std	Z+24, r27	; 0x18
    2a72:	11 8e       	std	Z+25, r1	; 0x19
    2a74:	12 8e       	std	Z+26, r1	; 0x1a
    2a76:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    2a78:	14 8e       	std	Z+28, r1	; 0x1c
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    2a80:	b1 e4       	ldi	r27, 0x41	; 65
    2a82:	85 8f       	std	Z+29, r24	; 0x1d
    2a84:	96 8f       	std	Z+30, r25	; 0x1e
    2a86:	a7 8f       	std	Z+31, r26	; 0x1f
    2a88:	b0 a3       	std	Z+32, r27	; 0x20
    2a8a:	87 e0       	ldi	r24, 0x07	; 7
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				//////uart0_puts("back to lz2\t");
				compass.setPid(2.0,0,30);//2.0
					//movy(5300,Back,LZ2toTZ3);
					robotState = moving;
    2a92:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2a96:	88 e6       	ldi	r24, 0x68	; 104
    2a98:	92 e0       	ldi	r25, 0x02	; 2
    2a9a:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
					if(abs(encoderY.getdistance()) >= 4000){
    2a9e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    2aa2:	9b 01       	movw	r18, r22
    2aa4:	77 23       	and	r23, r23
    2aa6:	24 f4       	brge	.+8      	; 0x2ab0 <_Z18gorockthegamefieldv+0x7ea>
    2aa8:	22 27       	eor	r18, r18
    2aaa:	33 27       	eor	r19, r19
    2aac:	26 1b       	sub	r18, r22
    2aae:	37 0b       	sbc	r19, r23
    2ab0:	20 3a       	cpi	r18, 0xA0	; 160
    2ab2:	3f 40       	sbci	r19, 0x0F	; 15
    2ab4:	0c f4       	brge	.+2      	; 0x2ab8 <_Z18gorockthegamefieldv+0x7f2>
    2ab6:	dd c1       	rjmp	.+954    	; 0x2e72 <_Z18gorockthegamefieldv+0xbac>
    2ab8:	78 94       	sei
    2aba:	e8 e6       	ldi	r30, 0x68	; 104
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2abe:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    2ac0:	84 60       	ori	r24, 0x04	; 4
    2ac2:	80 83       	st	Z, r24
    2ac4:	ed e6       	ldi	r30, 0x6D	; 109
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    2aca:	80 68       	ori	r24, 0x80	; 128
    2acc:	80 83       	st	Z, r24
    2ace:	08 95       	ret
    2ad0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <task9>
    2ad4:	88 23       	and	r24, r24
					}
				//////uart0_puts("\r\n");
			}
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <_Z18gorockthegamefieldv+0x814>
    2ad8:	cc c1       	rjmp	.+920    	; 0x2e72 <_Z18gorockthegamefieldv+0xbac>
    2ada:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2ade:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2ae2:	07 97       	sbiw	r24, 0x07	; 7
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <_Z18gorockthegamefieldv+0x822>
    2ae6:	c5 c1       	rjmp	.+906    	; 0x2e72 <_Z18gorockthegamefieldv+0xbac>
    2ae8:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2aec:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
    2af0:	04 97       	sbiw	r24, 0x04	; 4
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <_Z18gorockthegamefieldv+0x830>
    2af4:	be c1       	rjmp	.+892    	; 0x2e72 <_Z18gorockthegamefieldv+0xbac>
    2af6:	7f c1       	rjmp	.+766    	; 0x2df6 <_Z18gorockthegamefieldv+0xb30>
    2af8:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <task4>
	
	
	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    2afc:	81 11       	cpse	r24, r1
    2afe:	f8 cb       	rjmp	.-2064   	; 0x22f0 <_Z18gorockthegamefieldv+0x2a>
    2b00:	04 cc       	rjmp	.-2040   	; 0x230a <_Z18gorockthegamefieldv+0x44>
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <GoThrowingZone1>
			
			/*if there is manual robot infront of automatic robot*/
			
			else{
				/*if there is manual robot ahead of automatic robot then goto throwing zone1*/
				GoThrowingZone1 = true;
    2b08:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <task4>
				task3 = task4 = false;
    2b0c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <task3>
    2b10:	1d db       	rcall	.-2502   	; 0x214c <_Z14updateZoneflagv>
    2b12:	31 cc       	rjmp	.-1950   	; 0x2376 <_Z18gorockthegamefieldv+0xb0>
				updateZoneflag();
    2b14:	85 e0       	ldi	r24, 0x05	; 5
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
		but yet to complete task5*/ 
		if(task4 && !task5){
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
				/*go directly to loading zone 2 and manual robot is waiting there*/
				where = inLZ1;
    2b1c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <gotoLZ2>
				gotoLZ2 = true;
    2b26:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <ShuttleCockGiven>
    2b2a:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <ShuttleCockArmGone>
				ShuttleCockGiven = true;	
    2b2e:	23 cc       	rjmp	.-1978   	; 0x2376 <_Z18gorockthegamefieldv+0xb0>
				ShuttleCockArmGone = true;
    2b30:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <alwaysTZ2>
    2b34:	81 11       	cpse	r24, r1
				updateZoneflag();
				Hold_Position();
 			}
			//if always throw from throwing zone 2
			//automatic robot must force to know there is manual robot ahead.
			else if(alwaysTZ2){
    2b36:	14 cc       	rjmp	.-2008   	; 0x2360 <_Z18gorockthegamefieldv+0x9a>
    2b38:	19 cc       	rjmp	.-1998   	; 0x236c <_Z18gorockthegamefieldv+0xa6>
    2b3a:	e7 e1       	ldi	r30, 0x17	; 23
    2b3c:	f3 e0       	ldi	r31, 0x03	; 3
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	a0 e0       	ldi	r26, 0x00	; 0
    2b44:	b0 e4       	ldi	r27, 0x40	; 64
    2b46:	85 8b       	std	Z+21, r24	; 0x15
    2b48:	96 8b       	std	Z+22, r25	; 0x16
    2b4a:	a7 8b       	std	Z+23, r26	; 0x17
    2b4c:	b0 8f       	std	Z+24, r27	; 0x18
    2b4e:	11 8e       	std	Z+25, r1	; 0x19
    2b50:	12 8e       	std	Z+26, r1	; 0x1a
    2b52:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    2b54:	14 8e       	std	Z+28, r1	; 0x1c
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    2b5c:	b1 e4       	ldi	r27, 0x41	; 65
    2b5e:	85 8f       	std	Z+29, r24	; 0x1d
    2b60:	96 8f       	std	Z+30, r25	; 0x1e
    2b62:	a7 8f       	std	Z+31, r26	; 0x1f
    2b64:	b0 a3       	std	Z+32, r27	; 0x20
    2b66:	48 ec       	ldi	r20, 0xC8	; 200
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	62 e0       	ldi	r22, 0x02	; 2
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
		compass.setPid(2.0,0,30);
		////uart0_puts("hello\r\n");
		movx(Throwingzone1.x,Front,STARTZONEtoCORNER);
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	88 ef       	ldi	r24, 0xF8	; 248
    2b70:	91 e1       	ldi	r25, 0x11	; 17
    2b72:	0e 94 1d 08 	call	0x103a	; 0x103a <_Z4movxiij>
    2b76:	87 e0       	ldi	r24, 0x07	; 7
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		//movDegree(8);
		robotState = moving;
    2b7e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2b82:	80 e7       	ldi	r24, 0x70	; 112
    2b84:	92 e0       	ldi	r25, 0x02	; 2
    2b86:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
		////uart0_puts("going ahead \t");
		if(abs(encoderX.getdistance()) >= 4400){
    2b8a:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    2b8e:	9b 01       	movw	r18, r22
    2b90:	77 23       	and	r23, r23
    2b92:	24 f4       	brge	.+8      	; 0x2b9c <_Z18gorockthegamefieldv+0x8d6>
    2b94:	22 27       	eor	r18, r18
    2b96:	33 27       	eor	r19, r19
    2b98:	26 1b       	sub	r18, r22
    2b9a:	37 0b       	sbc	r19, r23
    2b9c:	20 33       	cpi	r18, 0x30	; 48
    2b9e:	31 41       	sbci	r19, 0x11	; 17
    2ba0:	0c f0       	brlt	.+2      	; 0x2ba4 <_Z18gorockthegamefieldv+0x8de>
    2ba2:	fd cb       	rjmp	.-2054   	; 0x239e <_Z18gorockthegamefieldv+0xd8>
    2ba4:	38 cd       	rjmp	.-1424   	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    2ba6:	ed e6       	ldi	r30, 0x6D	; 109
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2bac:	8f 77       	andi	r24, 0x7F	; 127
    2bae:	80 83       	st	Z, r24
    2bb0:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <startingAtFront>
    2bb4:	86 e0       	ldi	r24, 0x06	; 6
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
		linetrackerYjunctionWatchOff();
		//uart3_putc('h');
		startingAtFront = false;
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
		where = inLZ2;
    2bbc:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2bc0:	88 e0       	ldi	r24, 0x08	; 8
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		robotState = notmoving;
    2bc8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2bcc:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2bd0:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
		BrakeMotor();
    2bd4:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2bd8:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2bdc:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2be0:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <directlyLZ2>
    2be4:	81 11       	cpse	r24, r1
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
    2be6:	c5 cc       	rjmp	.-1654   	; 0x2572 <_Z18gorockthegamefieldv+0x2ac>
    2be8:	d2 cc       	rjmp	.-1628   	; 0x258e <_Z18gorockthegamefieldv+0x2c8>
    2bea:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <task3>
    2bee:	88 23       	and	r24, r24
					////uart0_puts("INT ON");
				}
				////uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <_Z18gorockthegamefieldv+0x92e>
    2bf2:	48 cd       	rjmp	.-1392   	; 0x2684 <_Z18gorockthegamefieldv+0x3be>
    2bf4:	36 cd       	rjmp	.-1428   	; 0x2662 <_Z18gorockthegamefieldv+0x39c>
    2bf6:	87 e0       	ldi	r24, 0x07	; 7
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
	if(ShuttleCockGiven && ShuttleCockArmGone)
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
				robotState = moving;
    2bfa:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2bfe:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c02:	44 e6       	ldi	r20, 0x64	; 100
    2c04:	50 e0       	ldi	r21, 0x00	; 0
				Move_Yaxis(Throwingzone1.y+50,Front,LZ1toTZ1);
    2c06:	62 e0       	ldi	r22, 0x02	; 2
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	80 ed       	ldi	r24, 0xD0	; 208
    2c0c:	97 e0       	ldi	r25, 0x07	; 7
    2c0e:	88 d8       	rcall	.-3824   	; 0x1d20 <_Z10Move_Yaxisiij>
    2c10:	88 e6       	ldi	r24, 0x68	; 104
    2c12:	92 e0       	ldi	r25, 0x02	; 2
    2c14:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				//movy(Throwingzone1.y,Front,LZ1toTZ1);
				//uart0_puts("going tz1\t");
				if(abs(encoderY.getdistance()) >= 1600){
    2c18:	0e 94 62 20 	call	0x40c4	; 0x40c4 <__fixsfsi>
    2c1c:	9b 01       	movw	r18, r22
    2c1e:	77 23       	and	r23, r23
    2c20:	24 f4       	brge	.+8      	; 0x2c2a <_Z18gorockthegamefieldv+0x964>
    2c22:	22 27       	eor	r18, r18
    2c24:	33 27       	eor	r19, r19
    2c26:	26 1b       	sub	r18, r22
    2c28:	37 0b       	sbc	r19, r23
    2c2a:	20 34       	cpi	r18, 0x40	; 64
    2c2c:	36 40       	sbci	r19, 0x06	; 6
    2c2e:	0c f0       	brlt	.+2      	; 0x2c32 <_Z18gorockthegamefieldv+0x96c>
    2c30:	0c cd       	rjmp	.-1512   	; 0x264a <_Z18gorockthegamefieldv+0x384>
    2c32:	28 cd       	rjmp	.-1456   	; 0x2684 <_Z18gorockthegamefieldv+0x3be>
    2c34:	ed e6       	ldi	r30, 0x6D	; 109
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8f 77       	andi	r24, 0x7F	; 127
    2c3c:	80 83       	st	Z, r24
    2c3e:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2c42:	82 e0       	ldi	r24, 0x02	; 2
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
				linetrackerYjunctionWatchOff();
				////uart0_puts("reached throwing zone 1\r\n");
				BrakeMotor();
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
				//uart3_putc('1');
				where = inTZ1;
    2c4a:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2c4e:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
    2c52:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2c56:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2c5a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2c5e:	88 e0       	ldi	r24, 0x08	; 8
    2c60:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2c62:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2c66:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c6a:	0c cd       	rjmp	.-1512   	; 0x2684 <_Z18gorockthegamefieldv+0x3be>
    2c6c:	41 da       	rcall	.-2942   	; 0x20f0 <_Z13Hold_Positionv>
    2c6e:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_b_Transmit_once>
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
			//	//uart0_puts("Throwing \r\n");
				Hold_Position();
    2c72:	88 23       	and	r24, r24

				if(_b_Transmit_once)	//Stable_Robot() && 
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <_Z18gorockthegamefieldv+0x9b2>
    2c76:	18 cd       	rjmp	.-1488   	; 0x26a8 <_Z18gorockthegamefieldv+0x3e2>
    2c78:	12 cd       	rjmp	.-1500   	; 0x269e <_Z18gorockthegamefieldv+0x3d8>
    2c7a:	ed e6       	ldi	r30, 0x6D	; 109
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	8f 77       	andi	r24, 0x7F	; 127
    2c82:	80 83       	st	Z, r24
    2c84:	85 e0       	ldi	r24, 0x05	; 5
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
				////uart0_puts("REached loading zone 1\r\n");
				linetrackerYjunctionWatchOff();
				where = inLZ1;
    2c8c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2c90:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2c94:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
				BrakeMotor();
    2c98:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2c9c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2ca0:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2ca4:	88 e0       	ldi	r24, 0x08	; 8
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2cac:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2cb0:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <ShuttleCockGiven>
    2cb4:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <ShuttleCockArmGone>
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2cb8:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <backtoLZ1>
				ShuttleCockArmGone = false;
    2cbc:	8d cd       	rjmp	.-1254   	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
				backtoLZ1 = false;
    2cbe:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <gotoLZ2>
    2cc2:	81 11       	cpse	r24, r1
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2cc4:	4a cd       	rjmp	.-1388   	; 0x275a <_Z18gorockthegamefieldv+0x494>
    2cc6:	77 cd       	rjmp	.-1298   	; 0x27b6 <_Z18gorockthegamefieldv+0x4f0>
    2cc8:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <gotoLZ2>
    2ccc:	eb e6       	ldi	r30, 0x6B	; 107
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
				////uart0_puts("reached loading zone 2\r\n");
				gotoLZ2 = false;
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2cd2:	8f 7e       	andi	r24, 0xEF	; 239
    2cd4:	80 83       	st	Z, r24
    2cd6:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2cda:	86 e0       	ldi	r24, 0x06	; 6
				linetrackerXjunctionWatchOff();
				BrakeMotor();
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
				where = inLZ2;
    2ce2:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2ce6:	88 e0       	ldi	r24, 0x08	; 8
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				robotState = notmoving;
    2cee:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2cf2:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
    2cf6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2cfa:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2cfe:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2d02:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <ShuttleCockGiven>
    2d06:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <ShuttleCockArmGone>
				encoderX.resetCount();
				encoderY.resetCount();
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2d0a:	66 cd       	rjmp	.-1332   	; 0x27d8 <_Z18gorockthegamefieldv+0x512>
				ShuttleCockArmGone = false;
    2d0c:	83 e0       	ldi	r24, 0x03	; 3
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
				////uart0_puts("Reached tz2 \r\n");
				where = inTZ2;
    2d14:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2d18:	ed e6       	ldi	r30, 0x6D	; 109
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2d1e:	8f 77       	andi	r24, 0x7F	; 127
    2d20:	80 83       	st	Z, r24
    2d22:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
    2d26:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2d2a:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2d2e:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2d32:	88 e0       	ldi	r24, 0x08	; 8
    2d34:	90 e0       	ldi	r25, 0x00	; 0
				linetrackerYjunctionWatchOff();
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2d36:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2d3a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2d3e:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
				BrakeMotor();
    2d42:	90 cd       	rjmp	.-1248   	; 0x2864 <_Z18gorockthegamefieldv+0x59e>
    2d44:	ef e9       	ldi	r30, 0x9F	; 159
			if(where == inTZ2 && robotState == notmoving){
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				velocity_robot[0] =0;
    2d46:	f3 e0       	ldi	r31, 0x03	; 3
    2d48:	11 82       	std	Z+1, r1	; 0x01
    2d4a:	10 82       	st	Z, r1
    2d4c:	13 82       	std	Z+3, r1	; 0x03
				velocity_robot[1]=0;
    2d4e:	12 82       	std	Z+2, r1	; 0x02
    2d50:	cf d9       	rcall	.-3170   	; 0x20f0 <_Z13Hold_Positionv>
				Hold_Position();
    2d52:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_b_Transmit_once>
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
    2d56:	88 23       	and	r24, r24
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <_Z18gorockthegamefieldv+0xa96>
    2d5a:	9e cd       	rjmp	.-1220   	; 0x2898 <_Z18gorockthegamefieldv+0x5d2>
    2d5c:	90 cd       	rjmp	.-1248   	; 0x287e <_Z18gorockthegamefieldv+0x5b8>
    2d5e:	c8 d9       	rcall	.-3184   	; 0x20f0 <_Z13Hold_Positionv>
    2d60:	ed e6       	ldi	r30, 0x6D	; 109
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
				Hold_Position();
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	8f 77       	andi	r24, 0x7F	; 127
    2d68:	80 83       	st	Z, r24
    2d6a:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2d6e:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
				////uart0_puts("reached loading zone 2 \r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2d72:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2d76:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2d7a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2d7e:	86 e0       	ldi	r24, 0x06	; 6
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2d86:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2d8a:	88 e0       	ldi	r24, 0x08	; 8
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				robotState = notmoving;
    2d92:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2d96:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <ShuttleCockGiven>
    2d9a:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <ShuttleCockArmGone>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2d9e:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <backtoLZ2>
				ShuttleCockArmGone = false;
    2da2:	cf cd       	rjmp	.-1122   	; 0x2942 <_Z18gorockthegamefieldv+0x67c>
				backtoLZ2 = false;
    2da4:	ed e6       	ldi	r30, 0x6D	; 109
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	8f 77       	andi	r24, 0x7F	; 127
    2dac:	80 83       	st	Z, r24
    2dae:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2db2:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
				////uart0_puts("reached tz3\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2db6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2dba:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2dbe:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2dc2:	88 e0       	ldi	r24, 0x08	; 8
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2dca:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2dce:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <GoThrowingZone3>
    2dd2:	84 e0       	ldi	r24, 0x04	; 4
				GoThrowingZone3 = false;
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
				where = inTZ3;
    2dda:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2dde:	32 ce       	rjmp	.-924    	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
    2de0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <_Z21Goto_Fence_And_Detectv>
    2de4:	81 11       	cpse	r24, r1
				//velocity_robot[0] = velocity_robot[1] = velocity_robot[2] = 0;
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2de6:	10 ce       	rjmp	.-992    	; 0x2a08 <_Z18gorockthegamefieldv+0x742>
    2de8:	13 ce       	rjmp	.-986    	; 0x2a10 <_Z18gorockthegamefieldv+0x74a>
    2dea:	83 e3       	ldi	r24, 0x33	; 51
    2dec:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <_Z10uart3_putch>
				{	
					uart3_putc('3');
    2df0:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_b_Transmit_once>
    2df4:	0d ce       	rjmp	.-998    	; 0x2a10 <_Z18gorockthegamefieldv+0x74a>
					_b_Transmit_once = false;
    2df6:	ed e6       	ldi	r30, 0x6D	; 109
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	8f 77       	andi	r24, 0x7F	; 127
    2dfe:	80 83       	st	Z, r24
    2e00:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2e04:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
				//////uart0_puts("reached loading zone 2\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2e08:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2e0c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2e10:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
    2e14:	86 e0       	ldi	r24, 0x06	; 6
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <where+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2e1c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <where>
    2e20:	88 e0       	ldi	r24, 0x08	; 8
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				robotState = notmoving;
    2e28:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2e2c:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <ShuttleCockGiven>
    2e30:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <ShuttleCockArmGone>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2e34:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <backtoLZ2>
				ShuttleCockArmGone = false;
    2e38:	08 95       	ret
				backtoLZ2 = false;
    2e3a:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <where>
    2e3e:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <where+0x1>
		BrakeMotor();
		Hold_Position();
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    2e42:	21 30       	cpi	r18, 0x01	; 1
    2e44:	31 05       	cpc	r19, r1
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <_Z18gorockthegamefieldv+0xb84>
    2e48:	e6 cb       	rjmp	.-2100   	; 0x2616 <_Z18gorockthegamefieldv+0x350>
    2e4a:	7c cb       	rjmp	.-2312   	; 0x2544 <_Z18gorockthegamefieldv+0x27e>
    2e4c:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <directlyLZ2>
    2e50:	99 23       	and	r25, r25
			linetrackerXjunctionWatch();
			////uart0_puts("int on");
		}
		////uart0_puts("\r\n");
	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <_Z18gorockthegamefieldv+0xb90>
    2e54:	b4 ca       	rjmp	.-2712   	; 0x23be <_Z18gorockthegamefieldv+0xf8>
    2e56:	c1 ca       	rjmp	.-2686   	; 0x23da <_Z18gorockthegamefieldv+0x114>
    2e58:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <directlyLZ2>
    2e5c:	91 11       	cpse	r25, r1
    2e5e:	eb ca       	rjmp	.-2602   	; 0x2436 <_Z18gorockthegamefieldv+0x170>
    2e60:	ae ca       	rjmp	.-2724   	; 0x23be <_Z18gorockthegamefieldv+0xf8>
    2e62:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <where>
    2e66:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <where+0x1>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2e6a:	04 97       	sbiw	r24, 0x04	; 4
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <_Z18gorockthegamefieldv+0xbaa>
    2e6e:	ea cd       	rjmp	.-1068   	; 0x2a44 <_Z18gorockthegamefieldv+0x77e>
    2e70:	c4 cd       	rjmp	.-1144   	; 0x29fa <_Z18gorockthegamefieldv+0x734>
    2e72:	08 95       	ret

00002e74 <__vector_9>:
    2e74:	1f 92       	push	r1
    2e76:	0f 92       	push	r0
    2e78:	0f b6       	in	r0, 0x3f	; 63
}


/*When Junction on Linetracker X is detected*/
ISR(PCINT0_vect)		
{
    2e7a:	0f 92       	push	r0
    2e7c:	11 24       	eor	r1, r1
    2e7e:	0b b6       	in	r0, 0x3b	; 59
    2e80:	0f 92       	push	r0
    2e82:	2f 93       	push	r18
    2e84:	3f 93       	push	r19
    2e86:	4f 93       	push	r20
    2e88:	5f 93       	push	r21
    2e8a:	6f 93       	push	r22
    2e8c:	7f 93       	push	r23
    2e8e:	8f 93       	push	r24
    2e90:	9f 93       	push	r25
    2e92:	af 93       	push	r26
    2e94:	bf 93       	push	r27
    2e96:	ef 93       	push	r30
    2e98:	ff 93       	push	r31
	if(!task1){
    2e9a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <task1>
    2e9e:	81 11       	cpse	r24, r1
    2ea0:	06 c0       	rjmp	.+12     	; 0x2eae <__vector_9+0x3a>
		task1 = true;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <task1>
		//reached to corner of loading zone1
		FlagChangeSetpointCompass = true;
    2ea8:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <FlagChangeSetpointCompass>
    2eac:	22 c0       	rjmp	.+68     	; 0x2ef2 <__vector_9+0x7e>
	}
	else if(!task5){
    2eae:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <task5>
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	08 c0       	rjmp	.+16     	; 0x2ec6 <__vector_9+0x52>
		task5 = true;			//reached loading zone 2 from loading zone 1
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <task5>
		FlagChangeSetpointCompass = true;
    2ebc:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <FlagChangeSetpointCompass>
		BrakeMotor();
    2ec0:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2ec4:	16 c0       	rjmp	.+44     	; 0x2ef2 <__vector_9+0x7e>
	}
	else if(!xJunctionMeetFromTZ2){
    2ec6:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <xJunctionMeetFromTZ2>
    2eca:	81 11       	cpse	r24, r1
    2ecc:	12 c0       	rjmp	.+36     	; 0x2ef2 <__vector_9+0x7e>
		xJunctionMeetFromTZ2 = true;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <xJunctionMeetFromTZ2>
		BrakeMotor();
    2ed4:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2ed8:	eb e6       	ldi	r30, 0x6B	; 107
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	8f 7e       	andi	r24, 0xEF	; 239
    2ee0:	80 83       	st	Z, r24
    2ee2:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
    2ee6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
    2eea:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    2eee:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
		linetrackerXjunctionWatchOff();
		encoderX.resetCount();
		encoderY.resetCount();
	}
}
    2ef2:	ff 91       	pop	r31
    2ef4:	ef 91       	pop	r30
    2ef6:	bf 91       	pop	r27
    2ef8:	af 91       	pop	r26
    2efa:	9f 91       	pop	r25
    2efc:	8f 91       	pop	r24
    2efe:	7f 91       	pop	r23
    2f00:	6f 91       	pop	r22
    2f02:	5f 91       	pop	r21
    2f04:	4f 91       	pop	r20
    2f06:	3f 91       	pop	r19
    2f08:	2f 91       	pop	r18
    2f0a:	0f 90       	pop	r0
    2f0c:	0b be       	out	0x3b, r0	; 59
    2f0e:	0f 90       	pop	r0
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	0f 90       	pop	r0
    2f14:	1f 90       	pop	r1
    2f16:	18 95       	reti

00002f18 <__vector_11>:


/*When Junction on Linetracker Y is detected*/
ISR(PCINT2_vect)
{
    2f18:	1f 92       	push	r1
    2f1a:	0f 92       	push	r0
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	0f 92       	push	r0
    2f20:	11 24       	eor	r1, r1
    2f22:	0b b6       	in	r0, 0x3b	; 59
    2f24:	0f 92       	push	r0
    2f26:	2f 93       	push	r18
    2f28:	3f 93       	push	r19
    2f2a:	4f 93       	push	r20
    2f2c:	5f 93       	push	r21
    2f2e:	6f 93       	push	r22
    2f30:	7f 93       	push	r23
    2f32:	8f 93       	push	r24
    2f34:	9f 93       	push	r25
    2f36:	af 93       	push	r26
    2f38:	bf 93       	push	r27
    2f3a:	ef 93       	push	r30
    2f3c:	ff 93       	push	r31
	if(!task2){
    2f3e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <task2>
    2f42:	81 11       	cpse	r24, r1
    2f44:	06 c0       	rjmp	.+12     	; 0x2f52 <__vector_11+0x3a>
		task2 = true;		//reached to loading zone 1
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <task2>
		BrakeMotor();
    2f4c:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2f50:	41 c0       	rjmp	.+130    	; 0x2fd4 <__vector_11+0xbc>
	}
	else if(!task3){
    2f52:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <task3>
    2f56:	81 11       	cpse	r24, r1
    2f58:	08 c0       	rjmp	.+16     	; 0x2f6a <__vector_11+0x52>
		_b_Transmit_once = true;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_b_Transmit_once>
		task3 = true;		//reached throwing zone 1
    2f60:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <task3>
		BrakeMotor();
    2f64:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2f68:	35 c0       	rjmp	.+106    	; 0x2fd4 <__vector_11+0xbc>
	}
		
	else if(!task4){
    2f6a:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <task4>
    2f6e:	81 11       	cpse	r24, r1
    2f70:	06 c0       	rjmp	.+12     	; 0x2f7e <__vector_11+0x66>
		task4 = true;		//reached loading zone 1 from throwing zone 1
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <task4>
		 BrakeMotor();
    2f78:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2f7c:	2b c0       	rjmp	.+86     	; 0x2fd4 <__vector_11+0xbc>
	}
	else if(!task6){
    2f7e:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <task6>
    2f82:	81 11       	cpse	r24, r1
    2f84:	08 c0       	rjmp	.+16     	; 0x2f96 <__vector_11+0x7e>
		_b_Transmit_once = true;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_b_Transmit_once>
		task6 = true;		//reached throwing zone 2
    2f8c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <task6>
		BrakeMotor();
    2f90:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2f94:	1f c0       	rjmp	.+62     	; 0x2fd4 <__vector_11+0xbc>
	}
		
	else if(!task7){
    2f96:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <task7>
    2f9a:	81 11       	cpse	r24, r1
    2f9c:	06 c0       	rjmp	.+12     	; 0x2faa <__vector_11+0x92>
		task7 = true;		//reached loading zone 2 from throwing zone 2
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <task7>
		BrakeMotor();
    2fa4:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2fa8:	15 c0       	rjmp	.+42     	; 0x2fd4 <__vector_11+0xbc>
	}
	else if(!task8){
    2faa:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <task8>
    2fae:	81 11       	cpse	r24, r1
    2fb0:	08 c0       	rjmp	.+16     	; 0x2fc2 <__vector_11+0xaa>
		_b_Transmit_once = true;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_b_Transmit_once>
		task8 = true;		//reached throwing zone 3
    2fb8:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <task8>
		BrakeMotor();
    2fbc:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
    2fc0:	09 c0       	rjmp	.+18     	; 0x2fd4 <__vector_11+0xbc>
	}
	else if(!task9){
    2fc2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <task9>
    2fc6:	81 11       	cpse	r24, r1
    2fc8:	05 c0       	rjmp	.+10     	; 0x2fd4 <__vector_11+0xbc>
		task9 = true;		//reached loading zone 2 from throwing zone 3
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <task9>
		BrakeMotor();
    2fd0:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z10BrakeMotorv>
	}
}
    2fd4:	ff 91       	pop	r31
    2fd6:	ef 91       	pop	r30
    2fd8:	bf 91       	pop	r27
    2fda:	af 91       	pop	r26
    2fdc:	9f 91       	pop	r25
    2fde:	8f 91       	pop	r24
    2fe0:	7f 91       	pop	r23
    2fe2:	6f 91       	pop	r22
    2fe4:	5f 91       	pop	r21
    2fe6:	4f 91       	pop	r20
    2fe8:	3f 91       	pop	r19
    2fea:	2f 91       	pop	r18
    2fec:	0f 90       	pop	r0
    2fee:	0b be       	out	0x3b, r0	; 59
    2ff0:	0f 90       	pop	r0
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	0f 90       	pop	r0
    2ff6:	1f 90       	pop	r1
    2ff8:	18 95       	reti

00002ffa <main>:
////////////////////////////////////////////

int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
	INPUT(SHUTTLECOCKPIN);
    2ffa:	aa e0       	ldi	r26, 0x0A	; 10
    2ffc:	b1 e0       	ldi	r27, 0x01	; 1
    2ffe:	8c 91       	ld	r24, X
    3000:	8f 7b       	andi	r24, 0xBF	; 191
    3002:	8c 93       	st	X, r24
	INPUT(ZONEPIN);
    3004:	8c 91       	ld	r24, X
    3006:	8f 7e       	andi	r24, 0xEF	; 239
    3008:	8c 93       	st	X, r24
 	SET(SHUTTLECOCKPIN);
    300a:	eb e0       	ldi	r30, 0x0B	; 11
    300c:	f1 e0       	ldi	r31, 0x01	; 1
    300e:	80 81       	ld	r24, Z
    3010:	80 64       	ori	r24, 0x40	; 64
    3012:	80 83       	st	Z, r24
 	SET(ZONEPIN);
    3014:	80 81       	ld	r24, Z
    3016:	80 61       	ori	r24, 0x10	; 16
    3018:	80 83       	st	Z, r24
	///////PULL DOWN RACK PIN 
	INPUT(RACKPIN);
    301a:	8c 91       	ld	r24, X
    301c:	8b 7f       	andi	r24, 0xFB	; 251
    301e:	8c 93       	st	X, r24
	CLEAR(RACKPIN);
    3020:	80 81       	ld	r24, Z
    3022:	8b 7f       	andi	r24, 0xFB	; 251
    3024:	80 83       	st	Z, r24
	
	///Turn internal pullup for limit switch pin
	INPUT(RIGHT_LIMIT_SW);
    3026:	e1 e0       	ldi	r30, 0x01	; 1
    3028:	f1 e0       	ldi	r31, 0x01	; 1
    302a:	80 81       	ld	r24, Z
    302c:	87 7f       	andi	r24, 0xF7	; 247
    302e:	80 83       	st	Z, r24
	INPUT(LEFT_LIMIT_SW);
    3030:	6b 98       	cbi	0x0d, 3	; 13
	SET(RIGHT_LIMIT_SW);
    3032:	e2 e0       	ldi	r30, 0x02	; 2
    3034:	f1 e0       	ldi	r31, 0x01	; 1
    3036:	80 81       	ld	r24, Z
    3038:	88 60       	ori	r24, 0x08	; 8
    303a:	80 83       	st	Z, r24
	SET(LEFT_LIMIT_SW);
    303c:	73 9a       	sbi	0x0e, 3	; 14
	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
	DDRK |= (1<<PK0);
    303e:	e7 e0       	ldi	r30, 0x07	; 7
    3040:	f1 e0       	ldi	r31, 0x01	; 1
    3042:	80 81       	ld	r24, Z
    3044:	81 60       	ori	r24, 0x01	; 1
    3046:	80 83       	st	Z, r24
	DDRK |= (1<<PK1);
    3048:	80 81       	ld	r24, Z
    304a:	82 60       	ori	r24, 0x02	; 2
    304c:	80 83       	st	Z, r24
	DDRK |= (1<<PK2);
    304e:	80 81       	ld	r24, Z
    3050:	84 60       	ori	r24, 0x04	; 4
    3052:	80 83       	st	Z, r24
	DDRK |= (1<<PK3);
    3054:	80 81       	ld	r24, Z
    3056:	88 60       	ori	r24, 0x08	; 8
    3058:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK0); 
    305a:	e8 e0       	ldi	r30, 0x08	; 8
    305c:	f1 e0       	ldi	r31, 0x01	; 1
    305e:	80 81       	ld	r24, Z
    3060:	8e 7f       	andi	r24, 0xFE	; 254
    3062:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK1); 
    3064:	80 81       	ld	r24, Z
    3066:	8d 7f       	andi	r24, 0xFD	; 253
    3068:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK3); 
    306a:	80 81       	ld	r24, Z
    306c:	87 7f       	andi	r24, 0xF7	; 247
    306e:	80 83       	st	Z, r24
	/// INITIALIZE ALL THE UART
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    3070:	87 e6       	ldi	r24, 0x67	; 103
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	65 d5       	rcall	.+2762   	; 0x3b40 <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
    3076:	89 e1       	ldi	r24, 0x19	; 25
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	16 d6       	rcall	.+3116   	; 0x3ca8 <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(38400,F_CPU));
    307c:	89 e1       	ldi	r24, 0x19	; 25
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	a2 d6       	rcall	.+3396   	; 0x3dc6 <_Z10uart3_initj>
	//INITIALIZE EVERYTHING ELSE

	sei();
	initializeAll();
    3082:	78 94       	sei
    3084:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13initializeAllv>

	char rcvdata = '.';
	
    while (1) 
    {	
   		gorockthegamefield();
    3088:	1e d9       	rcall	.-3524   	; 0x22c6 <_Z18gorockthegamefieldv>
    	calculatevel();
    308a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_Z12calculatevelv>
    308e:	fc cf       	rjmp	.-8      	; 0x3088 <main+0x8e>

00003090 <_GLOBAL__sub_I_compassPID>:
#include "hmccompass.h"
#include "MPU6050.h"
#include "General-function.h"


static MPU6050 mpu;
    3090:	81 ee       	ldi	r24, 0xE1	; 225
    3092:	93 e0       	ldi	r25, 0x03	; 3
    3094:	3d d0       	rcall	.+122    	; 0x3110 <_ZN7MPU6050C1Ev>
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    3096:	e9 e5       	ldi	r30, 0x59	; 89
    3098:	f3 e0       	ldi	r31, 0x03	; 3
    309a:	10 86       	std	Z+8, r1	; 0x08
    309c:	11 86       	std	Z+9, r1	; 0x09
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	80 8b       	std	Z+16, r24	; 0x10
    30a2:	e8 e3       	ldi	r30, 0x38	; 56
    30a4:	f3 e0       	ldi	r31, 0x03	; 3
    30a6:	10 86       	std	Z+8, r1	; 0x08
    30a8:	11 86       	std	Z+9, r1	; 0x09
    30aa:	80 8b       	std	Z+16, r24	; 0x10
    30ac:	e7 e1       	ldi	r30, 0x17	; 23
    30ae:	f3 e0       	ldi	r31, 0x03	; 3
    30b0:	10 86       	std	Z+8, r1	; 0x08
    30b2:	11 86       	std	Z+9, r1	; 0x09
    30b4:	80 8b       	std	Z+16, r24	; 0x10
    30b6:	e6 ef       	ldi	r30, 0xF6	; 246
    30b8:	f2 e0       	ldi	r31, 0x02	; 2
    30ba:	10 86       	std	Z+8, r1	; 0x08
    30bc:	11 86       	std	Z+9, r1	; 0x09
    30be:	80 8b       	std	Z+16, r24	; 0x10
    30c0:	e5 ed       	ldi	r30, 0xD5	; 213
    30c2:	f2 e0       	ldi	r31, 0x02	; 2
    30c4:	10 86       	std	Z+8, r1	; 0x08
    30c6:	11 86       	std	Z+9, r1	; 0x09
    30c8:	80 8b       	std	Z+16, r24	; 0x10
    30ca:	e0 eb       	ldi	r30, 0xB0	; 176
    30cc:	f2 e0       	ldi	r31, 0x02	; 2
    30ce:	10 86       	std	Z+8, r1	; 0x08
    30d0:	11 86       	std	Z+9, r1	; 0x09
    30d2:	80 8b       	std	Z+16, r24	; 0x10
    30d4:	ef e8       	ldi	r30, 0x8F	; 143
    30d6:	f2 e0       	ldi	r31, 0x02	; 2
    30d8:	10 86       	std	Z+8, r1	; 0x08
    30da:	11 86       	std	Z+9, r1	; 0x09
    30dc:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    30de:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <encoderX+0x1>
    30e2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <encoderX>
			Init_encoder_interrupt();
    30e6:	80 e7       	ldi	r24, 0x70	; 112
    30e8:	92 e0       	ldi	r25, 0x02	; 2
    30ea:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    30ee:	80 e7       	ldi	r24, 0x70	; 112
    30f0:	92 e0       	ldi	r25, 0x02	; 2
    30f2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    30f6:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__data_end+0x1>
    30fa:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
			Init_encoder_interrupt();
    30fe:	88 e6       	ldi	r24, 0x68	; 104
    3100:	92 e0       	ldi	r25, 0x02	; 2
    3102:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    3106:	88 e6       	ldi	r24, 0x68	; 104
    3108:	92 e0       	ldi	r25, 0x02	; 2
    310a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
    310e:	08 95       	ret

00003110 <_ZN7MPU6050C1Ev>:

// Get current threshold value
uint8_t MPU6050::getThreshold(void)
{
	return actualThreshold;
}
    3110:	fc 01       	movw	r30, r24
    3112:	14 ae       	std	Z+60, r1	; 0x3c
    3114:	15 ae       	std	Z+61, r1	; 0x3d
    3116:	16 ae       	std	Z+62, r1	; 0x3e
    3118:	17 ae       	std	Z+63, r1	; 0x3f
    311a:	dc 01       	movw	r26, r24
    311c:	a0 5c       	subi	r26, 0xC0	; 192
    311e:	bf 4f       	sbci	r27, 0xFF	; 255
    3120:	1d 92       	st	X+, r1
    3122:	1d 92       	st	X+, r1
    3124:	1d 92       	st	X+, r1
    3126:	1c 92       	st	X, r1
    3128:	13 97       	sbiw	r26, 0x03	; 3
    312a:	14 96       	adiw	r26, 0x04	; 4
    312c:	1d 92       	st	X+, r1
    312e:	1d 92       	st	X+, r1
    3130:	1d 92       	st	X+, r1
    3132:	1c 92       	st	X, r1
    3134:	13 97       	sbiw	r26, 0x03	; 3
    3136:	d4 96       	adiw	r26, 0x34	; 52
    3138:	1c 92       	st	X, r1
    313a:	d0 97       	sbiw	r26, 0x30	; 48
    313c:	1d 92       	st	X+, r1
    313e:	1d 92       	st	X+, r1
    3140:	1d 92       	st	X+, r1
    3142:	1c 92       	st	X, r1
    3144:	13 97       	sbiw	r26, 0x03	; 3
    3146:	14 96       	adiw	r26, 0x04	; 4
    3148:	1d 92       	st	X+, r1
    314a:	1d 92       	st	X+, r1
    314c:	1d 92       	st	X+, r1
    314e:	1c 92       	st	X, r1
    3150:	13 97       	sbiw	r26, 0x03	; 3
    3152:	14 96       	adiw	r26, 0x04	; 4
    3154:	1d 92       	st	X+, r1
    3156:	1d 92       	st	X+, r1
    3158:	1d 92       	st	X+, r1
    315a:	1c 92       	st	X, r1
    315c:	13 97       	sbiw	r26, 0x03	; 3
    315e:	10 aa       	std	Z+48, r1	; 0x30
    3160:	11 aa       	std	Z+49, r1	; 0x31
    3162:	12 aa       	std	Z+50, r1	; 0x32
    3164:	13 aa       	std	Z+51, r1	; 0x33
    3166:	14 aa       	std	Z+52, r1	; 0x34
    3168:	15 aa       	std	Z+53, r1	; 0x35
    316a:	16 aa       	std	Z+54, r1	; 0x36
    316c:	17 aa       	std	Z+55, r1	; 0x37
    316e:	10 ae       	std	Z+56, r1	; 0x38
    3170:	11 ae       	std	Z+57, r1	; 0x39
    3172:	12 ae       	std	Z+58, r1	; 0x3a
    3174:	13 ae       	std	Z+59, r1	; 0x3b
    3176:	94 96       	adiw	r26, 0x24	; 36
    3178:	1d 92       	st	X+, r1
    317a:	1d 92       	st	X+, r1
    317c:	1d 92       	st	X+, r1
    317e:	1c 92       	st	X, r1
    3180:	13 97       	sbiw	r26, 0x03	; 3
    3182:	18 97       	sbiw	r26, 0x08	; 8
    3184:	4f e3       	ldi	r20, 0x3F	; 63
    3186:	5e e1       	ldi	r21, 0x1E	; 30
    3188:	6a ef       	ldi	r22, 0xFA	; 250
    318a:	7b e3       	ldi	r23, 0x3B	; 59
    318c:	4d 93       	st	X+, r20
    318e:	5d 93       	st	X+, r21
    3190:	6d 93       	st	X+, r22
    3192:	7c 93       	st	X, r23
    3194:	13 97       	sbiw	r26, 0x03	; 3
    3196:	e0 59       	subi	r30, 0x90	; 144
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 e4       	ldi	r24, 0x40	; 64
    319c:	9a ed       	ldi	r25, 0xDA	; 218
    319e:	af e7       	ldi	r26, 0x7F	; 127
    31a0:	b8 e3       	ldi	r27, 0x38	; 56
    31a2:	80 83       	st	Z, r24
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	a2 83       	std	Z+2, r26	; 0x02
    31a8:	b3 83       	std	Z+3, r27	; 0x03
    31aa:	08 95       	ret

000031ac <_ZN7MPU60504InitEv>:
    31ac:	2f ef       	ldi	r18, 0xFF	; 255
    31ae:	82 e5       	ldi	r24, 0x52	; 82
    31b0:	97 e0       	ldi	r25, 0x07	; 7
    31b2:	21 50       	subi	r18, 0x01	; 1
    31b4:	80 40       	sbci	r24, 0x00	; 0
    31b6:	90 40       	sbci	r25, 0x00	; 0
    31b8:	e1 f7       	brne	.-8      	; 0x31b2 <_ZN7MPU60504InitEv+0x6>
    31ba:	00 c0       	rjmp	.+0      	; 0x31bc <_ZN7MPU60504InitEv+0x10>
    31bc:	00 00       	nop
    31be:	80 ed       	ldi	r24, 0xD0	; 208
    31c0:	cd d3       	rcall	.+1946   	; 0x395c <_Z9i2c_starth>
    31c2:	8b e6       	ldi	r24, 0x6B	; 107
    31c4:	38 d4       	rcall	.+2160   	; 0x3a36 <_Z9i2c_writeh>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	36 d4       	rcall	.+2156   	; 0x3a36 <_Z9i2c_writeh>
    31ca:	f1 d3       	rcall	.+2018   	; 0x39ae <_Z8i2c_stopv>
    31cc:	80 ed       	ldi	r24, 0xD0	; 208
    31ce:	c6 d3       	rcall	.+1932   	; 0x395c <_Z9i2c_starth>
    31d0:	89 e1       	ldi	r24, 0x19	; 25
    31d2:	31 d4       	rcall	.+2146   	; 0x3a36 <_Z9i2c_writeh>
    31d4:	89 e1       	ldi	r24, 0x19	; 25
    31d6:	2f d4       	rcall	.+2142   	; 0x3a36 <_Z9i2c_writeh>
    31d8:	ea d3       	rcall	.+2004   	; 0x39ae <_Z8i2c_stopv>
    31da:	80 ed       	ldi	r24, 0xD0	; 208
    31dc:	bf d3       	rcall	.+1918   	; 0x395c <_Z9i2c_starth>
    31de:	8a e1       	ldi	r24, 0x1A	; 26
    31e0:	2a d4       	rcall	.+2132   	; 0x3a36 <_Z9i2c_writeh>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	28 d4       	rcall	.+2128   	; 0x3a36 <_Z9i2c_writeh>
    31e6:	e3 d3       	rcall	.+1990   	; 0x39ae <_Z8i2c_stopv>
    31e8:	80 ed       	ldi	r24, 0xD0	; 208
    31ea:	b8 d3       	rcall	.+1904   	; 0x395c <_Z9i2c_starth>
    31ec:	8b e1       	ldi	r24, 0x1B	; 27
    31ee:	23 d4       	rcall	.+2118   	; 0x3a36 <_Z9i2c_writeh>
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	21 d4       	rcall	.+2114   	; 0x3a36 <_Z9i2c_writeh>
    31f4:	dc d3       	rcall	.+1976   	; 0x39ae <_Z8i2c_stopv>
    31f6:	80 ed       	ldi	r24, 0xD0	; 208
    31f8:	b1 d3       	rcall	.+1890   	; 0x395c <_Z9i2c_starth>
    31fa:	88 e3       	ldi	r24, 0x38	; 56
    31fc:	1c d4       	rcall	.+2104   	; 0x3a36 <_Z9i2c_writeh>
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	1a d4       	rcall	.+2100   	; 0x3a36 <_Z9i2c_writeh>
    3202:	d5 d3       	rcall	.+1962   	; 0x39ae <_Z8i2c_stopv>
    3204:	80 ed       	ldi	r24, 0xD0	; 208
    3206:	aa d3       	rcall	.+1876   	; 0x395c <_Z9i2c_starth>
    3208:	8c e1       	ldi	r24, 0x1C	; 28
    320a:	15 d4       	rcall	.+2090   	; 0x3a36 <_Z9i2c_writeh>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	13 d4       	rcall	.+2086   	; 0x3a36 <_Z9i2c_writeh>
    3210:	ce c3       	rjmp	.+1948   	; 0x39ae <_Z8i2c_stopv>
    3212:	08 95       	ret

00003214 <_ZN7MPU605017startReadLocationEh>:
    3214:	cf 93       	push	r28
    3216:	c6 2f       	mov	r28, r22
    3218:	80 ed       	ldi	r24, 0xD0	; 208
    321a:	d2 d3       	rcall	.+1956   	; 0x39c0 <_Z14i2c_start_waith>
    321c:	8c 2f       	mov	r24, r28
    321e:	0b d4       	rcall	.+2070   	; 0x3a36 <_Z9i2c_writeh>
    3220:	81 ed       	ldi	r24, 0xD1	; 209
    3222:	c3 d3       	rcall	.+1926   	; 0x39aa <_Z13i2c_rep_starth>
    3224:	cf 91       	pop	r28
    3226:	08 95       	ret

00003228 <_ZN7MPU605012readRawAccelEv>:
    3228:	af 92       	push	r10
    322a:	bf 92       	push	r11
    322c:	cf 92       	push	r12
    322e:	df 92       	push	r13
    3230:	ef 92       	push	r14
    3232:	ff 92       	push	r15
    3234:	0f 93       	push	r16
    3236:	1f 93       	push	r17
    3238:	cf 93       	push	r28
    323a:	df 93       	push	r29
    323c:	8c 01       	movw	r16, r24
    323e:	eb 01       	movw	r28, r22
    3240:	6b e3       	ldi	r22, 0x3B	; 59
    3242:	ce 01       	movw	r24, r28
    3244:	e7 df       	rcall	.-50     	; 0x3214 <_ZN7MPU605017startReadLocationEh>
    3246:	09 d4       	rcall	.+2066   	; 0x3a5a <_Z11i2c_readAckv>
    3248:	a8 2e       	mov	r10, r24
    324a:	07 d4       	rcall	.+2062   	; 0x3a5a <_Z11i2c_readAckv>
    324c:	b8 2e       	mov	r11, r24
    324e:	05 d4       	rcall	.+2058   	; 0x3a5a <_Z11i2c_readAckv>
    3250:	c8 2e       	mov	r12, r24
    3252:	03 d4       	rcall	.+2054   	; 0x3a5a <_Z11i2c_readAckv>
    3254:	e8 2e       	mov	r14, r24
    3256:	01 d4       	rcall	.+2050   	; 0x3a5a <_Z11i2c_readAckv>
    3258:	d8 2e       	mov	r13, r24
    325a:	0a d4       	rcall	.+2068   	; 0x3a70 <_Z11i2c_readNakv>
    325c:	f8 2e       	mov	r15, r24
    325e:	6b 2d       	mov	r22, r11
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	7a 29       	or	r23, r10
    3264:	07 2e       	mov	r0, r23
    3266:	00 0c       	add	r0, r0
    3268:	88 0b       	sbc	r24, r24
    326a:	99 0b       	sbc	r25, r25
    326c:	5e d7       	rcall	.+3772   	; 0x412a <__floatsisf>
    326e:	fe 01       	movw	r30, r28
    3270:	e8 5b       	subi	r30, 0xB8	; 184
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	20 81       	ld	r18, Z
    3276:	31 81       	ldd	r19, Z+1	; 0x01
    3278:	42 81       	ldd	r20, Z+2	; 0x02
    327a:	53 81       	ldd	r21, Z+3	; 0x03
    327c:	ed d5       	rcall	.+3034   	; 0x3e58 <__subsf3>
    327e:	68 83       	st	Y, r22
    3280:	79 83       	std	Y+1, r23	; 0x01
    3282:	8a 83       	std	Y+2, r24	; 0x02
    3284:	9b 83       	std	Y+3, r25	; 0x03
    3286:	6e 2d       	mov	r22, r14
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	7c 29       	or	r23, r12
    328c:	07 2e       	mov	r0, r23
    328e:	00 0c       	add	r0, r0
    3290:	88 0b       	sbc	r24, r24
    3292:	99 0b       	sbc	r25, r25
    3294:	4a d7       	rcall	.+3732   	; 0x412a <__floatsisf>
    3296:	fe 01       	movw	r30, r28
    3298:	e4 5b       	subi	r30, 0xB4	; 180
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	20 81       	ld	r18, Z
    329e:	31 81       	ldd	r19, Z+1	; 0x01
    32a0:	42 81       	ldd	r20, Z+2	; 0x02
    32a2:	53 81       	ldd	r21, Z+3	; 0x03
    32a4:	d9 d5       	rcall	.+2994   	; 0x3e58 <__subsf3>
    32a6:	6c 83       	std	Y+4, r22	; 0x04
    32a8:	7d 83       	std	Y+5, r23	; 0x05
    32aa:	8e 83       	std	Y+6, r24	; 0x06
    32ac:	9f 83       	std	Y+7, r25	; 0x07
    32ae:	6f 2d       	mov	r22, r15
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	7d 29       	or	r23, r13
    32b4:	07 2e       	mov	r0, r23
    32b6:	00 0c       	add	r0, r0
    32b8:	88 0b       	sbc	r24, r24
    32ba:	99 0b       	sbc	r25, r25
    32bc:	36 d7       	rcall	.+3692   	; 0x412a <__floatsisf>
    32be:	68 87       	std	Y+8, r22	; 0x08
    32c0:	79 87       	std	Y+9, r23	; 0x09
    32c2:	8a 87       	std	Y+10, r24	; 0x0a
    32c4:	9b 87       	std	Y+11, r25	; 0x0b
    32c6:	73 d3       	rcall	.+1766   	; 0x39ae <_Z8i2c_stopv>
    32c8:	8c e0       	ldi	r24, 0x0C	; 12
    32ca:	fe 01       	movw	r30, r28
    32cc:	d8 01       	movw	r26, r16
    32ce:	01 90       	ld	r0, Z+
    32d0:	0d 92       	st	X+, r0
    32d2:	8a 95       	dec	r24
    32d4:	e1 f7       	brne	.-8      	; 0x32ce <_ZN7MPU605012readRawAccelEv+0xa6>
    32d6:	c8 01       	movw	r24, r16
    32d8:	df 91       	pop	r29
    32da:	cf 91       	pop	r28
    32dc:	1f 91       	pop	r17
    32de:	0f 91       	pop	r16
    32e0:	ff 90       	pop	r15
    32e2:	ef 90       	pop	r14
    32e4:	df 90       	pop	r13
    32e6:	cf 90       	pop	r12
    32e8:	bf 90       	pop	r11
    32ea:	af 90       	pop	r10
    32ec:	08 95       	ret

000032ee <_ZN7MPU605018readNormalizeAccelEv>:
    32ee:	af 92       	push	r10
    32f0:	bf 92       	push	r11
    32f2:	cf 92       	push	r12
    32f4:	df 92       	push	r13
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	2c 97       	sbiw	r28, 0x0c	; 12
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	f8 94       	cli
    330c:	de bf       	out	0x3e, r29	; 62
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	5c 01       	movw	r10, r24
    3314:	8b 01       	movw	r16, r22
    3316:	ce 01       	movw	r24, r28
    3318:	01 96       	adiw	r24, 0x01	; 1
    331a:	86 df       	rcall	.-244    	; 0x3228 <_ZN7MPU605012readRawAccelEv>
    331c:	f8 01       	movw	r30, r16
    331e:	e0 59       	subi	r30, 0x90	; 144
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	c0 80       	ld	r12, Z
    3324:	d1 80       	ldd	r13, Z+1	; 0x01
    3326:	e2 80       	ldd	r14, Z+2	; 0x02
    3328:	f3 80       	ldd	r15, Z+3	; 0x03
    332a:	a7 01       	movw	r20, r14
    332c:	96 01       	movw	r18, r12
    332e:	f8 01       	movw	r30, r16
    3330:	60 81       	ld	r22, Z
    3332:	71 81       	ldd	r23, Z+1	; 0x01
    3334:	82 81       	ldd	r24, Z+2	; 0x02
    3336:	93 81       	ldd	r25, Z+3	; 0x03
    3338:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    333c:	f8 01       	movw	r30, r16
    333e:	60 8f       	std	Z+24, r22	; 0x18
    3340:	71 8f       	std	Z+25, r23	; 0x19
    3342:	82 8f       	std	Z+26, r24	; 0x1a
    3344:	93 8f       	std	Z+27, r25	; 0x1b
    3346:	a7 01       	movw	r20, r14
    3348:	96 01       	movw	r18, r12
    334a:	64 81       	ldd	r22, Z+4	; 0x04
    334c:	75 81       	ldd	r23, Z+5	; 0x05
    334e:	86 81       	ldd	r24, Z+6	; 0x06
    3350:	97 81       	ldd	r25, Z+7	; 0x07
    3352:	0e 94 ae 21 	call	0x435c	; 0x435c <__mulsf3>
    3356:	f8 01       	movw	r30, r16
    3358:	64 8f       	std	Z+28, r22	; 0x1c
    335a:	75 8f       	std	Z+29, r23	; 0x1d
    335c:	86 8f       	std	Z+30, r24	; 0x1e
    335e:	97 8f       	std	Z+31, r25	; 0x1f
    3360:	a7 01       	movw	r20, r14
    3362:	96 01       	movw	r18, r12
    3364:	60 85       	ldd	r22, Z+8	; 0x08
    3366:	71 85       	ldd	r23, Z+9	; 0x09
    3368:	82 85       	ldd	r24, Z+10	; 0x0a
    336a:	93 85       	ldd	r25, Z+11	; 0x0b
    336c:	f7 d7       	rcall	.+4078   	; 0x435c <__mulsf3>
    336e:	f8 01       	movw	r30, r16
    3370:	60 a3       	std	Z+32, r22	; 0x20
    3372:	71 a3       	std	Z+33, r23	; 0x21
    3374:	82 a3       	std	Z+34, r24	; 0x22
    3376:	93 a3       	std	Z+35, r25	; 0x23
    3378:	8c e0       	ldi	r24, 0x0C	; 12
    337a:	78 96       	adiw	r30, 0x18	; 24
    337c:	d5 01       	movw	r26, r10
    337e:	01 90       	ld	r0, Z+
    3380:	0d 92       	st	X+, r0
    3382:	8a 95       	dec	r24
    3384:	e1 f7       	brne	.-8      	; 0x337e <_ZN7MPU605018readNormalizeAccelEv+0x90>
    3386:	c5 01       	movw	r24, r10
    3388:	2c 96       	adiw	r28, 0x0c	; 12
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	ff 90       	pop	r15
    339e:	ef 90       	pop	r14
    33a0:	df 90       	pop	r13
    33a2:	cf 90       	pop	r12
    33a4:	bf 90       	pop	r11
    33a6:	af 90       	pop	r10
    33a8:	08 95       	ret

000033aa <_ZN7MPU605011readRawGyroEv>:
    33aa:	ff 92       	push	r15
    33ac:	0f 93       	push	r16
    33ae:	1f 93       	push	r17
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	8c 01       	movw	r16, r24
    33b6:	eb 01       	movw	r28, r22
    33b8:	63 e4       	ldi	r22, 0x43	; 67
    33ba:	ce 01       	movw	r24, r28
    33bc:	2b df       	rcall	.-426    	; 0x3214 <_ZN7MPU605017startReadLocationEh>
    33be:	4d d3       	rcall	.+1690   	; 0x3a5a <_Z11i2c_readAckv>
    33c0:	f8 2e       	mov	r15, r24
    33c2:	4b d3       	rcall	.+1686   	; 0x3a5a <_Z11i2c_readAckv>
    33c4:	6f 2d       	mov	r22, r15
    33c6:	70 e0       	ldi	r23, 0x00	; 0
    33c8:	76 2f       	mov	r23, r22
    33ca:	66 27       	eor	r22, r22
    33cc:	68 2b       	or	r22, r24
    33ce:	07 2e       	mov	r0, r23
    33d0:	00 0c       	add	r0, r0
    33d2:	88 0b       	sbc	r24, r24
    33d4:	99 0b       	sbc	r25, r25
    33d6:	a9 d6       	rcall	.+3410   	; 0x412a <__floatsisf>
    33d8:	6c 87       	std	Y+12, r22	; 0x0c
    33da:	7d 87       	std	Y+13, r23	; 0x0d
    33dc:	8e 87       	std	Y+14, r24	; 0x0e
    33de:	9f 87       	std	Y+15, r25	; 0x0f
    33e0:	3c d3       	rcall	.+1656   	; 0x3a5a <_Z11i2c_readAckv>
    33e2:	f8 2e       	mov	r15, r24
    33e4:	3a d3       	rcall	.+1652   	; 0x3a5a <_Z11i2c_readAckv>
    33e6:	6f 2d       	mov	r22, r15
    33e8:	70 e0       	ldi	r23, 0x00	; 0
    33ea:	76 2f       	mov	r23, r22
    33ec:	66 27       	eor	r22, r22
    33ee:	68 2b       	or	r22, r24
    33f0:	07 2e       	mov	r0, r23
    33f2:	00 0c       	add	r0, r0
    33f4:	88 0b       	sbc	r24, r24
    33f6:	99 0b       	sbc	r25, r25
    33f8:	98 d6       	rcall	.+3376   	; 0x412a <__floatsisf>
    33fa:	68 8b       	std	Y+16, r22	; 0x10
    33fc:	79 8b       	std	Y+17, r23	; 0x11
    33fe:	8a 8b       	std	Y+18, r24	; 0x12
    3400:	9b 8b       	std	Y+19, r25	; 0x13
    3402:	2b d3       	rcall	.+1622   	; 0x3a5a <_Z11i2c_readAckv>
    3404:	f8 2e       	mov	r15, r24
    3406:	34 d3       	rcall	.+1640   	; 0x3a70 <_Z11i2c_readNakv>
    3408:	6f 2d       	mov	r22, r15
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	76 2f       	mov	r23, r22
    340e:	66 27       	eor	r22, r22
    3410:	68 2b       	or	r22, r24
    3412:	07 2e       	mov	r0, r23
    3414:	00 0c       	add	r0, r0
    3416:	88 0b       	sbc	r24, r24
    3418:	99 0b       	sbc	r25, r25
    341a:	87 d6       	rcall	.+3342   	; 0x412a <__floatsisf>
    341c:	6c 8b       	std	Y+20, r22	; 0x14
    341e:	7d 8b       	std	Y+21, r23	; 0x15
    3420:	8e 8b       	std	Y+22, r24	; 0x16
    3422:	9f 8b       	std	Y+23, r25	; 0x17
    3424:	c4 d2       	rcall	.+1416   	; 0x39ae <_Z8i2c_stopv>
    3426:	8c e0       	ldi	r24, 0x0C	; 12
    3428:	fe 01       	movw	r30, r28
    342a:	3c 96       	adiw	r30, 0x0c	; 12
    342c:	d8 01       	movw	r26, r16
    342e:	01 90       	ld	r0, Z+
    3430:	0d 92       	st	X+, r0
    3432:	8a 95       	dec	r24
    3434:	e1 f7       	brne	.-8      	; 0x342e <_ZN7MPU605011readRawGyroEv+0x84>
    3436:	c8 01       	movw	r24, r16
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ff 90       	pop	r15
    3442:	08 95       	ret

00003444 <_ZN7MPU605012setThresholdEh>:

// Set treshold value
void MPU6050::setThreshold(uint8_t multiple)
{
    3444:	cf 92       	push	r12
    3446:	df 92       	push	r13
    3448:	ef 92       	push	r14
    344a:	ff 92       	push	r15
    344c:	1f 93       	push	r17
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	ec 01       	movw	r28, r24
    3454:	16 2f       	mov	r17, r22
	if (multiple > 0)
    3456:	66 23       	and	r22, r22
    3458:	09 f4       	brne	.+2      	; 0x345c <_ZN7MPU605012setThresholdEh+0x18>
    345a:	3b c0       	rjmp	.+118    	; 0x34d2 <_ZN7MPU605012setThresholdEh+0x8e>
	{
		// If not calibrated, need calibrate
		if (!useCalibrate)
    345c:	fc 01       	movw	r30, r24
    345e:	e8 58       	subi	r30, 0x88	; 136
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 81       	ld	r24, Z
    3464:	81 11       	cpse	r24, r1
    3466:	03 c0       	rjmp	.+6      	; 0x346e <_ZN7MPU605012setThresholdEh+0x2a>
		{
			calibrateGyro();
    3468:	62 e3       	ldi	r22, 0x32	; 50
    346a:	ce 01       	movw	r24, r28
    346c:	51 d0       	rcall	.+162    	; 0x3510 <_ZN7MPU605013calibrateGyroEh>
		}

		// Calculate threshold vectors
		tg.XAxis = th.XAxis * multiple;
    346e:	61 2f       	mov	r22, r17
    3470:	70 e0       	ldi	r23, 0x00	; 0
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	59 d6       	rcall	.+3250   	; 0x412a <__floatsisf>
    3478:	6b 01       	movw	r12, r22
    347a:	7c 01       	movw	r14, r24
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	fe 01       	movw	r30, r28
    3482:	ec 5a       	subi	r30, 0xAC	; 172
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	60 81       	ld	r22, Z
    3488:	71 81       	ldd	r23, Z+1	; 0x01
    348a:	82 81       	ldd	r24, Z+2	; 0x02
    348c:	93 81       	ldd	r25, Z+3	; 0x03
    348e:	66 d7       	rcall	.+3788   	; 0x435c <__mulsf3>
    3490:	68 ab       	std	Y+48, r22	; 0x30
    3492:	79 ab       	std	Y+49, r23	; 0x31
    3494:	8a ab       	std	Y+50, r24	; 0x32
    3496:	9b ab       	std	Y+51, r25	; 0x33
		tg.YAxis = th.YAxis * multiple;
    3498:	a7 01       	movw	r20, r14
    349a:	96 01       	movw	r18, r12
    349c:	fe 01       	movw	r30, r28
    349e:	e8 5a       	subi	r30, 0xA8	; 168
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	60 81       	ld	r22, Z
    34a4:	71 81       	ldd	r23, Z+1	; 0x01
    34a6:	82 81       	ldd	r24, Z+2	; 0x02
    34a8:	93 81       	ldd	r25, Z+3	; 0x03
    34aa:	58 d7       	rcall	.+3760   	; 0x435c <__mulsf3>
    34ac:	6c ab       	std	Y+52, r22	; 0x34
    34ae:	7d ab       	std	Y+53, r23	; 0x35
    34b0:	8e ab       	std	Y+54, r24	; 0x36
    34b2:	9f ab       	std	Y+55, r25	; 0x37
		tg.ZAxis = th.ZAxis * multiple;
    34b4:	a7 01       	movw	r20, r14
    34b6:	96 01       	movw	r18, r12
    34b8:	fe 01       	movw	r30, r28
    34ba:	e4 5a       	subi	r30, 0xA4	; 164
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	60 81       	ld	r22, Z
    34c0:	71 81       	ldd	r23, Z+1	; 0x01
    34c2:	82 81       	ldd	r24, Z+2	; 0x02
    34c4:	93 81       	ldd	r25, Z+3	; 0x03
    34c6:	4a d7       	rcall	.+3732   	; 0x435c <__mulsf3>
    34c8:	68 af       	std	Y+56, r22	; 0x38
    34ca:	79 af       	std	Y+57, r23	; 0x39
    34cc:	8a af       	std	Y+58, r24	; 0x3a
    34ce:	9b af       	std	Y+59, r25	; 0x3b
    34d0:	0c c0       	rjmp	.+24     	; 0x34ea <_ZN7MPU605012setThresholdEh+0xa6>
	} else
	{
		// No threshold
		tg.XAxis = 0;
    34d2:	18 aa       	std	Y+48, r1	; 0x30
    34d4:	19 aa       	std	Y+49, r1	; 0x31
    34d6:	1a aa       	std	Y+50, r1	; 0x32
    34d8:	1b aa       	std	Y+51, r1	; 0x33
		tg.YAxis = 0;
    34da:	1c aa       	std	Y+52, r1	; 0x34
    34dc:	1d aa       	std	Y+53, r1	; 0x35
    34de:	1e aa       	std	Y+54, r1	; 0x36
    34e0:	1f aa       	std	Y+55, r1	; 0x37
		tg.ZAxis = 0;
    34e2:	18 ae       	std	Y+56, r1	; 0x38
    34e4:	19 ae       	std	Y+57, r1	; 0x39
    34e6:	1a ae       	std	Y+58, r1	; 0x3a
    34e8:	1b ae       	std	Y+59, r1	; 0x3b
	}

	// Remember old threshold value
	actualThreshold = multiple;
    34ea:	cc 58       	subi	r28, 0x8C	; 140
    34ec:	df 4f       	sbci	r29, 0xFF	; 255
    34ee:	61 2f       	mov	r22, r17
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	17 d6       	rcall	.+3118   	; 0x4126 <__floatunsisf>
    34f8:	68 83       	st	Y, r22
    34fa:	79 83       	std	Y+1, r23	; 0x01
    34fc:	8a 83       	std	Y+2, r24	; 0x02
    34fe:	9b 83       	std	Y+3, r25	; 0x03
}
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	1f 91       	pop	r17
    3506:	ff 90       	pop	r15
    3508:	ef 90       	pop	r14
    350a:	df 90       	pop	r13
    350c:	cf 90       	pop	r12
    350e:	08 95       	ret

00003510 <_ZN7MPU605013calibrateGyroEh>:
	offsetAccelero.XAxis = sumX / samples;
	offsetAccelero.YAxis = sumY / samples;
}

void MPU6050::calibrateGyro(uint8_t samples)
{
    3510:	2f 92       	push	r2
    3512:	3f 92       	push	r3
    3514:	4f 92       	push	r4
    3516:	5f 92       	push	r5
    3518:	6f 92       	push	r6
    351a:	7f 92       	push	r7
    351c:	8f 92       	push	r8
    351e:	9f 92       	push	r9
    3520:	af 92       	push	r10
    3522:	bf 92       	push	r11
    3524:	cf 92       	push	r12
    3526:	df 92       	push	r13
    3528:	ef 92       	push	r14
    352a:	ff 92       	push	r15
    352c:	0f 93       	push	r16
    352e:	1f 93       	push	r17
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	a4 97       	sbiw	r28, 0x24	; 36
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	1c 01       	movw	r2, r24
    3546:	06 2f       	mov	r16, r22
	// Set calibrate
	useCalibrate = true;
    3548:	fc 01       	movw	r30, r24
    354a:	e8 58       	subi	r30, 0x88	; 136
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	80 83       	st	Z, r24
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    3552:	66 23       	and	r22, r22
    3554:	09 f4       	brne	.+2      	; 0x3558 <_ZN7MPU605013calibrateGyroEh+0x48>
    3556:	87 c0       	rjmp	.+270    	; 0x3666 <_ZN7MPU605013calibrateGyroEh+0x156>
    3558:	10 e0       	ldi	r17, 0x00	; 0
    355a:	19 8e       	std	Y+25, r1	; 0x19
    355c:	1a 8e       	std	Y+26, r1	; 0x1a
    355e:	1b 8e       	std	Y+27, r1	; 0x1b
    3560:	1c 8e       	std	Y+28, r1	; 0x1c
    3562:	1d 8a       	std	Y+21, r1	; 0x15
    3564:	1e 8a       	std	Y+22, r1	; 0x16
    3566:	1f 8a       	std	Y+23, r1	; 0x17
    3568:	18 8e       	std	Y+24, r1	; 0x18
    356a:	1d 86       	std	Y+13, r1	; 0x0d
    356c:	1e 86       	std	Y+14, r1	; 0x0e
    356e:	1f 86       	std	Y+15, r1	; 0x0f
    3570:	18 8a       	std	Y+16, r1	; 0x10
    3572:	19 a2       	std	Y+33, r1	; 0x21
    3574:	1a a2       	std	Y+34, r1	; 0x22
    3576:	1b a2       	std	Y+35, r1	; 0x23
    3578:	1c a2       	std	Y+36, r1	; 0x24
    357a:	1d 8e       	std	Y+29, r1	; 0x1d
    357c:	1e 8e       	std	Y+30, r1	; 0x1e
    357e:	1f 8e       	std	Y+31, r1	; 0x1f
    3580:	18 a2       	std	Y+32, r1	; 0x20
    3582:	19 8a       	std	Y+17, r1	; 0x11
    3584:	1a 8a       	std	Y+18, r1	; 0x12
    3586:	1b 8a       	std	Y+19, r1	; 0x13
    3588:	1c 8a       	std	Y+20, r1	; 0x14
	{
		readRawGyro();
    358a:	b1 01       	movw	r22, r2
    358c:	ce 01       	movw	r24, r28
    358e:	01 96       	adiw	r24, 0x01	; 1
    3590:	0c df       	rcall	.-488    	; 0x33aa <_ZN7MPU605011readRawGyroEv>
		sumX += rg.XAxis;
    3592:	f1 01       	movw	r30, r2
    3594:	44 84       	ldd	r4, Z+12	; 0x0c
    3596:	55 84       	ldd	r5, Z+13	; 0x0d
    3598:	66 84       	ldd	r6, Z+14	; 0x0e
    359a:	77 84       	ldd	r7, Z+15	; 0x0f
    359c:	a3 01       	movw	r20, r6
    359e:	92 01       	movw	r18, r4
    35a0:	69 89       	ldd	r22, Y+17	; 0x11
    35a2:	7a 89       	ldd	r23, Y+18	; 0x12
    35a4:	8b 89       	ldd	r24, Y+19	; 0x13
    35a6:	9c 89       	ldd	r25, Y+20	; 0x14
    35a8:	58 d4       	rcall	.+2224   	; 0x3e5a <__addsf3>
    35aa:	69 8b       	std	Y+17, r22	; 0x11
    35ac:	7a 8b       	std	Y+18, r23	; 0x12
    35ae:	8b 8b       	std	Y+19, r24	; 0x13
    35b0:	9c 8b       	std	Y+20, r25	; 0x14
		sumY += rg.YAxis;
    35b2:	f1 01       	movw	r30, r2
    35b4:	80 88       	ldd	r8, Z+16	; 0x10
    35b6:	91 88       	ldd	r9, Z+17	; 0x11
    35b8:	a2 88       	ldd	r10, Z+18	; 0x12
    35ba:	b3 88       	ldd	r11, Z+19	; 0x13
    35bc:	a5 01       	movw	r20, r10
    35be:	94 01       	movw	r18, r8
    35c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    35c2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    35c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35c6:	98 a1       	ldd	r25, Y+32	; 0x20
    35c8:	48 d4       	rcall	.+2192   	; 0x3e5a <__addsf3>
    35ca:	6d 8f       	std	Y+29, r22	; 0x1d
    35cc:	7e 8f       	std	Y+30, r23	; 0x1e
    35ce:	8f 8f       	std	Y+31, r24	; 0x1f
    35d0:	98 a3       	std	Y+32, r25	; 0x20
		sumZ += rg.ZAxis;
    35d2:	f1 01       	movw	r30, r2
    35d4:	c4 88       	ldd	r12, Z+20	; 0x14
    35d6:	d5 88       	ldd	r13, Z+21	; 0x15
    35d8:	e6 88       	ldd	r14, Z+22	; 0x16
    35da:	f7 88       	ldd	r15, Z+23	; 0x17
    35dc:	a7 01       	movw	r20, r14
    35de:	96 01       	movw	r18, r12
    35e0:	69 a1       	ldd	r22, Y+33	; 0x21
    35e2:	7a a1       	ldd	r23, Y+34	; 0x22
    35e4:	8b a1       	ldd	r24, Y+35	; 0x23
    35e6:	9c a1       	ldd	r25, Y+36	; 0x24
    35e8:	38 d4       	rcall	.+2160   	; 0x3e5a <__addsf3>
    35ea:	69 a3       	std	Y+33, r22	; 0x21
    35ec:	7a a3       	std	Y+34, r23	; 0x22
    35ee:	8b a3       	std	Y+35, r24	; 0x23
    35f0:	9c a3       	std	Y+36, r25	; 0x24

		sigmaX += rg.XAxis * rg.XAxis;
    35f2:	a3 01       	movw	r20, r6
    35f4:	92 01       	movw	r18, r4
    35f6:	c3 01       	movw	r24, r6
    35f8:	b2 01       	movw	r22, r4
    35fa:	b0 d6       	rcall	.+3424   	; 0x435c <__mulsf3>
    35fc:	9b 01       	movw	r18, r22
    35fe:	ac 01       	movw	r20, r24
    3600:	6d 85       	ldd	r22, Y+13	; 0x0d
    3602:	7e 85       	ldd	r23, Y+14	; 0x0e
    3604:	8f 85       	ldd	r24, Y+15	; 0x0f
    3606:	98 89       	ldd	r25, Y+16	; 0x10
    3608:	28 d4       	rcall	.+2128   	; 0x3e5a <__addsf3>
    360a:	6d 87       	std	Y+13, r22	; 0x0d
    360c:	7e 87       	std	Y+14, r23	; 0x0e
    360e:	8f 87       	std	Y+15, r24	; 0x0f
    3610:	98 8b       	std	Y+16, r25	; 0x10
		sigmaY += rg.YAxis * rg.YAxis;
    3612:	a5 01       	movw	r20, r10
    3614:	94 01       	movw	r18, r8
    3616:	c5 01       	movw	r24, r10
    3618:	b4 01       	movw	r22, r8
    361a:	a0 d6       	rcall	.+3392   	; 0x435c <__mulsf3>
    361c:	9b 01       	movw	r18, r22
    361e:	ac 01       	movw	r20, r24
    3620:	6d 89       	ldd	r22, Y+21	; 0x15
    3622:	7e 89       	ldd	r23, Y+22	; 0x16
    3624:	8f 89       	ldd	r24, Y+23	; 0x17
    3626:	98 8d       	ldd	r25, Y+24	; 0x18
    3628:	18 d4       	rcall	.+2096   	; 0x3e5a <__addsf3>
    362a:	6d 8b       	std	Y+21, r22	; 0x15
    362c:	7e 8b       	std	Y+22, r23	; 0x16
    362e:	8f 8b       	std	Y+23, r24	; 0x17
    3630:	98 8f       	std	Y+24, r25	; 0x18
		sigmaZ += rg.ZAxis * rg.ZAxis;
    3632:	a7 01       	movw	r20, r14
    3634:	96 01       	movw	r18, r12
    3636:	c7 01       	movw	r24, r14
    3638:	b6 01       	movw	r22, r12
    363a:	90 d6       	rcall	.+3360   	; 0x435c <__mulsf3>
    363c:	9b 01       	movw	r18, r22
    363e:	ac 01       	movw	r20, r24
    3640:	69 8d       	ldd	r22, Y+25	; 0x19
    3642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3648:	08 d4       	rcall	.+2064   	; 0x3e5a <__addsf3>
    364a:	69 8f       	std	Y+25, r22	; 0x19
    364c:	7a 8f       	std	Y+26, r23	; 0x1a
    364e:	8b 8f       	std	Y+27, r24	; 0x1b
    3650:	9c 8f       	std	Y+28, r25	; 0x1c
    3652:	8f e1       	ldi	r24, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3654:	9e e4       	ldi	r25, 0x4E	; 78
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <_ZN7MPU605013calibrateGyroEh+0x146>
    365a:	00 c0       	rjmp	.+0      	; 0x365c <_ZN7MPU605013calibrateGyroEh+0x14c>
    365c:	00 00       	nop
    365e:	1f 5f       	subi	r17, 0xFF	; 255
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    3660:	01 13       	cpse	r16, r17
    3662:	93 cf       	rjmp	.-218    	; 0x358a <_ZN7MPU605013calibrateGyroEh+0x7a>
    3664:	18 c0       	rjmp	.+48     	; 0x3696 <_ZN7MPU605013calibrateGyroEh+0x186>
    3666:	19 8e       	std	Y+25, r1	; 0x19
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;
    3668:	1a 8e       	std	Y+26, r1	; 0x1a
    366a:	1b 8e       	std	Y+27, r1	; 0x1b
    366c:	1c 8e       	std	Y+28, r1	; 0x1c
    366e:	1d 8a       	std	Y+21, r1	; 0x15
	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
    3670:	1e 8a       	std	Y+22, r1	; 0x16
    3672:	1f 8a       	std	Y+23, r1	; 0x17
    3674:	18 8e       	std	Y+24, r1	; 0x18
    3676:	1d 86       	std	Y+13, r1	; 0x0d

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
    3678:	1e 86       	std	Y+14, r1	; 0x0e
    367a:	1f 86       	std	Y+15, r1	; 0x0f
    367c:	18 8a       	std	Y+16, r1	; 0x10
    367e:	19 a2       	std	Y+33, r1	; 0x21
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
    3680:	1a a2       	std	Y+34, r1	; 0x22
    3682:	1b a2       	std	Y+35, r1	; 0x23
    3684:	1c a2       	std	Y+36, r1	; 0x24
    3686:	1d 8e       	std	Y+29, r1	; 0x1d
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
    3688:	1e 8e       	std	Y+30, r1	; 0x1e
    368a:	1f 8e       	std	Y+31, r1	; 0x1f
    368c:	18 a2       	std	Y+32, r1	; 0x20
{
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
    368e:	19 8a       	std	Y+17, r1	; 0x11
    3690:	1a 8a       	std	Y+18, r1	; 0x12
    3692:	1b 8a       	std	Y+19, r1	; 0x13
    3694:	1c 8a       	std	Y+20, r1	; 0x14

		_delay_ms(5);
	}

	// Calculate delta vectors
	dg.XAxis = sumX / samples;
    3696:	60 2f       	mov	r22, r16
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	45 d5       	rcall	.+2698   	; 0x412a <__floatsisf>
    36a0:	4b 01       	movw	r8, r22
    36a2:	5c 01       	movw	r10, r24
    36a4:	9b 01       	movw	r18, r22
    36a6:	ac 01       	movw	r20, r24
    36a8:	69 89       	ldd	r22, Y+17	; 0x11
    36aa:	7a 89       	ldd	r23, Y+18	; 0x12
    36ac:	8b 89       	ldd	r24, Y+19	; 0x13
    36ae:	9c 89       	ldd	r25, Y+20	; 0x14
    36b0:	a1 d4       	rcall	.+2370   	; 0x3ff4 <__divsf3>
    36b2:	6b 01       	movw	r12, r22
    36b4:	7c 01       	movw	r14, r24
    36b6:	f1 01       	movw	r30, r2
    36b8:	64 af       	std	Z+60, r22	; 0x3c
    36ba:	75 af       	std	Z+61, r23	; 0x3d
    36bc:	86 af       	std	Z+62, r24	; 0x3e
    36be:	97 af       	std	Z+63, r25	; 0x3f
	dg.YAxis = sumY / samples;
    36c0:	a5 01       	movw	r20, r10
    36c2:	94 01       	movw	r18, r8
    36c4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    36c6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    36c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36ca:	98 a1       	ldd	r25, Y+32	; 0x20
    36cc:	93 d4       	rcall	.+2342   	; 0x3ff4 <__divsf3>
    36ce:	2b 01       	movw	r4, r22
    36d0:	3c 01       	movw	r6, r24
    36d2:	f1 01       	movw	r30, r2
    36d4:	e0 5c       	subi	r30, 0xC0	; 192
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	60 83       	st	Z, r22
    36da:	71 83       	std	Z+1, r23	; 0x01
    36dc:	82 83       	std	Z+2, r24	; 0x02
    36de:	93 83       	std	Z+3, r25	; 0x03
	dg.ZAxis = sumZ / samples;
    36e0:	a5 01       	movw	r20, r10
    36e2:	94 01       	movw	r18, r8
    36e4:	69 a1       	ldd	r22, Y+33	; 0x21
    36e6:	7a a1       	ldd	r23, Y+34	; 0x22
    36e8:	8b a1       	ldd	r24, Y+35	; 0x23
    36ea:	9c a1       	ldd	r25, Y+36	; 0x24
    36ec:	83 d4       	rcall	.+2310   	; 0x3ff4 <__divsf3>
    36ee:	4b 01       	movw	r8, r22
    36f0:	5c 01       	movw	r10, r24
    36f2:	f1 01       	movw	r30, r2
    36f4:	ec 5b       	subi	r30, 0xBC	; 188
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	60 83       	st	Z, r22
    36fa:	71 83       	std	Z+1, r23	; 0x01
    36fc:	82 83       	std	Z+2, r24	; 0x02
    36fe:	93 83       	std	Z+3, r25	; 0x03

	// Calculate threshold vectors
	th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	48 e4       	ldi	r20, 0x48	; 72
    3706:	52 e4       	ldi	r21, 0x42	; 66
    3708:	6d 85       	ldd	r22, Y+13	; 0x0d
    370a:	7e 85       	ldd	r23, Y+14	; 0x0e
    370c:	8f 85       	ldd	r24, Y+15	; 0x0f
    370e:	98 89       	ldd	r25, Y+16	; 0x10
    3710:	71 d4       	rcall	.+2274   	; 0x3ff4 <__divsf3>
    3712:	69 8b       	std	Y+17, r22	; 0x11
    3714:	7a 8b       	std	Y+18, r23	; 0x12
    3716:	8b 8b       	std	Y+19, r24	; 0x13
    3718:	9c 8b       	std	Y+20, r25	; 0x14
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	48 e4       	ldi	r20, 0x48	; 72
    3720:	52 e4       	ldi	r21, 0x42	; 66
    3722:	6d 85       	ldd	r22, Y+13	; 0x0d
    3724:	7e 85       	ldd	r23, Y+14	; 0x0e
    3726:	8f 85       	ldd	r24, Y+15	; 0x0f
    3728:	98 89       	ldd	r25, Y+16	; 0x10
    372a:	64 d4       	rcall	.+2248   	; 0x3ff4 <__divsf3>
    372c:	6d 87       	std	Y+13, r22	; 0x0d
    372e:	7e 87       	std	Y+14, r23	; 0x0e
    3730:	8f 87       	std	Y+15, r24	; 0x0f
    3732:	98 8b       	std	Y+16, r25	; 0x10
    3734:	a7 01       	movw	r20, r14
    3736:	96 01       	movw	r18, r12
    3738:	c7 01       	movw	r24, r14
    373a:	b6 01       	movw	r22, r12
    373c:	0f d6       	rcall	.+3102   	; 0x435c <__mulsf3>
    373e:	9b 01       	movw	r18, r22
    3740:	ac 01       	movw	r20, r24
    3742:	6d 85       	ldd	r22, Y+13	; 0x0d
    3744:	7e 85       	ldd	r23, Y+14	; 0x0e
    3746:	8f 85       	ldd	r24, Y+15	; 0x0f
    3748:	98 89       	ldd	r25, Y+16	; 0x10
    374a:	86 d3       	rcall	.+1804   	; 0x3e58 <__subsf3>
    374c:	74 d6       	rcall	.+3304   	; 0x4436 <sqrt>
    374e:	f1 01       	movw	r30, r2
    3750:	ec 5a       	subi	r30, 0xAC	; 172
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	60 83       	st	Z, r22
    3756:	71 83       	std	Z+1, r23	; 0x01
    3758:	82 83       	std	Z+2, r24	; 0x02
    375a:	93 83       	std	Z+3, r25	; 0x03
	th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	48 e4       	ldi	r20, 0x48	; 72
    3762:	52 e4       	ldi	r21, 0x42	; 66
    3764:	6d 89       	ldd	r22, Y+21	; 0x15
    3766:	7e 89       	ldd	r23, Y+22	; 0x16
    3768:	8f 89       	ldd	r24, Y+23	; 0x17
    376a:	98 8d       	ldd	r25, Y+24	; 0x18
    376c:	43 d4       	rcall	.+2182   	; 0x3ff4 <__divsf3>
    376e:	6b 01       	movw	r12, r22
    3770:	7c 01       	movw	r14, r24
    3772:	a3 01       	movw	r20, r6
    3774:	92 01       	movw	r18, r4
    3776:	c3 01       	movw	r24, r6
    3778:	b2 01       	movw	r22, r4
    377a:	f0 d5       	rcall	.+3040   	; 0x435c <__mulsf3>
    377c:	9b 01       	movw	r18, r22
    377e:	ac 01       	movw	r20, r24
    3780:	c7 01       	movw	r24, r14
    3782:	b6 01       	movw	r22, r12
    3784:	69 d3       	rcall	.+1746   	; 0x3e58 <__subsf3>
    3786:	57 d6       	rcall	.+3246   	; 0x4436 <sqrt>
    3788:	f1 01       	movw	r30, r2
    378a:	e8 5a       	subi	r30, 0xA8	; 168
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	60 83       	st	Z, r22
    3790:	71 83       	std	Z+1, r23	; 0x01
    3792:	82 83       	std	Z+2, r24	; 0x02
    3794:	93 83       	std	Z+3, r25	; 0x03
	th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	48 e4       	ldi	r20, 0x48	; 72
    379c:	52 e4       	ldi	r21, 0x42	; 66
    379e:	69 8d       	ldd	r22, Y+25	; 0x19
    37a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37a6:	26 d4       	rcall	.+2124   	; 0x3ff4 <__divsf3>
    37a8:	6b 01       	movw	r12, r22
    37aa:	7c 01       	movw	r14, r24
    37ac:	a5 01       	movw	r20, r10
    37ae:	94 01       	movw	r18, r8
    37b0:	c5 01       	movw	r24, r10
    37b2:	b4 01       	movw	r22, r8
    37b4:	d3 d5       	rcall	.+2982   	; 0x435c <__mulsf3>
    37b6:	9b 01       	movw	r18, r22
    37b8:	ac 01       	movw	r20, r24
    37ba:	c7 01       	movw	r24, r14
    37bc:	b6 01       	movw	r22, r12
    37be:	4c d3       	rcall	.+1688   	; 0x3e58 <__subsf3>
    37c0:	3a d6       	rcall	.+3188   	; 0x4436 <sqrt>
    37c2:	f1 01       	movw	r30, r2
    37c4:	e4 5a       	subi	r30, 0xA4	; 164
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	60 83       	st	Z, r22
    37ca:	71 83       	std	Z+1, r23	; 0x01
    37cc:	82 83       	std	Z+2, r24	; 0x02
    37ce:	93 83       	std	Z+3, r25	; 0x03
    37d0:	78 96       	adiw	r30, 0x18	; 24

	// If already set threshold, recalculate threshold vectors
	if (actualThreshold > 0)
    37d2:	c0 80       	ld	r12, Z
    37d4:	d1 80       	ldd	r13, Z+1	; 0x01
    37d6:	e2 80       	ldd	r14, Z+2	; 0x02
    37d8:	f3 80       	ldd	r15, Z+3	; 0x03
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	a9 01       	movw	r20, r18
    37e0:	c7 01       	movw	r24, r14
    37e2:	b6 01       	movw	r22, r12
    37e4:	b0 d5       	rcall	.+2912   	; 0x4346 <__gesf2>
    37e6:	18 16       	cp	r1, r24
    37e8:	2c f4       	brge	.+10     	; 0x37f4 <_ZN7MPU605013calibrateGyroEh+0x2e4>
    37ea:	c7 01       	movw	r24, r14
    37ec:	b6 01       	movw	r22, r12
	{
		setThreshold(actualThreshold);
    37ee:	6f d4       	rcall	.+2270   	; 0x40ce <__fixunssfsi>
    37f0:	c1 01       	movw	r24, r2
    37f2:	28 de       	rcall	.-944    	; 0x3444 <_ZN7MPU605012setThresholdEh>
    37f4:	a4 96       	adiw	r28, 0x24	; 36
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
	}
}
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	1f 91       	pop	r17
    3806:	0f 91       	pop	r16
    3808:	ff 90       	pop	r15
    380a:	ef 90       	pop	r14
    380c:	df 90       	pop	r13
    380e:	cf 90       	pop	r12
    3810:	bf 90       	pop	r11
    3812:	af 90       	pop	r10
    3814:	9f 90       	pop	r9
    3816:	8f 90       	pop	r8
    3818:	7f 90       	pop	r7
    381a:	6f 90       	pop	r6
    381c:	5f 90       	pop	r5
    381e:	4f 90       	pop	r4
    3820:	3f 90       	pop	r3
    3822:	2f 90       	pop	r2
    3824:	08 95       	ret

00003826 <_ZN7MPU60508rateGyroEv>:
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17

	// Remember old threshold value
	actualThreshold = multiple;
}

void MPU6050::rateGyro(){
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	2c 97       	sbiw	r28, 0x0c	; 12
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	8c 01       	movw	r16, r24
	readRawGyro();
    3844:	bc 01       	movw	r22, r24
    3846:	ce 01       	movw	r24, r28
    3848:	01 96       	adiw	r24, 0x01	; 1
    384a:	af dd       	rcall	.-1186   	; 0x33aa <_ZN7MPU605011readRawGyroEv>
	gyroRateX = (rg.XAxis)/131;
    384c:	78 01       	movw	r14, r16
    384e:	80 e6       	ldi	r24, 0x60	; 96
    3850:	e8 0e       	add	r14, r24
    3852:	f1 1c       	adc	r15, r1
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	43 e0       	ldi	r20, 0x03	; 3
    385a:	53 e4       	ldi	r21, 0x43	; 67
    385c:	f8 01       	movw	r30, r16
    385e:	64 85       	ldd	r22, Z+12	; 0x0c
    3860:	75 85       	ldd	r23, Z+13	; 0x0d
    3862:	86 85       	ldd	r24, Z+14	; 0x0e
    3864:	97 85       	ldd	r25, Z+15	; 0x0f
    3866:	c6 d3       	rcall	.+1932   	; 0x3ff4 <__divsf3>
    3868:	f7 01       	movw	r30, r14
    386a:	60 83       	st	Z, r22
    386c:	71 83       	std	Z+1, r23	; 0x01
    386e:	82 83       	std	Z+2, r24	; 0x02
    3870:	93 83       	std	Z+3, r25	; 0x03
	gyroRateY = (rg.YAxis)/131;
    3872:	78 01       	movw	r14, r16
    3874:	f4 e6       	ldi	r31, 0x64	; 100
    3876:	ef 0e       	add	r14, r31
    3878:	f1 1c       	adc	r15, r1
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	43 e0       	ldi	r20, 0x03	; 3
    3880:	53 e4       	ldi	r21, 0x43	; 67
    3882:	f8 01       	movw	r30, r16
    3884:	60 89       	ldd	r22, Z+16	; 0x10
    3886:	71 89       	ldd	r23, Z+17	; 0x11
    3888:	82 89       	ldd	r24, Z+18	; 0x12
    388a:	93 89       	ldd	r25, Z+19	; 0x13
    388c:	b3 d3       	rcall	.+1894   	; 0x3ff4 <__divsf3>
    388e:	f7 01       	movw	r30, r14
    3890:	60 83       	st	Z, r22
    3892:	71 83       	std	Z+1, r23	; 0x01
    3894:	82 83       	std	Z+2, r24	; 0x02
    3896:	93 83       	std	Z+3, r25	; 0x03
	gyroRateZ = (rg.ZAxis)/131;
    3898:	78 01       	movw	r14, r16
    389a:	f8 e6       	ldi	r31, 0x68	; 104
    389c:	ef 0e       	add	r14, r31
    389e:	f1 1c       	adc	r15, r1
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	43 e0       	ldi	r20, 0x03	; 3
    38a6:	53 e4       	ldi	r21, 0x43	; 67
    38a8:	f8 01       	movw	r30, r16
    38aa:	64 89       	ldd	r22, Z+20	; 0x14
    38ac:	75 89       	ldd	r23, Z+21	; 0x15
    38ae:	86 89       	ldd	r24, Z+22	; 0x16
    38b0:	97 89       	ldd	r25, Z+23	; 0x17
    38b2:	a0 d3       	rcall	.+1856   	; 0x3ff4 <__divsf3>
    38b4:	f7 01       	movw	r30, r14
    38b6:	60 83       	st	Z, r22
    38b8:	71 83       	std	Z+1, r23	; 0x01
    38ba:	82 83       	std	Z+2, r24	; 0x02
    38bc:	93 83       	std	Z+3, r25	; 0x03
}
    38be:	2c 96       	adiw	r28, 0x0c	; 12
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	df 91       	pop	r29
    38cc:	cf 91       	pop	r28
    38ce:	1f 91       	pop	r17
    38d0:	0f 91       	pop	r16
    38d2:	ff 90       	pop	r15
    38d4:	ef 90       	pop	r14
    38d6:	08 95       	ret

000038d8 <_ZN7MPU605012getGyroRateXEv>:

float MPU6050::getGyroRateX(){
	return gyroRateX;
    38d8:	80 5a       	subi	r24, 0xA0	; 160
    38da:	9f 4f       	sbci	r25, 0xFF	; 255
    38dc:	fc 01       	movw	r30, r24
    38de:	60 81       	ld	r22, Z
    38e0:	71 81       	ldd	r23, Z+1	; 0x01
    38e2:	82 81       	ldd	r24, Z+2	; 0x02
    38e4:	93 81       	ldd	r25, Z+3	; 0x03
}
    38e6:	08 95       	ret

000038e8 <_ZN7MPU605012getGyroRateYEv>:
float MPU6050::getGyroRateY(){
	return gyroRateY;
    38e8:	8c 59       	subi	r24, 0x9C	; 156
    38ea:	9f 4f       	sbci	r25, 0xFF	; 255
    38ec:	fc 01       	movw	r30, r24
    38ee:	60 81       	ld	r22, Z
    38f0:	71 81       	ldd	r23, Z+1	; 0x01
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
}
    38f6:	08 95       	ret

000038f8 <_ZN7MPU605012getGyroRateZEv>:
float MPU6050::getGyroRateZ(){
	return gyroRateZ;
    38f8:	88 59       	subi	r24, 0x98	; 152
    38fa:	9f 4f       	sbci	r25, 0xFF	; 255
    38fc:	fc 01       	movw	r30, r24
    38fe:	60 81       	ld	r22, Z
    3900:	71 81       	ldd	r23, Z+1	; 0x01
    3902:	82 81       	ldd	r24, Z+2	; 0x02
    3904:	93 81       	ldd	r25, Z+3	; 0x03
    3906:	08 95       	ret

00003908 <_Z16checkRobotMotionv>:
 bool normalGame			= false;

 
void checkRobotMotion(){
	//Wait while main switch is not clicked//
 	while(READ(M_MAIN_SWITCH));
    3908:	78 99       	sbic	0x0f, 0	; 15
    390a:	fe cf       	rjmp	.-4      	; 0x3908 <_Z16checkRobotMotionv>
 	////after main switch is clicked check the state of retry conditions//
 	if(!READ(M_DIRECTLY_LZ2))			{directlyLZ2 = true;}
    390c:	79 99       	sbic	0x0f, 1	; 15
    390e:	04 c0       	rjmp	.+8      	; 0x3918 <_Z16checkRobotMotionv+0x10>
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <directlyLZ2>
    3916:	08 95       	ret
 	else if(!READ(M_DIRECTLY_TZ3))		{directlyTZ3 = true;}
    3918:	7a 99       	sbic	0x0f, 2	; 15
    391a:	04 c0       	rjmp	.+8      	; 0x3924 <_Z16checkRobotMotionv+0x1c>
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <directlyTZ3>
    3922:	08 95       	ret
 	else if(!READ(M_LZ2FORTZ3))			{LZ2ForTZ3   = true;}
    3924:	7b 99       	sbic	0x0f, 3	; 15
    3926:	04 c0       	rjmp	.+8      	; 0x3930 <_Z16checkRobotMotionv+0x28>
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <LZ2ForTZ3>
    392e:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ2))			{alwaysTZ2   = true;}
    3930:	7c 99       	sbic	0x0f, 4	; 15
    3932:	04 c0       	rjmp	.+8      	; 0x393c <_Z16checkRobotMotionv+0x34>
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <alwaysTZ2>
    393a:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ1))			{alwaysTZ1   = true;}
    393c:	7d 99       	sbic	0x0f, 5	; 15
    393e:	04 c0       	rjmp	.+8      	; 0x3948 <_Z16checkRobotMotionv+0x40>
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <alwaysTZ1>
    3946:	08 95       	ret
 	else								{normalGame = true;}
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <normalGame>
    394e:	08 95       	ret

00003950 <_Z8i2c_initv>:
uint8_t i2c_write_array(uint8_t *data, uint8_t count){
	while(count--){
		if(i2c_write(*data++) != 0)		return count;
	}
	return 0;
}
    3950:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3954:	88 e4       	ldi	r24, 0x48	; 72
    3956:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    395a:	08 95       	ret

0000395c <_Z9i2c_starth>:
    395c:	94 ea       	ldi	r25, 0xA4	; 164
    395e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3962:	ec eb       	ldi	r30, 0xBC	; 188
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	90 81       	ld	r25, Z
    3968:	99 23       	and	r25, r25
    396a:	ec f7       	brge	.-6      	; 0x3966 <_Z9i2c_starth+0xa>
    396c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3970:	98 7f       	andi	r25, 0xF8	; 248
    3972:	98 30       	cpi	r25, 0x08	; 8
    3974:	11 f0       	breq	.+4      	; 0x397a <_Z9i2c_starth+0x1e>
    3976:	90 31       	cpi	r25, 0x10	; 16
    3978:	a1 f4       	brne	.+40     	; 0x39a2 <_Z9i2c_starth+0x46>
    397a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    397e:	84 e8       	ldi	r24, 0x84	; 132
    3980:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3984:	ec eb       	ldi	r30, 0xBC	; 188
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	80 81       	ld	r24, Z
    398a:	88 23       	and	r24, r24
    398c:	ec f7       	brge	.-6      	; 0x3988 <_Z9i2c_starth+0x2c>
    398e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3992:	98 7f       	andi	r25, 0xF8	; 248
    3994:	98 31       	cpi	r25, 0x18	; 24
    3996:	39 f0       	breq	.+14     	; 0x39a6 <_Z9i2c_starth+0x4a>
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	90 34       	cpi	r25, 0x40	; 64
    399c:	29 f4       	brne	.+10     	; 0x39a8 <_Z9i2c_starth+0x4c>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	08 95       	ret
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	08 95       	ret
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	08 95       	ret

000039aa <_Z13i2c_rep_starth>:
    39aa:	d8 cf       	rjmp	.-80     	; 0x395c <_Z9i2c_starth>
    39ac:	08 95       	ret

000039ae <_Z8i2c_stopv>:
    39ae:	84 e9       	ldi	r24, 0x94	; 148
    39b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39b4:	ec eb       	ldi	r30, 0xBC	; 188
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	84 fd       	sbrc	r24, 4
    39bc:	fd cf       	rjmp	.-6      	; 0x39b8 <_Z8i2c_stopv+0xa>
    39be:	08 95       	ret

000039c0 <_Z14i2c_start_waith>:
    39c0:	bf 92       	push	r11
    39c2:	cf 92       	push	r12
    39c4:	df 92       	push	r13
    39c6:	ef 92       	push	r14
    39c8:	ff 92       	push	r15
    39ca:	0f 93       	push	r16
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	b8 2e       	mov	r11, r24
    39d4:	cc eb       	ldi	r28, 0xBC	; 188
    39d6:	d0 e0       	ldi	r29, 0x00	; 0
    39d8:	09 eb       	ldi	r16, 0xB9	; 185
    39da:	10 e0       	ldi	r17, 0x00	; 0
    39dc:	0f 2e       	mov	r0, r31
    39de:	f4 ea       	ldi	r31, 0xA4	; 164
    39e0:	df 2e       	mov	r13, r31
    39e2:	f0 2d       	mov	r31, r0
    39e4:	0f 2e       	mov	r0, r31
    39e6:	fb eb       	ldi	r31, 0xBB	; 187
    39e8:	ef 2e       	mov	r14, r31
    39ea:	f1 2c       	mov	r15, r1
    39ec:	f0 2d       	mov	r31, r0
    39ee:	0f 2e       	mov	r0, r31
    39f0:	f4 e8       	ldi	r31, 0x84	; 132
    39f2:	cf 2e       	mov	r12, r31
    39f4:	f0 2d       	mov	r31, r0
    39f6:	d8 82       	st	Y, r13
    39f8:	88 81       	ld	r24, Y
    39fa:	88 23       	and	r24, r24
    39fc:	ec f7       	brge	.-6      	; 0x39f8 <_Z14i2c_start_waith+0x38>
    39fe:	f8 01       	movw	r30, r16
    3a00:	80 81       	ld	r24, Z
    3a02:	88 7f       	andi	r24, 0xF8	; 248
    3a04:	88 30       	cpi	r24, 0x08	; 8
    3a06:	b9 f7       	brne	.-18     	; 0x39f6 <_Z14i2c_start_waith+0x36>
    3a08:	f7 01       	movw	r30, r14
    3a0a:	b0 82       	st	Z, r11
    3a0c:	c8 82       	st	Y, r12
    3a0e:	88 81       	ld	r24, Y
    3a10:	88 23       	and	r24, r24
    3a12:	ec f7       	brge	.-6      	; 0x3a0e <_Z14i2c_start_waith+0x4e>
    3a14:	f8 01       	movw	r30, r16
    3a16:	80 81       	ld	r24, Z
    3a18:	88 7f       	andi	r24, 0xF8	; 248
    3a1a:	88 31       	cpi	r24, 0x18	; 24
    3a1c:	11 f0       	breq	.+4      	; 0x3a22 <_Z14i2c_start_waith+0x62>
    3a1e:	c7 df       	rcall	.-114    	; 0x39ae <_Z8i2c_stopv>
    3a20:	ea cf       	rjmp	.-44     	; 0x39f6 <_Z14i2c_start_waith+0x36>
    3a22:	df 91       	pop	r29
    3a24:	cf 91       	pop	r28
    3a26:	1f 91       	pop	r17
    3a28:	0f 91       	pop	r16
    3a2a:	ff 90       	pop	r15
    3a2c:	ef 90       	pop	r14
    3a2e:	df 90       	pop	r13
    3a30:	cf 90       	pop	r12
    3a32:	bf 90       	pop	r11
    3a34:	08 95       	ret

00003a36 <_Z9i2c_writeh>:
    3a36:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3a3a:	84 e8       	ldi	r24, 0x84	; 132
    3a3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a40:	ec eb       	ldi	r30, 0xBC	; 188
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	88 23       	and	r24, r24
    3a48:	ec f7       	brge	.-6      	; 0x3a44 <_Z9i2c_writeh+0xe>
    3a4a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3a4e:	98 7f       	andi	r25, 0xF8	; 248
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	98 32       	cpi	r25, 0x28	; 40
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <_Z9i2c_writeh+0x22>
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	08 95       	ret

00003a5a <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3a5a:	84 ec       	ldi	r24, 0xC4	; 196
    3a5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
    3a60:	ec eb       	ldi	r30, 0xBC	; 188
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	88 23       	and	r24, r24
    3a68:	ec f7       	brge	.-6      	; 0x3a64 <_Z11i2c_readAckv+0xa>

    return TWDR;
    3a6a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readAck */
    3a6e:	08 95       	ret

00003a70 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3a70:	84 e8       	ldi	r24, 0x84	; 132
    3a72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
    3a76:	ec eb       	ldi	r30, 0xBC	; 188
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	80 81       	ld	r24, Z
    3a7c:	88 23       	and	r24, r24
    3a7e:	ec f7       	brge	.-6      	; 0x3a7a <_Z11i2c_readNakv+0xa>
	
    return TWDR;
    3a80:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

    3a84:	08 95       	ret

00003a86 <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    3a86:	1f 92       	push	r1
    3a88:	0f 92       	push	r0
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	0f 92       	push	r0
    3a8e:	11 24       	eor	r1, r1
    3a90:	0b b6       	in	r0, 0x3b	; 59
    3a92:	0f 92       	push	r0
    3a94:	2f 93       	push	r18
    3a96:	8f 93       	push	r24
    3a98:	9f 93       	push	r25
    3a9a:	ef 93       	push	r30
    3a9c:	ff 93       	push	r31
    3a9e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    3aa2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3aa6:	88 71       	andi	r24, 0x18	; 24
    3aa8:	e0 91 1f 05 	lds	r30, 0x051F	; 0x80051f <_ZL12UART0_RxHead>
    3aac:	ef 5f       	subi	r30, 0xFF	; 255
    3aae:	ef 71       	andi	r30, 0x1F	; 31
    3ab0:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <_ZL12UART0_RxTail>
    3ab4:	e9 17       	cp	r30, r25
    3ab6:	39 f0       	breq	.+14     	; 0x3ac6 <__vector_25+0x40>
    3ab8:	e0 93 1f 05 	sts	0x051F, r30	; 0x80051f <_ZL12UART0_RxHead>
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	ee 5d       	subi	r30, 0xDE	; 222
    3ac0:	fa 4f       	sbci	r31, 0xFA	; 250
    3ac2:	20 83       	st	Z, r18
    3ac4:	01 c0       	rjmp	.+2      	; 0x3ac8 <__vector_25+0x42>
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <_ZL17UART0_LastRxError>
    3acc:	ff 91       	pop	r31
    3ace:	ef 91       	pop	r30
    3ad0:	9f 91       	pop	r25
    3ad2:	8f 91       	pop	r24
    3ad4:	2f 91       	pop	r18
    3ad6:	0f 90       	pop	r0
    3ad8:	0b be       	out	0x3b, r0	; 59
    3ada:	0f 90       	pop	r0
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	0f 90       	pop	r0
    3ae0:	1f 90       	pop	r1
    3ae2:	18 95       	reti

00003ae4 <__vector_26>:
    3ae4:	1f 92       	push	r1
    3ae6:	0f 92       	push	r0
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	0f 92       	push	r0
    3aec:	11 24       	eor	r1, r1
    3aee:	0b b6       	in	r0, 0x3b	; 59
    3af0:	0f 92       	push	r0
    3af2:	8f 93       	push	r24
    3af4:	9f 93       	push	r25
    3af6:	ef 93       	push	r30
    3af8:	ff 93       	push	r31
    3afa:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <_ZL12UART0_TxHead>
    3afe:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <_ZL12UART0_TxTail>
    3b02:	98 17       	cp	r25, r24
    3b04:	69 f0       	breq	.+26     	; 0x3b20 <__vector_26+0x3c>
    3b06:	e0 91 20 05 	lds	r30, 0x0520	; 0x800520 <_ZL12UART0_TxTail>
    3b0a:	ef 5f       	subi	r30, 0xFF	; 255
    3b0c:	ef 71       	andi	r30, 0x1F	; 31
    3b0e:	e0 93 20 05 	sts	0x0520, r30	; 0x800520 <_ZL12UART0_TxTail>
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	ee 5b       	subi	r30, 0xBE	; 190
    3b16:	fa 4f       	sbci	r31, 0xFA	; 250
    3b18:	80 81       	ld	r24, Z
    3b1a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3b1e:	05 c0       	rjmp	.+10     	; 0x3b2a <__vector_26+0x46>
    3b20:	e1 ec       	ldi	r30, 0xC1	; 193
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	80 81       	ld	r24, Z
    3b26:	8f 7d       	andi	r24, 0xDF	; 223
    3b28:	80 83       	st	Z, r24
    3b2a:	ff 91       	pop	r31
    3b2c:	ef 91       	pop	r30
    3b2e:	9f 91       	pop	r25
    3b30:	8f 91       	pop	r24
    3b32:	0f 90       	pop	r0
    3b34:	0b be       	out	0x3b, r0	; 59
    3b36:	0f 90       	pop	r0
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	0f 90       	pop	r0
    3b3c:	1f 90       	pop	r1
    3b3e:	18 95       	reti

00003b40 <_Z10uart0_initj>:
    3b40:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_ZL12UART0_TxHead>
    3b44:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <_ZL12UART0_TxTail>
    3b48:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZL12UART0_RxHead>
    3b4c:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZL12UART0_RxTail>
    3b50:	99 23       	and	r25, r25
    3b52:	24 f4       	brge	.+8      	; 0x3b5c <_Z10uart0_initj+0x1c>
    3b54:	22 e0       	ldi	r18, 0x02	; 2
    3b56:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    3b5a:	9f 77       	andi	r25, 0x7F	; 127
    3b5c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    3b60:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    3b64:	88 e9       	ldi	r24, 0x98	; 152
    3b66:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    3b6a:	86 e0       	ldi	r24, 0x06	; 6
    3b6c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    3b70:	08 95       	ret

00003b72 <__vector_36>:
    3b72:	1f 92       	push	r1
    3b74:	0f 92       	push	r0
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	0f 92       	push	r0
    3b7a:	11 24       	eor	r1, r1
    3b7c:	0b b6       	in	r0, 0x3b	; 59
    3b7e:	0f 92       	push	r0
    3b80:	2f 93       	push	r18
    3b82:	8f 93       	push	r24
    3b84:	9f 93       	push	r25
    3b86:	ef 93       	push	r30
    3b88:	ff 93       	push	r31
    3b8a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    3b8e:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3b92:	88 71       	andi	r24, 0x18	; 24
    3b94:	e0 91 da 04 	lds	r30, 0x04DA	; 0x8004da <_ZL12UART1_RxHead>
    3b98:	ef 5f       	subi	r30, 0xFF	; 255
    3b9a:	ef 71       	andi	r30, 0x1F	; 31
    3b9c:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <_ZL12UART1_RxTail>
    3ba0:	e9 17       	cp	r30, r25
    3ba2:	39 f0       	breq	.+14     	; 0x3bb2 <__vector_36+0x40>
    3ba4:	e0 93 da 04 	sts	0x04DA, r30	; 0x8004da <_ZL12UART1_RxHead>
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	e3 52       	subi	r30, 0x23	; 35
    3bac:	fb 4f       	sbci	r31, 0xFB	; 251
    3bae:	20 83       	st	Z, r18
    3bb0:	01 c0       	rjmp	.+2      	; 0x3bb4 <__vector_36+0x42>
    3bb2:	82 e0       	ldi	r24, 0x02	; 2
    3bb4:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <_ZL17UART1_LastRxError>
    3bb8:	ff 91       	pop	r31
    3bba:	ef 91       	pop	r30
    3bbc:	9f 91       	pop	r25
    3bbe:	8f 91       	pop	r24
    3bc0:	2f 91       	pop	r18
    3bc2:	0f 90       	pop	r0
    3bc4:	0b be       	out	0x3b, r0	; 59
    3bc6:	0f 90       	pop	r0
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	0f 90       	pop	r0
    3bcc:	1f 90       	pop	r1
    3bce:	18 95       	reti

00003bd0 <__vector_37>:
    3bd0:	1f 92       	push	r1
    3bd2:	0f 92       	push	r0
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	0f 92       	push	r0
    3bd8:	11 24       	eor	r1, r1
    3bda:	0b b6       	in	r0, 0x3b	; 59
    3bdc:	0f 92       	push	r0
    3bde:	8f 93       	push	r24
    3be0:	9f 93       	push	r25
    3be2:	ef 93       	push	r30
    3be4:	ff 93       	push	r31
    3be6:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <_ZL12UART1_TxHead>
    3bea:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <_ZL12UART1_TxTail>
    3bee:	98 17       	cp	r25, r24
    3bf0:	69 f0       	breq	.+26     	; 0x3c0c <__vector_37+0x3c>
    3bf2:	e0 91 db 04 	lds	r30, 0x04DB	; 0x8004db <_ZL12UART1_TxTail>
    3bf6:	ef 5f       	subi	r30, 0xFF	; 255
    3bf8:	ef 71       	andi	r30, 0x1F	; 31
    3bfa:	e0 93 db 04 	sts	0x04DB, r30	; 0x8004db <_ZL12UART1_TxTail>
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	e3 50       	subi	r30, 0x03	; 3
    3c02:	fb 4f       	sbci	r31, 0xFB	; 251
    3c04:	80 81       	ld	r24, Z
    3c06:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3c0a:	05 c0       	rjmp	.+10     	; 0x3c16 <__vector_37+0x46>
    3c0c:	e9 ec       	ldi	r30, 0xC9	; 201
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	80 81       	ld	r24, Z
    3c12:	8f 7d       	andi	r24, 0xDF	; 223
    3c14:	80 83       	st	Z, r24
    3c16:	ff 91       	pop	r31
    3c18:	ef 91       	pop	r30
    3c1a:	9f 91       	pop	r25
    3c1c:	8f 91       	pop	r24
    3c1e:	0f 90       	pop	r0
    3c20:	0b be       	out	0x3b, r0	; 59
    3c22:	0f 90       	pop	r0
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	0f 90       	pop	r0
    3c28:	1f 90       	pop	r1
    3c2a:	18 95       	reti

00003c2c <__vector_51>:
    3c2c:	1f 92       	push	r1
    3c2e:	0f 92       	push	r0
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	0f 92       	push	r0
    3c34:	11 24       	eor	r1, r1
    3c36:	8f 93       	push	r24
    3c38:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3c3c:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <buffer2>
    3c40:	8f 91       	pop	r24
    3c42:	0f 90       	pop	r0
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	0f 90       	pop	r0
    3c48:	1f 90       	pop	r1
    3c4a:	18 95       	reti

00003c4c <__vector_52>:
    3c4c:	1f 92       	push	r1
    3c4e:	0f 92       	push	r0
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	0f 92       	push	r0
    3c54:	11 24       	eor	r1, r1
    3c56:	0b b6       	in	r0, 0x3b	; 59
    3c58:	0f 92       	push	r0
    3c5a:	8f 93       	push	r24
    3c5c:	9f 93       	push	r25
    3c5e:	ef 93       	push	r30
    3c60:	ff 93       	push	r31
    3c62:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <_ZL12UART2_TxHead>
    3c66:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <_ZL12UART2_TxTail>
    3c6a:	98 17       	cp	r25, r24
    3c6c:	69 f0       	breq	.+26     	; 0x3c88 <__vector_52+0x3c>
    3c6e:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <_ZL12UART2_TxTail>
    3c72:	ef 5f       	subi	r30, 0xFF	; 255
    3c74:	ef 71       	andi	r30, 0x1F	; 31
    3c76:	e0 93 b6 04 	sts	0x04B6, r30	; 0x8004b6 <_ZL12UART2_TxTail>
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	e8 54       	subi	r30, 0x48	; 72
    3c7e:	fb 4f       	sbci	r31, 0xFB	; 251
    3c80:	80 81       	ld	r24, Z
    3c82:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3c86:	05 c0       	rjmp	.+10     	; 0x3c92 <__vector_52+0x46>
    3c88:	e1 ed       	ldi	r30, 0xD1	; 209
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	80 81       	ld	r24, Z
    3c8e:	8f 7d       	andi	r24, 0xDF	; 223
    3c90:	80 83       	st	Z, r24
    3c92:	ff 91       	pop	r31
    3c94:	ef 91       	pop	r30
    3c96:	9f 91       	pop	r25
    3c98:	8f 91       	pop	r24
    3c9a:	0f 90       	pop	r0
    3c9c:	0b be       	out	0x3b, r0	; 59
    3c9e:	0f 90       	pop	r0
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	0f 90       	pop	r0
    3ca4:	1f 90       	pop	r1
    3ca6:	18 95       	reti

00003ca8 <_Z10uart2_initj>:
    3ca8:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <_ZL12UART2_TxHead>
    3cac:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <_ZL12UART2_TxTail>
    3cb0:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <_ZL12UART2_RxHead>
    3cb4:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <_ZL12UART2_RxTail>
    3cb8:	99 23       	and	r25, r25
    3cba:	24 f4       	brge	.+8      	; 0x3cc4 <_Z10uart2_initj+0x1c>
    3cbc:	22 e0       	ldi	r18, 0x02	; 2
    3cbe:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    3cc2:	9f 77       	andi	r25, 0x7F	; 127
    3cc4:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    3cc8:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    3ccc:	88 e9       	ldi	r24, 0x98	; 152
    3cce:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    3cd2:	86 e0       	ldi	r24, 0x06	; 6
    3cd4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    3cd8:	08 95       	ret

00003cda <_Z10uart2_getcv>:
    3cda:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <buffer2>
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	08 95       	ret

00003ce2 <_Z10uart2_putch>:
    3ce2:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <_ZL12UART2_TxHead>
    3ce6:	2f 5f       	subi	r18, 0xFF	; 255
    3ce8:	2f 71       	andi	r18, 0x1F	; 31
    3cea:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <_ZL12UART2_TxTail>
    3cee:	29 17       	cp	r18, r25
    3cf0:	e1 f3       	breq	.-8      	; 0x3cea <_Z10uart2_putch+0x8>
    3cf2:	e2 2f       	mov	r30, r18
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	e8 54       	subi	r30, 0x48	; 72
    3cf8:	fb 4f       	sbci	r31, 0xFB	; 251
    3cfa:	80 83       	st	Z, r24
    3cfc:	20 93 b7 04 	sts	0x04B7, r18	; 0x8004b7 <_ZL12UART2_TxHead>
    3d00:	e1 ed       	ldi	r30, 0xD1	; 209
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	80 81       	ld	r24, Z
    3d06:	80 62       	ori	r24, 0x20	; 32
    3d08:	80 83       	st	Z, r24
    3d0a:	08 95       	ret

00003d0c <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    3d0c:	1f 92       	push	r1
    3d0e:	0f 92       	push	r0
    3d10:	0f b6       	in	r0, 0x3f	; 63
    3d12:	0f 92       	push	r0
    3d14:	11 24       	eor	r1, r1
    3d16:	0b b6       	in	r0, 0x3b	; 59
    3d18:	0f 92       	push	r0
    3d1a:	2f 93       	push	r18
    3d1c:	8f 93       	push	r24
    3d1e:	9f 93       	push	r25
    3d20:	ef 93       	push	r30
    3d22:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    3d24:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    3d28:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    3d2c:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    3d2e:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <_ZL12UART3_RxHead>
    3d32:	ef 5f       	subi	r30, 0xFF	; 255
    3d34:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    3d36:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <_ZL12UART3_RxTail>
    3d3a:	e9 17       	cp	r30, r25
    3d3c:	39 f0       	breq	.+14     	; 0x3d4c <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    3d3e:	e0 93 71 04 	sts	0x0471, r30	; 0x800471 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	ec 58       	subi	r30, 0x8C	; 140
    3d46:	fb 4f       	sbci	r31, 0xFB	; 251
    3d48:	20 83       	st	Z, r18
    3d4a:	01 c0       	rjmp	.+2      	; 0x3d4e <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    3d4e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <_ZL17UART3_LastRxError>
}
    3d52:	ff 91       	pop	r31
    3d54:	ef 91       	pop	r30
    3d56:	9f 91       	pop	r25
    3d58:	8f 91       	pop	r24
    3d5a:	2f 91       	pop	r18
    3d5c:	0f 90       	pop	r0
    3d5e:	0b be       	out	0x3b, r0	; 59
    3d60:	0f 90       	pop	r0
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	0f 90       	pop	r0
    3d66:	1f 90       	pop	r1
    3d68:	18 95       	reti

00003d6a <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    3d6a:	1f 92       	push	r1
    3d6c:	0f 92       	push	r0
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	0f 92       	push	r0
    3d72:	11 24       	eor	r1, r1
    3d74:	0b b6       	in	r0, 0x3b	; 59
    3d76:	0f 92       	push	r0
    3d78:	8f 93       	push	r24
    3d7a:	9f 93       	push	r25
    3d7c:	ef 93       	push	r30
    3d7e:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    3d80:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <_ZL12UART3_TxHead>
    3d84:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <_ZL12UART3_TxTail>
    3d88:	98 17       	cp	r25, r24
    3d8a:	69 f0       	breq	.+26     	; 0x3da6 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    3d8c:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <_ZL12UART3_TxTail>
    3d90:	ef 5f       	subi	r30, 0xFF	; 255
    3d92:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    3d94:	e0 93 72 04 	sts	0x0472, r30	; 0x800472 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    3d98:	f0 e0       	ldi	r31, 0x00	; 0
    3d9a:	ec 56       	subi	r30, 0x6C	; 108
    3d9c:	fb 4f       	sbci	r31, 0xFB	; 251
    3d9e:	80 81       	ld	r24, Z
    3da0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3da4:	05 c0       	rjmp	.+10     	; 0x3db0 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    3da6:	e1 e3       	ldi	r30, 0x31	; 49
    3da8:	f1 e0       	ldi	r31, 0x01	; 1
    3daa:	80 81       	ld	r24, Z
    3dac:	8f 7d       	andi	r24, 0xDF	; 223
    3dae:	80 83       	st	Z, r24
	}
}
    3db0:	ff 91       	pop	r31
    3db2:	ef 91       	pop	r30
    3db4:	9f 91       	pop	r25
    3db6:	8f 91       	pop	r24
    3db8:	0f 90       	pop	r0
    3dba:	0b be       	out	0x3b, r0	; 59
    3dbc:	0f 90       	pop	r0
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	0f 90       	pop	r0
    3dc2:	1f 90       	pop	r1
    3dc4:	18 95       	reti

00003dc6 <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    3dc6:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    3dca:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    3dce:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    3dd2:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    3dd6:	99 23       	and	r25, r25
    3dd8:	24 f4       	brge	.+8      	; 0x3de2 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    3dda:	26 e0       	ldi	r18, 0x06	; 6
    3ddc:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    3de0:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    3de2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    3de6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    3dea:	88 e9       	ldi	r24, 0x98	; 152
    3dec:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    3df0:	86 e0       	ldi	r24, 0x06	; 6
    3df2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    3df6:	08 95       	ret

00003df8 <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    3df8:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <_ZL12UART3_RxHead>
    3dfc:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_ZL12UART3_RxTail>
    3e00:	98 17       	cp	r25, r24
    3e02:	91 f0       	breq	.+36     	; 0x3e28 <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    3e04:	e0 91 70 04 	lds	r30, 0x0470	; 0x800470 <_ZL12UART3_RxTail>
    3e08:	ef 5f       	subi	r30, 0xFF	; 255
    3e0a:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    3e0c:	e0 93 70 04 	sts	0x0470, r30	; 0x800470 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	ec 58       	subi	r30, 0x8C	; 140
    3e14:	fb 4f       	sbci	r31, 0xFB	; 251
    3e16:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    3e18:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <_ZL17UART3_LastRxError>
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	98 2f       	mov	r25, r24
    3e20:	88 27       	eor	r24, r24
    3e22:	82 0f       	add	r24, r18
    3e24:	91 1d       	adc	r25, r1
    3e26:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    3e2c:	08 95       	ret

00003e2e <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    3e2e:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <_ZL12UART3_TxHead>
    3e32:	2f 5f       	subi	r18, 0xFF	; 255
    3e34:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    3e36:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZL12UART3_TxTail>
    3e3a:	29 17       	cp	r18, r25
    3e3c:	e1 f3       	breq	.-8      	; 0x3e36 <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    3e3e:	e2 2f       	mov	r30, r18
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	ec 56       	subi	r30, 0x6C	; 108
    3e44:	fb 4f       	sbci	r31, 0xFB	; 251
    3e46:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    3e48:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    3e4c:	e1 e3       	ldi	r30, 0x31	; 49
    3e4e:	f1 e0       	ldi	r31, 0x01	; 1
    3e50:	80 81       	ld	r24, Z
    3e52:	80 62       	ori	r24, 0x20	; 32
    3e54:	80 83       	st	Z, r24
    3e56:	08 95       	ret

00003e58 <__subsf3>:
    3e58:	50 58       	subi	r21, 0x80	; 128

00003e5a <__addsf3>:
    3e5a:	bb 27       	eor	r27, r27
    3e5c:	aa 27       	eor	r26, r26
    3e5e:	0e d0       	rcall	.+28     	; 0x3e7c <__addsf3x>
    3e60:	27 c2       	rjmp	.+1102   	; 0x42b0 <__fp_round>
    3e62:	f0 d1       	rcall	.+992    	; 0x4244 <__fp_pscA>
    3e64:	30 f0       	brcs	.+12     	; 0x3e72 <__addsf3+0x18>
    3e66:	f5 d1       	rcall	.+1002   	; 0x4252 <__fp_pscB>
    3e68:	20 f0       	brcs	.+8      	; 0x3e72 <__addsf3+0x18>
    3e6a:	31 f4       	brne	.+12     	; 0x3e78 <__addsf3+0x1e>
    3e6c:	9f 3f       	cpi	r25, 0xFF	; 255
    3e6e:	11 f4       	brne	.+4      	; 0x3e74 <__addsf3+0x1a>
    3e70:	1e f4       	brtc	.+6      	; 0x3e78 <__addsf3+0x1e>
    3e72:	c0 c1       	rjmp	.+896    	; 0x41f4 <__fp_nan>
    3e74:	0e f4       	brtc	.+2      	; 0x3e78 <__addsf3+0x1e>
    3e76:	e0 95       	com	r30
    3e78:	e7 fb       	bst	r30, 7
    3e7a:	b6 c1       	rjmp	.+876    	; 0x41e8 <__fp_inf>

00003e7c <__addsf3x>:
    3e7c:	e9 2f       	mov	r30, r25
    3e7e:	3a d2       	rcall	.+1140   	; 0x42f4 <__fp_split3>
    3e80:	80 f3       	brcs	.-32     	; 0x3e62 <__addsf3+0x8>
    3e82:	ba 17       	cp	r27, r26
    3e84:	62 07       	cpc	r22, r18
    3e86:	73 07       	cpc	r23, r19
    3e88:	84 07       	cpc	r24, r20
    3e8a:	95 07       	cpc	r25, r21
    3e8c:	18 f0       	brcs	.+6      	; 0x3e94 <__addsf3x+0x18>
    3e8e:	71 f4       	brne	.+28     	; 0x3eac <__addsf3x+0x30>
    3e90:	9e f5       	brtc	.+102    	; 0x3ef8 <__addsf3x+0x7c>
    3e92:	52 c2       	rjmp	.+1188   	; 0x4338 <__fp_zero>
    3e94:	0e f4       	brtc	.+2      	; 0x3e98 <__addsf3x+0x1c>
    3e96:	e0 95       	com	r30
    3e98:	0b 2e       	mov	r0, r27
    3e9a:	ba 2f       	mov	r27, r26
    3e9c:	a0 2d       	mov	r26, r0
    3e9e:	0b 01       	movw	r0, r22
    3ea0:	b9 01       	movw	r22, r18
    3ea2:	90 01       	movw	r18, r0
    3ea4:	0c 01       	movw	r0, r24
    3ea6:	ca 01       	movw	r24, r20
    3ea8:	a0 01       	movw	r20, r0
    3eaa:	11 24       	eor	r1, r1
    3eac:	ff 27       	eor	r31, r31
    3eae:	59 1b       	sub	r21, r25
    3eb0:	99 f0       	breq	.+38     	; 0x3ed8 <__addsf3x+0x5c>
    3eb2:	59 3f       	cpi	r21, 0xF9	; 249
    3eb4:	50 f4       	brcc	.+20     	; 0x3eca <__addsf3x+0x4e>
    3eb6:	50 3e       	cpi	r21, 0xE0	; 224
    3eb8:	68 f1       	brcs	.+90     	; 0x3f14 <__addsf3x+0x98>
    3eba:	1a 16       	cp	r1, r26
    3ebc:	f0 40       	sbci	r31, 0x00	; 0
    3ebe:	a2 2f       	mov	r26, r18
    3ec0:	23 2f       	mov	r18, r19
    3ec2:	34 2f       	mov	r19, r20
    3ec4:	44 27       	eor	r20, r20
    3ec6:	58 5f       	subi	r21, 0xF8	; 248
    3ec8:	f3 cf       	rjmp	.-26     	; 0x3eb0 <__addsf3x+0x34>
    3eca:	46 95       	lsr	r20
    3ecc:	37 95       	ror	r19
    3ece:	27 95       	ror	r18
    3ed0:	a7 95       	ror	r26
    3ed2:	f0 40       	sbci	r31, 0x00	; 0
    3ed4:	53 95       	inc	r21
    3ed6:	c9 f7       	brne	.-14     	; 0x3eca <__addsf3x+0x4e>
    3ed8:	7e f4       	brtc	.+30     	; 0x3ef8 <__addsf3x+0x7c>
    3eda:	1f 16       	cp	r1, r31
    3edc:	ba 0b       	sbc	r27, r26
    3ede:	62 0b       	sbc	r22, r18
    3ee0:	73 0b       	sbc	r23, r19
    3ee2:	84 0b       	sbc	r24, r20
    3ee4:	ba f0       	brmi	.+46     	; 0x3f14 <__addsf3x+0x98>
    3ee6:	91 50       	subi	r25, 0x01	; 1
    3ee8:	a1 f0       	breq	.+40     	; 0x3f12 <__addsf3x+0x96>
    3eea:	ff 0f       	add	r31, r31
    3eec:	bb 1f       	adc	r27, r27
    3eee:	66 1f       	adc	r22, r22
    3ef0:	77 1f       	adc	r23, r23
    3ef2:	88 1f       	adc	r24, r24
    3ef4:	c2 f7       	brpl	.-16     	; 0x3ee6 <__addsf3x+0x6a>
    3ef6:	0e c0       	rjmp	.+28     	; 0x3f14 <__addsf3x+0x98>
    3ef8:	ba 0f       	add	r27, r26
    3efa:	62 1f       	adc	r22, r18
    3efc:	73 1f       	adc	r23, r19
    3efe:	84 1f       	adc	r24, r20
    3f00:	48 f4       	brcc	.+18     	; 0x3f14 <__addsf3x+0x98>
    3f02:	87 95       	ror	r24
    3f04:	77 95       	ror	r23
    3f06:	67 95       	ror	r22
    3f08:	b7 95       	ror	r27
    3f0a:	f7 95       	ror	r31
    3f0c:	9e 3f       	cpi	r25, 0xFE	; 254
    3f0e:	08 f0       	brcs	.+2      	; 0x3f12 <__addsf3x+0x96>
    3f10:	b3 cf       	rjmp	.-154    	; 0x3e78 <__addsf3+0x1e>
    3f12:	93 95       	inc	r25
    3f14:	88 0f       	add	r24, r24
    3f16:	08 f0       	brcs	.+2      	; 0x3f1a <__addsf3x+0x9e>
    3f18:	99 27       	eor	r25, r25
    3f1a:	ee 0f       	add	r30, r30
    3f1c:	97 95       	ror	r25
    3f1e:	87 95       	ror	r24
    3f20:	08 95       	ret
    3f22:	90 d1       	rcall	.+800    	; 0x4244 <__fp_pscA>
    3f24:	58 f0       	brcs	.+22     	; 0x3f3c <__addsf3x+0xc0>
    3f26:	80 e8       	ldi	r24, 0x80	; 128
    3f28:	91 e0       	ldi	r25, 0x01	; 1
    3f2a:	09 f4       	brne	.+2      	; 0x3f2e <__addsf3x+0xb2>
    3f2c:	9e ef       	ldi	r25, 0xFE	; 254
    3f2e:	91 d1       	rcall	.+802    	; 0x4252 <__fp_pscB>
    3f30:	28 f0       	brcs	.+10     	; 0x3f3c <__addsf3x+0xc0>
    3f32:	40 e8       	ldi	r20, 0x80	; 128
    3f34:	51 e0       	ldi	r21, 0x01	; 1
    3f36:	59 f4       	brne	.+22     	; 0x3f4e <atan2+0xe>
    3f38:	5e ef       	ldi	r21, 0xFE	; 254
    3f3a:	09 c0       	rjmp	.+18     	; 0x3f4e <atan2+0xe>
    3f3c:	5b c1       	rjmp	.+694    	; 0x41f4 <__fp_nan>
    3f3e:	fc c1       	rjmp	.+1016   	; 0x4338 <__fp_zero>

00003f40 <atan2>:
    3f40:	e9 2f       	mov	r30, r25
    3f42:	e0 78       	andi	r30, 0x80	; 128
    3f44:	d7 d1       	rcall	.+942    	; 0x42f4 <__fp_split3>
    3f46:	68 f3       	brcs	.-38     	; 0x3f22 <__addsf3x+0xa6>
    3f48:	09 2e       	mov	r0, r25
    3f4a:	05 2a       	or	r0, r21
    3f4c:	c1 f3       	breq	.-16     	; 0x3f3e <__addsf3x+0xc2>
    3f4e:	26 17       	cp	r18, r22
    3f50:	37 07       	cpc	r19, r23
    3f52:	48 07       	cpc	r20, r24
    3f54:	59 07       	cpc	r21, r25
    3f56:	38 f0       	brcs	.+14     	; 0x3f66 <atan2+0x26>
    3f58:	0e 2e       	mov	r0, r30
    3f5a:	07 f8       	bld	r0, 7
    3f5c:	e0 25       	eor	r30, r0
    3f5e:	69 f0       	breq	.+26     	; 0x3f7a <atan2+0x3a>
    3f60:	e0 25       	eor	r30, r0
    3f62:	e0 64       	ori	r30, 0x40	; 64
    3f64:	0a c0       	rjmp	.+20     	; 0x3f7a <atan2+0x3a>
    3f66:	ef 63       	ori	r30, 0x3F	; 63
    3f68:	07 f8       	bld	r0, 7
    3f6a:	00 94       	com	r0
    3f6c:	07 fa       	bst	r0, 7
    3f6e:	db 01       	movw	r26, r22
    3f70:	b9 01       	movw	r22, r18
    3f72:	9d 01       	movw	r18, r26
    3f74:	dc 01       	movw	r26, r24
    3f76:	ca 01       	movw	r24, r20
    3f78:	ad 01       	movw	r20, r26
    3f7a:	ef 93       	push	r30
    3f7c:	4a d0       	rcall	.+148    	; 0x4012 <__divsf3_pse>
    3f7e:	98 d1       	rcall	.+816    	; 0x42b0 <__fp_round>
    3f80:	0a d0       	rcall	.+20     	; 0x3f96 <atan>
    3f82:	5f 91       	pop	r21
    3f84:	55 23       	and	r21, r21
    3f86:	31 f0       	breq	.+12     	; 0x3f94 <atan2+0x54>
    3f88:	2b ed       	ldi	r18, 0xDB	; 219
    3f8a:	3f e0       	ldi	r19, 0x0F	; 15
    3f8c:	49 e4       	ldi	r20, 0x49	; 73
    3f8e:	50 fd       	sbrc	r21, 0
    3f90:	49 ec       	ldi	r20, 0xC9	; 201
    3f92:	63 cf       	rjmp	.-314    	; 0x3e5a <__addsf3>
    3f94:	08 95       	ret

00003f96 <atan>:
    3f96:	df 93       	push	r29
    3f98:	dd 27       	eor	r29, r29
    3f9a:	b9 2f       	mov	r27, r25
    3f9c:	bf 77       	andi	r27, 0x7F	; 127
    3f9e:	40 e8       	ldi	r20, 0x80	; 128
    3fa0:	5f e3       	ldi	r21, 0x3F	; 63
    3fa2:	16 16       	cp	r1, r22
    3fa4:	17 06       	cpc	r1, r23
    3fa6:	48 07       	cpc	r20, r24
    3fa8:	5b 07       	cpc	r21, r27
    3faa:	10 f4       	brcc	.+4      	; 0x3fb0 <atan+0x1a>
    3fac:	d9 2f       	mov	r29, r25
    3fae:	cf d1       	rcall	.+926    	; 0x434e <inverse>
    3fb0:	9f 93       	push	r25
    3fb2:	8f 93       	push	r24
    3fb4:	7f 93       	push	r23
    3fb6:	6f 93       	push	r22
    3fb8:	7c d2       	rcall	.+1272   	; 0x44b2 <square>
    3fba:	e4 ee       	ldi	r30, 0xE4	; 228
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	1d d1       	rcall	.+570    	; 0x41fa <__fp_powser>
    3fc0:	77 d1       	rcall	.+750    	; 0x42b0 <__fp_round>
    3fc2:	2f 91       	pop	r18
    3fc4:	3f 91       	pop	r19
    3fc6:	4f 91       	pop	r20
    3fc8:	5f 91       	pop	r21
    3fca:	d4 d1       	rcall	.+936    	; 0x4374 <__mulsf3x>
    3fcc:	dd 23       	and	r29, r29
    3fce:	49 f0       	breq	.+18     	; 0x3fe2 <atan+0x4c>
    3fd0:	90 58       	subi	r25, 0x80	; 128
    3fd2:	a2 ea       	ldi	r26, 0xA2	; 162
    3fd4:	2a ed       	ldi	r18, 0xDA	; 218
    3fd6:	3f e0       	ldi	r19, 0x0F	; 15
    3fd8:	49 ec       	ldi	r20, 0xC9	; 201
    3fda:	5f e3       	ldi	r21, 0x3F	; 63
    3fdc:	d0 78       	andi	r29, 0x80	; 128
    3fde:	5d 27       	eor	r21, r29
    3fe0:	4d df       	rcall	.-358    	; 0x3e7c <__addsf3x>
    3fe2:	df 91       	pop	r29
    3fe4:	65 c1       	rjmp	.+714    	; 0x42b0 <__fp_round>

00003fe6 <__cmpsf2>:
    3fe6:	dc d0       	rcall	.+440    	; 0x41a0 <__fp_cmp>
    3fe8:	08 f4       	brcc	.+2      	; 0x3fec <__cmpsf2+0x6>
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	08 95       	ret

00003fee <cos>:
    3fee:	39 d1       	rcall	.+626    	; 0x4262 <__fp_rempio2>
    3ff0:	e3 95       	inc	r30
    3ff2:	6f c1       	rjmp	.+734    	; 0x42d2 <__fp_sinus>

00003ff4 <__divsf3>:
    3ff4:	0c d0       	rcall	.+24     	; 0x400e <__divsf3x>
    3ff6:	5c c1       	rjmp	.+696    	; 0x42b0 <__fp_round>
    3ff8:	2c d1       	rcall	.+600    	; 0x4252 <__fp_pscB>
    3ffa:	40 f0       	brcs	.+16     	; 0x400c <__divsf3+0x18>
    3ffc:	23 d1       	rcall	.+582    	; 0x4244 <__fp_pscA>
    3ffe:	30 f0       	brcs	.+12     	; 0x400c <__divsf3+0x18>
    4000:	21 f4       	brne	.+8      	; 0x400a <__divsf3+0x16>
    4002:	5f 3f       	cpi	r21, 0xFF	; 255
    4004:	19 f0       	breq	.+6      	; 0x400c <__divsf3+0x18>
    4006:	f0 c0       	rjmp	.+480    	; 0x41e8 <__fp_inf>
    4008:	51 11       	cpse	r21, r1
    400a:	97 c1       	rjmp	.+814    	; 0x433a <__fp_szero>
    400c:	f3 c0       	rjmp	.+486    	; 0x41f4 <__fp_nan>

0000400e <__divsf3x>:
    400e:	72 d1       	rcall	.+740    	; 0x42f4 <__fp_split3>
    4010:	98 f3       	brcs	.-26     	; 0x3ff8 <__divsf3+0x4>

00004012 <__divsf3_pse>:
    4012:	99 23       	and	r25, r25
    4014:	c9 f3       	breq	.-14     	; 0x4008 <__divsf3+0x14>
    4016:	55 23       	and	r21, r21
    4018:	b1 f3       	breq	.-20     	; 0x4006 <__divsf3+0x12>
    401a:	95 1b       	sub	r25, r21
    401c:	55 0b       	sbc	r21, r21
    401e:	bb 27       	eor	r27, r27
    4020:	aa 27       	eor	r26, r26
    4022:	62 17       	cp	r22, r18
    4024:	73 07       	cpc	r23, r19
    4026:	84 07       	cpc	r24, r20
    4028:	38 f0       	brcs	.+14     	; 0x4038 <__divsf3_pse+0x26>
    402a:	9f 5f       	subi	r25, 0xFF	; 255
    402c:	5f 4f       	sbci	r21, 0xFF	; 255
    402e:	22 0f       	add	r18, r18
    4030:	33 1f       	adc	r19, r19
    4032:	44 1f       	adc	r20, r20
    4034:	aa 1f       	adc	r26, r26
    4036:	a9 f3       	breq	.-22     	; 0x4022 <__divsf3_pse+0x10>
    4038:	33 d0       	rcall	.+102    	; 0x40a0 <__divsf3_pse+0x8e>
    403a:	0e 2e       	mov	r0, r30
    403c:	3a f0       	brmi	.+14     	; 0x404c <__divsf3_pse+0x3a>
    403e:	e0 e8       	ldi	r30, 0x80	; 128
    4040:	30 d0       	rcall	.+96     	; 0x40a2 <__divsf3_pse+0x90>
    4042:	91 50       	subi	r25, 0x01	; 1
    4044:	50 40       	sbci	r21, 0x00	; 0
    4046:	e6 95       	lsr	r30
    4048:	00 1c       	adc	r0, r0
    404a:	ca f7       	brpl	.-14     	; 0x403e <__divsf3_pse+0x2c>
    404c:	29 d0       	rcall	.+82     	; 0x40a0 <__divsf3_pse+0x8e>
    404e:	fe 2f       	mov	r31, r30
    4050:	27 d0       	rcall	.+78     	; 0x40a0 <__divsf3_pse+0x8e>
    4052:	66 0f       	add	r22, r22
    4054:	77 1f       	adc	r23, r23
    4056:	88 1f       	adc	r24, r24
    4058:	bb 1f       	adc	r27, r27
    405a:	26 17       	cp	r18, r22
    405c:	37 07       	cpc	r19, r23
    405e:	48 07       	cpc	r20, r24
    4060:	ab 07       	cpc	r26, r27
    4062:	b0 e8       	ldi	r27, 0x80	; 128
    4064:	09 f0       	breq	.+2      	; 0x4068 <__divsf3_pse+0x56>
    4066:	bb 0b       	sbc	r27, r27
    4068:	80 2d       	mov	r24, r0
    406a:	bf 01       	movw	r22, r30
    406c:	ff 27       	eor	r31, r31
    406e:	93 58       	subi	r25, 0x83	; 131
    4070:	5f 4f       	sbci	r21, 0xFF	; 255
    4072:	2a f0       	brmi	.+10     	; 0x407e <__divsf3_pse+0x6c>
    4074:	9e 3f       	cpi	r25, 0xFE	; 254
    4076:	51 05       	cpc	r21, r1
    4078:	68 f0       	brcs	.+26     	; 0x4094 <__divsf3_pse+0x82>
    407a:	b6 c0       	rjmp	.+364    	; 0x41e8 <__fp_inf>
    407c:	5e c1       	rjmp	.+700    	; 0x433a <__fp_szero>
    407e:	5f 3f       	cpi	r21, 0xFF	; 255
    4080:	ec f3       	brlt	.-6      	; 0x407c <__divsf3_pse+0x6a>
    4082:	98 3e       	cpi	r25, 0xE8	; 232
    4084:	dc f3       	brlt	.-10     	; 0x407c <__divsf3_pse+0x6a>
    4086:	86 95       	lsr	r24
    4088:	77 95       	ror	r23
    408a:	67 95       	ror	r22
    408c:	b7 95       	ror	r27
    408e:	f7 95       	ror	r31
    4090:	9f 5f       	subi	r25, 0xFF	; 255
    4092:	c9 f7       	brne	.-14     	; 0x4086 <__divsf3_pse+0x74>
    4094:	88 0f       	add	r24, r24
    4096:	91 1d       	adc	r25, r1
    4098:	96 95       	lsr	r25
    409a:	87 95       	ror	r24
    409c:	97 f9       	bld	r25, 7
    409e:	08 95       	ret
    40a0:	e1 e0       	ldi	r30, 0x01	; 1
    40a2:	66 0f       	add	r22, r22
    40a4:	77 1f       	adc	r23, r23
    40a6:	88 1f       	adc	r24, r24
    40a8:	bb 1f       	adc	r27, r27
    40aa:	62 17       	cp	r22, r18
    40ac:	73 07       	cpc	r23, r19
    40ae:	84 07       	cpc	r24, r20
    40b0:	ba 07       	cpc	r27, r26
    40b2:	20 f0       	brcs	.+8      	; 0x40bc <__divsf3_pse+0xaa>
    40b4:	62 1b       	sub	r22, r18
    40b6:	73 0b       	sbc	r23, r19
    40b8:	84 0b       	sbc	r24, r20
    40ba:	ba 0b       	sbc	r27, r26
    40bc:	ee 1f       	adc	r30, r30
    40be:	88 f7       	brcc	.-30     	; 0x40a2 <__divsf3_pse+0x90>
    40c0:	e0 95       	com	r30
    40c2:	08 95       	ret

000040c4 <__fixsfsi>:
    40c4:	04 d0       	rcall	.+8      	; 0x40ce <__fixunssfsi>
    40c6:	68 94       	set
    40c8:	b1 11       	cpse	r27, r1
    40ca:	37 c1       	rjmp	.+622    	; 0x433a <__fp_szero>
    40cc:	08 95       	ret

000040ce <__fixunssfsi>:
    40ce:	1a d1       	rcall	.+564    	; 0x4304 <__fp_splitA>
    40d0:	88 f0       	brcs	.+34     	; 0x40f4 <__fixunssfsi+0x26>
    40d2:	9f 57       	subi	r25, 0x7F	; 127
    40d4:	90 f0       	brcs	.+36     	; 0x40fa <__fixunssfsi+0x2c>
    40d6:	b9 2f       	mov	r27, r25
    40d8:	99 27       	eor	r25, r25
    40da:	b7 51       	subi	r27, 0x17	; 23
    40dc:	a0 f0       	brcs	.+40     	; 0x4106 <__fixunssfsi+0x38>
    40de:	d1 f0       	breq	.+52     	; 0x4114 <__fixunssfsi+0x46>
    40e0:	66 0f       	add	r22, r22
    40e2:	77 1f       	adc	r23, r23
    40e4:	88 1f       	adc	r24, r24
    40e6:	99 1f       	adc	r25, r25
    40e8:	1a f0       	brmi	.+6      	; 0x40f0 <__fixunssfsi+0x22>
    40ea:	ba 95       	dec	r27
    40ec:	c9 f7       	brne	.-14     	; 0x40e0 <__fixunssfsi+0x12>
    40ee:	12 c0       	rjmp	.+36     	; 0x4114 <__fixunssfsi+0x46>
    40f0:	b1 30       	cpi	r27, 0x01	; 1
    40f2:	81 f0       	breq	.+32     	; 0x4114 <__fixunssfsi+0x46>
    40f4:	21 d1       	rcall	.+578    	; 0x4338 <__fp_zero>
    40f6:	b1 e0       	ldi	r27, 0x01	; 1
    40f8:	08 95       	ret
    40fa:	1e c1       	rjmp	.+572    	; 0x4338 <__fp_zero>
    40fc:	67 2f       	mov	r22, r23
    40fe:	78 2f       	mov	r23, r24
    4100:	88 27       	eor	r24, r24
    4102:	b8 5f       	subi	r27, 0xF8	; 248
    4104:	39 f0       	breq	.+14     	; 0x4114 <__fixunssfsi+0x46>
    4106:	b9 3f       	cpi	r27, 0xF9	; 249
    4108:	cc f3       	brlt	.-14     	; 0x40fc <__fixunssfsi+0x2e>
    410a:	86 95       	lsr	r24
    410c:	77 95       	ror	r23
    410e:	67 95       	ror	r22
    4110:	b3 95       	inc	r27
    4112:	d9 f7       	brne	.-10     	; 0x410a <__fixunssfsi+0x3c>
    4114:	3e f4       	brtc	.+14     	; 0x4124 <__fixunssfsi+0x56>
    4116:	90 95       	com	r25
    4118:	80 95       	com	r24
    411a:	70 95       	com	r23
    411c:	61 95       	neg	r22
    411e:	7f 4f       	sbci	r23, 0xFF	; 255
    4120:	8f 4f       	sbci	r24, 0xFF	; 255
    4122:	9f 4f       	sbci	r25, 0xFF	; 255
    4124:	08 95       	ret

00004126 <__floatunsisf>:
    4126:	e8 94       	clt
    4128:	09 c0       	rjmp	.+18     	; 0x413c <__floatsisf+0x12>

0000412a <__floatsisf>:
    412a:	97 fb       	bst	r25, 7
    412c:	3e f4       	brtc	.+14     	; 0x413c <__floatsisf+0x12>
    412e:	90 95       	com	r25
    4130:	80 95       	com	r24
    4132:	70 95       	com	r23
    4134:	61 95       	neg	r22
    4136:	7f 4f       	sbci	r23, 0xFF	; 255
    4138:	8f 4f       	sbci	r24, 0xFF	; 255
    413a:	9f 4f       	sbci	r25, 0xFF	; 255
    413c:	99 23       	and	r25, r25
    413e:	a9 f0       	breq	.+42     	; 0x416a <__floatsisf+0x40>
    4140:	f9 2f       	mov	r31, r25
    4142:	96 e9       	ldi	r25, 0x96	; 150
    4144:	bb 27       	eor	r27, r27
    4146:	93 95       	inc	r25
    4148:	f6 95       	lsr	r31
    414a:	87 95       	ror	r24
    414c:	77 95       	ror	r23
    414e:	67 95       	ror	r22
    4150:	b7 95       	ror	r27
    4152:	f1 11       	cpse	r31, r1
    4154:	f8 cf       	rjmp	.-16     	; 0x4146 <__floatsisf+0x1c>
    4156:	fa f4       	brpl	.+62     	; 0x4196 <__floatsisf+0x6c>
    4158:	bb 0f       	add	r27, r27
    415a:	11 f4       	brne	.+4      	; 0x4160 <__floatsisf+0x36>
    415c:	60 ff       	sbrs	r22, 0
    415e:	1b c0       	rjmp	.+54     	; 0x4196 <__floatsisf+0x6c>
    4160:	6f 5f       	subi	r22, 0xFF	; 255
    4162:	7f 4f       	sbci	r23, 0xFF	; 255
    4164:	8f 4f       	sbci	r24, 0xFF	; 255
    4166:	9f 4f       	sbci	r25, 0xFF	; 255
    4168:	16 c0       	rjmp	.+44     	; 0x4196 <__floatsisf+0x6c>
    416a:	88 23       	and	r24, r24
    416c:	11 f0       	breq	.+4      	; 0x4172 <__floatsisf+0x48>
    416e:	96 e9       	ldi	r25, 0x96	; 150
    4170:	11 c0       	rjmp	.+34     	; 0x4194 <__floatsisf+0x6a>
    4172:	77 23       	and	r23, r23
    4174:	21 f0       	breq	.+8      	; 0x417e <__floatsisf+0x54>
    4176:	9e e8       	ldi	r25, 0x8E	; 142
    4178:	87 2f       	mov	r24, r23
    417a:	76 2f       	mov	r23, r22
    417c:	05 c0       	rjmp	.+10     	; 0x4188 <__floatsisf+0x5e>
    417e:	66 23       	and	r22, r22
    4180:	71 f0       	breq	.+28     	; 0x419e <__floatsisf+0x74>
    4182:	96 e8       	ldi	r25, 0x86	; 134
    4184:	86 2f       	mov	r24, r22
    4186:	70 e0       	ldi	r23, 0x00	; 0
    4188:	60 e0       	ldi	r22, 0x00	; 0
    418a:	2a f0       	brmi	.+10     	; 0x4196 <__floatsisf+0x6c>
    418c:	9a 95       	dec	r25
    418e:	66 0f       	add	r22, r22
    4190:	77 1f       	adc	r23, r23
    4192:	88 1f       	adc	r24, r24
    4194:	da f7       	brpl	.-10     	; 0x418c <__floatsisf+0x62>
    4196:	88 0f       	add	r24, r24
    4198:	96 95       	lsr	r25
    419a:	87 95       	ror	r24
    419c:	97 f9       	bld	r25, 7
    419e:	08 95       	ret

000041a0 <__fp_cmp>:
    41a0:	99 0f       	add	r25, r25
    41a2:	00 08       	sbc	r0, r0
    41a4:	55 0f       	add	r21, r21
    41a6:	aa 0b       	sbc	r26, r26
    41a8:	e0 e8       	ldi	r30, 0x80	; 128
    41aa:	fe ef       	ldi	r31, 0xFE	; 254
    41ac:	16 16       	cp	r1, r22
    41ae:	17 06       	cpc	r1, r23
    41b0:	e8 07       	cpc	r30, r24
    41b2:	f9 07       	cpc	r31, r25
    41b4:	c0 f0       	brcs	.+48     	; 0x41e6 <__fp_cmp+0x46>
    41b6:	12 16       	cp	r1, r18
    41b8:	13 06       	cpc	r1, r19
    41ba:	e4 07       	cpc	r30, r20
    41bc:	f5 07       	cpc	r31, r21
    41be:	98 f0       	brcs	.+38     	; 0x41e6 <__fp_cmp+0x46>
    41c0:	62 1b       	sub	r22, r18
    41c2:	73 0b       	sbc	r23, r19
    41c4:	84 0b       	sbc	r24, r20
    41c6:	95 0b       	sbc	r25, r21
    41c8:	39 f4       	brne	.+14     	; 0x41d8 <__fp_cmp+0x38>
    41ca:	0a 26       	eor	r0, r26
    41cc:	61 f0       	breq	.+24     	; 0x41e6 <__fp_cmp+0x46>
    41ce:	23 2b       	or	r18, r19
    41d0:	24 2b       	or	r18, r20
    41d2:	25 2b       	or	r18, r21
    41d4:	21 f4       	brne	.+8      	; 0x41de <__fp_cmp+0x3e>
    41d6:	08 95       	ret
    41d8:	0a 26       	eor	r0, r26
    41da:	09 f4       	brne	.+2      	; 0x41de <__fp_cmp+0x3e>
    41dc:	a1 40       	sbci	r26, 0x01	; 1
    41de:	a6 95       	lsr	r26
    41e0:	8f ef       	ldi	r24, 0xFF	; 255
    41e2:	81 1d       	adc	r24, r1
    41e4:	81 1d       	adc	r24, r1
    41e6:	08 95       	ret

000041e8 <__fp_inf>:
    41e8:	97 f9       	bld	r25, 7
    41ea:	9f 67       	ori	r25, 0x7F	; 127
    41ec:	80 e8       	ldi	r24, 0x80	; 128
    41ee:	70 e0       	ldi	r23, 0x00	; 0
    41f0:	60 e0       	ldi	r22, 0x00	; 0
    41f2:	08 95       	ret

000041f4 <__fp_nan>:
    41f4:	9f ef       	ldi	r25, 0xFF	; 255
    41f6:	80 ec       	ldi	r24, 0xC0	; 192
    41f8:	08 95       	ret

000041fa <__fp_powser>:
    41fa:	df 93       	push	r29
    41fc:	cf 93       	push	r28
    41fe:	1f 93       	push	r17
    4200:	0f 93       	push	r16
    4202:	ff 92       	push	r15
    4204:	ef 92       	push	r14
    4206:	df 92       	push	r13
    4208:	7b 01       	movw	r14, r22
    420a:	8c 01       	movw	r16, r24
    420c:	68 94       	set
    420e:	05 c0       	rjmp	.+10     	; 0x421a <__fp_powser+0x20>
    4210:	da 2e       	mov	r13, r26
    4212:	ef 01       	movw	r28, r30
    4214:	af d0       	rcall	.+350    	; 0x4374 <__mulsf3x>
    4216:	fe 01       	movw	r30, r28
    4218:	e8 94       	clt
    421a:	a5 91       	lpm	r26, Z+
    421c:	25 91       	lpm	r18, Z+
    421e:	35 91       	lpm	r19, Z+
    4220:	45 91       	lpm	r20, Z+
    4222:	55 91       	lpm	r21, Z+
    4224:	ae f3       	brts	.-22     	; 0x4210 <__fp_powser+0x16>
    4226:	ef 01       	movw	r28, r30
    4228:	29 de       	rcall	.-942    	; 0x3e7c <__addsf3x>
    422a:	fe 01       	movw	r30, r28
    422c:	97 01       	movw	r18, r14
    422e:	a8 01       	movw	r20, r16
    4230:	da 94       	dec	r13
    4232:	79 f7       	brne	.-34     	; 0x4212 <__fp_powser+0x18>
    4234:	df 90       	pop	r13
    4236:	ef 90       	pop	r14
    4238:	ff 90       	pop	r15
    423a:	0f 91       	pop	r16
    423c:	1f 91       	pop	r17
    423e:	cf 91       	pop	r28
    4240:	df 91       	pop	r29
    4242:	08 95       	ret

00004244 <__fp_pscA>:
    4244:	00 24       	eor	r0, r0
    4246:	0a 94       	dec	r0
    4248:	16 16       	cp	r1, r22
    424a:	17 06       	cpc	r1, r23
    424c:	18 06       	cpc	r1, r24
    424e:	09 06       	cpc	r0, r25
    4250:	08 95       	ret

00004252 <__fp_pscB>:
    4252:	00 24       	eor	r0, r0
    4254:	0a 94       	dec	r0
    4256:	12 16       	cp	r1, r18
    4258:	13 06       	cpc	r1, r19
    425a:	14 06       	cpc	r1, r20
    425c:	05 06       	cpc	r0, r21
    425e:	08 95       	ret
    4260:	c9 cf       	rjmp	.-110    	; 0x41f4 <__fp_nan>

00004262 <__fp_rempio2>:
    4262:	50 d0       	rcall	.+160    	; 0x4304 <__fp_splitA>
    4264:	e8 f3       	brcs	.-6      	; 0x4260 <__fp_pscB+0xe>
    4266:	e8 94       	clt
    4268:	e0 e0       	ldi	r30, 0x00	; 0
    426a:	bb 27       	eor	r27, r27
    426c:	9f 57       	subi	r25, 0x7F	; 127
    426e:	f0 f0       	brcs	.+60     	; 0x42ac <__fp_rempio2+0x4a>
    4270:	2a ed       	ldi	r18, 0xDA	; 218
    4272:	3f e0       	ldi	r19, 0x0F	; 15
    4274:	49 ec       	ldi	r20, 0xC9	; 201
    4276:	06 c0       	rjmp	.+12     	; 0x4284 <__fp_rempio2+0x22>
    4278:	ee 0f       	add	r30, r30
    427a:	bb 0f       	add	r27, r27
    427c:	66 1f       	adc	r22, r22
    427e:	77 1f       	adc	r23, r23
    4280:	88 1f       	adc	r24, r24
    4282:	28 f0       	brcs	.+10     	; 0x428e <__fp_rempio2+0x2c>
    4284:	b2 3a       	cpi	r27, 0xA2	; 162
    4286:	62 07       	cpc	r22, r18
    4288:	73 07       	cpc	r23, r19
    428a:	84 07       	cpc	r24, r20
    428c:	28 f0       	brcs	.+10     	; 0x4298 <__fp_rempio2+0x36>
    428e:	b2 5a       	subi	r27, 0xA2	; 162
    4290:	62 0b       	sbc	r22, r18
    4292:	73 0b       	sbc	r23, r19
    4294:	84 0b       	sbc	r24, r20
    4296:	e3 95       	inc	r30
    4298:	9a 95       	dec	r25
    429a:	72 f7       	brpl	.-36     	; 0x4278 <__fp_rempio2+0x16>
    429c:	80 38       	cpi	r24, 0x80	; 128
    429e:	30 f4       	brcc	.+12     	; 0x42ac <__fp_rempio2+0x4a>
    42a0:	9a 95       	dec	r25
    42a2:	bb 0f       	add	r27, r27
    42a4:	66 1f       	adc	r22, r22
    42a6:	77 1f       	adc	r23, r23
    42a8:	88 1f       	adc	r24, r24
    42aa:	d2 f7       	brpl	.-12     	; 0x42a0 <__fp_rempio2+0x3e>
    42ac:	90 48       	sbci	r25, 0x80	; 128
    42ae:	06 c1       	rjmp	.+524    	; 0x44bc <__fp_mpack_finite>

000042b0 <__fp_round>:
    42b0:	09 2e       	mov	r0, r25
    42b2:	03 94       	inc	r0
    42b4:	00 0c       	add	r0, r0
    42b6:	11 f4       	brne	.+4      	; 0x42bc <__fp_round+0xc>
    42b8:	88 23       	and	r24, r24
    42ba:	52 f0       	brmi	.+20     	; 0x42d0 <__fp_round+0x20>
    42bc:	bb 0f       	add	r27, r27
    42be:	40 f4       	brcc	.+16     	; 0x42d0 <__fp_round+0x20>
    42c0:	bf 2b       	or	r27, r31
    42c2:	11 f4       	brne	.+4      	; 0x42c8 <__fp_round+0x18>
    42c4:	60 ff       	sbrs	r22, 0
    42c6:	04 c0       	rjmp	.+8      	; 0x42d0 <__fp_round+0x20>
    42c8:	6f 5f       	subi	r22, 0xFF	; 255
    42ca:	7f 4f       	sbci	r23, 0xFF	; 255
    42cc:	8f 4f       	sbci	r24, 0xFF	; 255
    42ce:	9f 4f       	sbci	r25, 0xFF	; 255
    42d0:	08 95       	ret

000042d2 <__fp_sinus>:
    42d2:	ef 93       	push	r30
    42d4:	e0 ff       	sbrs	r30, 0
    42d6:	06 c0       	rjmp	.+12     	; 0x42e4 <__fp_sinus+0x12>
    42d8:	a2 ea       	ldi	r26, 0xA2	; 162
    42da:	2a ed       	ldi	r18, 0xDA	; 218
    42dc:	3f e0       	ldi	r19, 0x0F	; 15
    42de:	49 ec       	ldi	r20, 0xC9	; 201
    42e0:	5f eb       	ldi	r21, 0xBF	; 191
    42e2:	cc dd       	rcall	.-1128   	; 0x3e7c <__addsf3x>
    42e4:	e5 df       	rcall	.-54     	; 0x42b0 <__fp_round>
    42e6:	0f 90       	pop	r0
    42e8:	03 94       	inc	r0
    42ea:	01 fc       	sbrc	r0, 1
    42ec:	90 58       	subi	r25, 0x80	; 128
    42ee:	e1 e1       	ldi	r30, 0x11	; 17
    42f0:	f1 e0       	ldi	r31, 0x01	; 1
    42f2:	f7 c0       	rjmp	.+494    	; 0x44e2 <__fp_powsodd>

000042f4 <__fp_split3>:
    42f4:	57 fd       	sbrc	r21, 7
    42f6:	90 58       	subi	r25, 0x80	; 128
    42f8:	44 0f       	add	r20, r20
    42fa:	55 1f       	adc	r21, r21
    42fc:	59 f0       	breq	.+22     	; 0x4314 <__fp_splitA+0x10>
    42fe:	5f 3f       	cpi	r21, 0xFF	; 255
    4300:	71 f0       	breq	.+28     	; 0x431e <__fp_splitA+0x1a>
    4302:	47 95       	ror	r20

00004304 <__fp_splitA>:
    4304:	88 0f       	add	r24, r24
    4306:	97 fb       	bst	r25, 7
    4308:	99 1f       	adc	r25, r25
    430a:	61 f0       	breq	.+24     	; 0x4324 <__fp_splitA+0x20>
    430c:	9f 3f       	cpi	r25, 0xFF	; 255
    430e:	79 f0       	breq	.+30     	; 0x432e <__fp_splitA+0x2a>
    4310:	87 95       	ror	r24
    4312:	08 95       	ret
    4314:	12 16       	cp	r1, r18
    4316:	13 06       	cpc	r1, r19
    4318:	14 06       	cpc	r1, r20
    431a:	55 1f       	adc	r21, r21
    431c:	f2 cf       	rjmp	.-28     	; 0x4302 <__fp_split3+0xe>
    431e:	46 95       	lsr	r20
    4320:	f1 df       	rcall	.-30     	; 0x4304 <__fp_splitA>
    4322:	08 c0       	rjmp	.+16     	; 0x4334 <__fp_splitA+0x30>
    4324:	16 16       	cp	r1, r22
    4326:	17 06       	cpc	r1, r23
    4328:	18 06       	cpc	r1, r24
    432a:	99 1f       	adc	r25, r25
    432c:	f1 cf       	rjmp	.-30     	; 0x4310 <__fp_splitA+0xc>
    432e:	86 95       	lsr	r24
    4330:	71 05       	cpc	r23, r1
    4332:	61 05       	cpc	r22, r1
    4334:	08 94       	sec
    4336:	08 95       	ret

00004338 <__fp_zero>:
    4338:	e8 94       	clt

0000433a <__fp_szero>:
    433a:	bb 27       	eor	r27, r27
    433c:	66 27       	eor	r22, r22
    433e:	77 27       	eor	r23, r23
    4340:	cb 01       	movw	r24, r22
    4342:	97 f9       	bld	r25, 7
    4344:	08 95       	ret

00004346 <__gesf2>:
    4346:	2c df       	rcall	.-424    	; 0x41a0 <__fp_cmp>
    4348:	08 f4       	brcc	.+2      	; 0x434c <__gesf2+0x6>
    434a:	8f ef       	ldi	r24, 0xFF	; 255
    434c:	08 95       	ret

0000434e <inverse>:
    434e:	9b 01       	movw	r18, r22
    4350:	ac 01       	movw	r20, r24
    4352:	60 e0       	ldi	r22, 0x00	; 0
    4354:	70 e0       	ldi	r23, 0x00	; 0
    4356:	80 e8       	ldi	r24, 0x80	; 128
    4358:	9f e3       	ldi	r25, 0x3F	; 63
    435a:	4c ce       	rjmp	.-872    	; 0x3ff4 <__divsf3>

0000435c <__mulsf3>:
    435c:	0b d0       	rcall	.+22     	; 0x4374 <__mulsf3x>
    435e:	a8 cf       	rjmp	.-176    	; 0x42b0 <__fp_round>
    4360:	71 df       	rcall	.-286    	; 0x4244 <__fp_pscA>
    4362:	28 f0       	brcs	.+10     	; 0x436e <__mulsf3+0x12>
    4364:	76 df       	rcall	.-276    	; 0x4252 <__fp_pscB>
    4366:	18 f0       	brcs	.+6      	; 0x436e <__mulsf3+0x12>
    4368:	95 23       	and	r25, r21
    436a:	09 f0       	breq	.+2      	; 0x436e <__mulsf3+0x12>
    436c:	3d cf       	rjmp	.-390    	; 0x41e8 <__fp_inf>
    436e:	42 cf       	rjmp	.-380    	; 0x41f4 <__fp_nan>
    4370:	11 24       	eor	r1, r1
    4372:	e3 cf       	rjmp	.-58     	; 0x433a <__fp_szero>

00004374 <__mulsf3x>:
    4374:	bf df       	rcall	.-130    	; 0x42f4 <__fp_split3>
    4376:	a0 f3       	brcs	.-24     	; 0x4360 <__mulsf3+0x4>

00004378 <__mulsf3_pse>:
    4378:	95 9f       	mul	r25, r21
    437a:	d1 f3       	breq	.-12     	; 0x4370 <__mulsf3+0x14>
    437c:	95 0f       	add	r25, r21
    437e:	50 e0       	ldi	r21, 0x00	; 0
    4380:	55 1f       	adc	r21, r21
    4382:	62 9f       	mul	r22, r18
    4384:	f0 01       	movw	r30, r0
    4386:	72 9f       	mul	r23, r18
    4388:	bb 27       	eor	r27, r27
    438a:	f0 0d       	add	r31, r0
    438c:	b1 1d       	adc	r27, r1
    438e:	63 9f       	mul	r22, r19
    4390:	aa 27       	eor	r26, r26
    4392:	f0 0d       	add	r31, r0
    4394:	b1 1d       	adc	r27, r1
    4396:	aa 1f       	adc	r26, r26
    4398:	64 9f       	mul	r22, r20
    439a:	66 27       	eor	r22, r22
    439c:	b0 0d       	add	r27, r0
    439e:	a1 1d       	adc	r26, r1
    43a0:	66 1f       	adc	r22, r22
    43a2:	82 9f       	mul	r24, r18
    43a4:	22 27       	eor	r18, r18
    43a6:	b0 0d       	add	r27, r0
    43a8:	a1 1d       	adc	r26, r1
    43aa:	62 1f       	adc	r22, r18
    43ac:	73 9f       	mul	r23, r19
    43ae:	b0 0d       	add	r27, r0
    43b0:	a1 1d       	adc	r26, r1
    43b2:	62 1f       	adc	r22, r18
    43b4:	83 9f       	mul	r24, r19
    43b6:	a0 0d       	add	r26, r0
    43b8:	61 1d       	adc	r22, r1
    43ba:	22 1f       	adc	r18, r18
    43bc:	74 9f       	mul	r23, r20
    43be:	33 27       	eor	r19, r19
    43c0:	a0 0d       	add	r26, r0
    43c2:	61 1d       	adc	r22, r1
    43c4:	23 1f       	adc	r18, r19
    43c6:	84 9f       	mul	r24, r20
    43c8:	60 0d       	add	r22, r0
    43ca:	21 1d       	adc	r18, r1
    43cc:	82 2f       	mov	r24, r18
    43ce:	76 2f       	mov	r23, r22
    43d0:	6a 2f       	mov	r22, r26
    43d2:	11 24       	eor	r1, r1
    43d4:	9f 57       	subi	r25, 0x7F	; 127
    43d6:	50 40       	sbci	r21, 0x00	; 0
    43d8:	8a f0       	brmi	.+34     	; 0x43fc <__mulsf3_pse+0x84>
    43da:	e1 f0       	breq	.+56     	; 0x4414 <__mulsf3_pse+0x9c>
    43dc:	88 23       	and	r24, r24
    43de:	4a f0       	brmi	.+18     	; 0x43f2 <__mulsf3_pse+0x7a>
    43e0:	ee 0f       	add	r30, r30
    43e2:	ff 1f       	adc	r31, r31
    43e4:	bb 1f       	adc	r27, r27
    43e6:	66 1f       	adc	r22, r22
    43e8:	77 1f       	adc	r23, r23
    43ea:	88 1f       	adc	r24, r24
    43ec:	91 50       	subi	r25, 0x01	; 1
    43ee:	50 40       	sbci	r21, 0x00	; 0
    43f0:	a9 f7       	brne	.-22     	; 0x43dc <__mulsf3_pse+0x64>
    43f2:	9e 3f       	cpi	r25, 0xFE	; 254
    43f4:	51 05       	cpc	r21, r1
    43f6:	70 f0       	brcs	.+28     	; 0x4414 <__mulsf3_pse+0x9c>
    43f8:	f7 ce       	rjmp	.-530    	; 0x41e8 <__fp_inf>
    43fa:	9f cf       	rjmp	.-194    	; 0x433a <__fp_szero>
    43fc:	5f 3f       	cpi	r21, 0xFF	; 255
    43fe:	ec f3       	brlt	.-6      	; 0x43fa <__mulsf3_pse+0x82>
    4400:	98 3e       	cpi	r25, 0xE8	; 232
    4402:	dc f3       	brlt	.-10     	; 0x43fa <__mulsf3_pse+0x82>
    4404:	86 95       	lsr	r24
    4406:	77 95       	ror	r23
    4408:	67 95       	ror	r22
    440a:	b7 95       	ror	r27
    440c:	f7 95       	ror	r31
    440e:	e7 95       	ror	r30
    4410:	9f 5f       	subi	r25, 0xFF	; 255
    4412:	c1 f7       	brne	.-16     	; 0x4404 <__mulsf3_pse+0x8c>
    4414:	fe 2b       	or	r31, r30
    4416:	88 0f       	add	r24, r24
    4418:	91 1d       	adc	r25, r1
    441a:	96 95       	lsr	r25
    441c:	87 95       	ror	r24
    441e:	97 f9       	bld	r25, 7
    4420:	08 95       	ret

00004422 <sin>:
    4422:	9f 93       	push	r25
    4424:	1e df       	rcall	.-452    	; 0x4262 <__fp_rempio2>
    4426:	0f 90       	pop	r0
    4428:	07 fc       	sbrc	r0, 7
    442a:	ee 5f       	subi	r30, 0xFE	; 254
    442c:	52 cf       	rjmp	.-348    	; 0x42d2 <__fp_sinus>
    442e:	11 f4       	brne	.+4      	; 0x4434 <sin+0x12>
    4430:	0e f4       	brtc	.+2      	; 0x4434 <sin+0x12>
    4432:	e0 ce       	rjmp	.-576    	; 0x41f4 <__fp_nan>
    4434:	41 c0       	rjmp	.+130    	; 0x44b8 <__fp_mpack>

00004436 <sqrt>:
    4436:	66 df       	rcall	.-308    	; 0x4304 <__fp_splitA>
    4438:	d0 f3       	brcs	.-12     	; 0x442e <sin+0xc>
    443a:	99 23       	and	r25, r25
    443c:	d9 f3       	breq	.-10     	; 0x4434 <sin+0x12>
    443e:	ce f3       	brts	.-14     	; 0x4432 <sin+0x10>
    4440:	9f 57       	subi	r25, 0x7F	; 127
    4442:	55 0b       	sbc	r21, r21
    4444:	87 ff       	sbrs	r24, 7
    4446:	46 d0       	rcall	.+140    	; 0x44d4 <__fp_norm2>
    4448:	00 24       	eor	r0, r0
    444a:	a0 e6       	ldi	r26, 0x60	; 96
    444c:	40 ea       	ldi	r20, 0xA0	; 160
    444e:	90 01       	movw	r18, r0
    4450:	80 58       	subi	r24, 0x80	; 128
    4452:	56 95       	lsr	r21
    4454:	97 95       	ror	r25
    4456:	28 f4       	brcc	.+10     	; 0x4462 <sqrt+0x2c>
    4458:	80 5c       	subi	r24, 0xC0	; 192
    445a:	66 0f       	add	r22, r22
    445c:	77 1f       	adc	r23, r23
    445e:	88 1f       	adc	r24, r24
    4460:	20 f0       	brcs	.+8      	; 0x446a <sqrt+0x34>
    4462:	26 17       	cp	r18, r22
    4464:	37 07       	cpc	r19, r23
    4466:	48 07       	cpc	r20, r24
    4468:	30 f4       	brcc	.+12     	; 0x4476 <sqrt+0x40>
    446a:	62 1b       	sub	r22, r18
    446c:	73 0b       	sbc	r23, r19
    446e:	84 0b       	sbc	r24, r20
    4470:	20 29       	or	r18, r0
    4472:	31 29       	or	r19, r1
    4474:	4a 2b       	or	r20, r26
    4476:	a6 95       	lsr	r26
    4478:	17 94       	ror	r1
    447a:	07 94       	ror	r0
    447c:	20 25       	eor	r18, r0
    447e:	31 25       	eor	r19, r1
    4480:	4a 27       	eor	r20, r26
    4482:	58 f7       	brcc	.-42     	; 0x445a <sqrt+0x24>
    4484:	66 0f       	add	r22, r22
    4486:	77 1f       	adc	r23, r23
    4488:	88 1f       	adc	r24, r24
    448a:	20 f0       	brcs	.+8      	; 0x4494 <sqrt+0x5e>
    448c:	26 17       	cp	r18, r22
    448e:	37 07       	cpc	r19, r23
    4490:	48 07       	cpc	r20, r24
    4492:	30 f4       	brcc	.+12     	; 0x44a0 <sqrt+0x6a>
    4494:	62 0b       	sbc	r22, r18
    4496:	73 0b       	sbc	r23, r19
    4498:	84 0b       	sbc	r24, r20
    449a:	20 0d       	add	r18, r0
    449c:	31 1d       	adc	r19, r1
    449e:	41 1d       	adc	r20, r1
    44a0:	a0 95       	com	r26
    44a2:	81 f7       	brne	.-32     	; 0x4484 <sqrt+0x4e>
    44a4:	b9 01       	movw	r22, r18
    44a6:	84 2f       	mov	r24, r20
    44a8:	91 58       	subi	r25, 0x81	; 129
    44aa:	88 0f       	add	r24, r24
    44ac:	96 95       	lsr	r25
    44ae:	87 95       	ror	r24
    44b0:	08 95       	ret

000044b2 <square>:
    44b2:	9b 01       	movw	r18, r22
    44b4:	ac 01       	movw	r20, r24
    44b6:	52 cf       	rjmp	.-348    	; 0x435c <__mulsf3>

000044b8 <__fp_mpack>:
    44b8:	9f 3f       	cpi	r25, 0xFF	; 255
    44ba:	31 f0       	breq	.+12     	; 0x44c8 <__fp_mpack_finite+0xc>

000044bc <__fp_mpack_finite>:
    44bc:	91 50       	subi	r25, 0x01	; 1
    44be:	20 f4       	brcc	.+8      	; 0x44c8 <__fp_mpack_finite+0xc>
    44c0:	87 95       	ror	r24
    44c2:	77 95       	ror	r23
    44c4:	67 95       	ror	r22
    44c6:	b7 95       	ror	r27
    44c8:	88 0f       	add	r24, r24
    44ca:	91 1d       	adc	r25, r1
    44cc:	96 95       	lsr	r25
    44ce:	87 95       	ror	r24
    44d0:	97 f9       	bld	r25, 7
    44d2:	08 95       	ret

000044d4 <__fp_norm2>:
    44d4:	91 50       	subi	r25, 0x01	; 1
    44d6:	50 40       	sbci	r21, 0x00	; 0
    44d8:	66 0f       	add	r22, r22
    44da:	77 1f       	adc	r23, r23
    44dc:	88 1f       	adc	r24, r24
    44de:	d2 f7       	brpl	.-12     	; 0x44d4 <__fp_norm2>
    44e0:	08 95       	ret

000044e2 <__fp_powsodd>:
    44e2:	9f 93       	push	r25
    44e4:	8f 93       	push	r24
    44e6:	7f 93       	push	r23
    44e8:	6f 93       	push	r22
    44ea:	ff 93       	push	r31
    44ec:	ef 93       	push	r30
    44ee:	9b 01       	movw	r18, r22
    44f0:	ac 01       	movw	r20, r24
    44f2:	34 df       	rcall	.-408    	; 0x435c <__mulsf3>
    44f4:	ef 91       	pop	r30
    44f6:	ff 91       	pop	r31
    44f8:	80 de       	rcall	.-768    	; 0x41fa <__fp_powser>
    44fa:	2f 91       	pop	r18
    44fc:	3f 91       	pop	r19
    44fe:	4f 91       	pop	r20
    4500:	5f 91       	pop	r21
    4502:	2c cf       	rjmp	.-424    	; 0x435c <__mulsf3>

00004504 <__divmodhi4>:
    4504:	97 fb       	bst	r25, 7
    4506:	07 2e       	mov	r0, r23
    4508:	16 f4       	brtc	.+4      	; 0x450e <__divmodhi4+0xa>
    450a:	00 94       	com	r0
    450c:	06 d0       	rcall	.+12     	; 0x451a <__divmodhi4_neg1>
    450e:	77 fd       	sbrc	r23, 7
    4510:	08 d0       	rcall	.+16     	; 0x4522 <__divmodhi4_neg2>
    4512:	0b d0       	rcall	.+22     	; 0x452a <__udivmodhi4>
    4514:	07 fc       	sbrc	r0, 7
    4516:	05 d0       	rcall	.+10     	; 0x4522 <__divmodhi4_neg2>
    4518:	3e f4       	brtc	.+14     	; 0x4528 <__divmodhi4_exit>

0000451a <__divmodhi4_neg1>:
    451a:	90 95       	com	r25
    451c:	81 95       	neg	r24
    451e:	9f 4f       	sbci	r25, 0xFF	; 255
    4520:	08 95       	ret

00004522 <__divmodhi4_neg2>:
    4522:	70 95       	com	r23
    4524:	61 95       	neg	r22
    4526:	7f 4f       	sbci	r23, 0xFF	; 255

00004528 <__divmodhi4_exit>:
    4528:	08 95       	ret

0000452a <__udivmodhi4>:
    452a:	aa 1b       	sub	r26, r26
    452c:	bb 1b       	sub	r27, r27
    452e:	51 e1       	ldi	r21, 0x11	; 17
    4530:	07 c0       	rjmp	.+14     	; 0x4540 <__udivmodhi4_ep>

00004532 <__udivmodhi4_loop>:
    4532:	aa 1f       	adc	r26, r26
    4534:	bb 1f       	adc	r27, r27
    4536:	a6 17       	cp	r26, r22
    4538:	b7 07       	cpc	r27, r23
    453a:	10 f0       	brcs	.+4      	; 0x4540 <__udivmodhi4_ep>
    453c:	a6 1b       	sub	r26, r22
    453e:	b7 0b       	sbc	r27, r23

00004540 <__udivmodhi4_ep>:
    4540:	88 1f       	adc	r24, r24
    4542:	99 1f       	adc	r25, r25
    4544:	5a 95       	dec	r21
    4546:	a9 f7       	brne	.-22     	; 0x4532 <__udivmodhi4_loop>
    4548:	80 95       	com	r24
    454a:	90 95       	com	r25
    454c:	bc 01       	movw	r22, r24
    454e:	cd 01       	movw	r24, r26
    4550:	08 95       	ret

00004552 <__tablejump2__>:
    4552:	ee 0f       	add	r30, r30
    4554:	ff 1f       	adc	r31, r31
    4556:	88 1f       	adc	r24, r24
    4558:	8b bf       	out	0x3b, r24	; 59
    455a:	07 90       	elpm	r0, Z+
    455c:	f6 91       	elpm	r31, Z
    455e:	e0 2d       	mov	r30, r0
    4560:	19 94       	eijmp

00004562 <_exit>:
    4562:	f8 94       	cli

00004564 <__stop_program>:
    4564:	ff cf       	rjmp	.-2      	; 0x4564 <__stop_program>


Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800200  000045f0  00004684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000045f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002fb  008002be  008002be  00004742  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004742  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  000047b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ed9  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ba  00000000  00000000  0000aab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034cd  00000000  00000000  0000c36f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001184  00000000  00000000  0000f83c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002321  00000000  00000000  000109c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004374  00000000  00000000  00012ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  00017055  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	c7 c0       	rjmp	.+398    	; 0x194 <__bad_interrupt>
       6:	00 00       	nop
       8:	c5 c0       	rjmp	.+394    	; 0x194 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c0       	rjmp	.+490    	; 0x1f8 <__vector_3>
       e:	00 00       	nop
      10:	c1 c0       	rjmp	.+386    	; 0x194 <__bad_interrupt>
      12:	00 00       	nop
      14:	bf c0       	rjmp	.+382    	; 0x194 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__vector_6>
      1a:	00 00       	nop
      1c:	bb c0       	rjmp	.+374    	; 0x194 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c0       	rjmp	.+370    	; 0x194 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__vector_9>
      28:	b5 c0       	rjmp	.+362    	; 0x194 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__vector_11>
      30:	b1 c0       	rjmp	.+354    	; 0x194 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c0       	rjmp	.+350    	; 0x194 <__bad_interrupt>
      36:	00 00       	nop
      38:	ad c0       	rjmp	.+346    	; 0x194 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__vector_15>
      3e:	00 00       	nop
      40:	a9 c0       	rjmp	.+338    	; 0x194 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c0       	rjmp	.+334    	; 0x194 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c0       	rjmp	.+330    	; 0x194 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c0       	rjmp	.+326    	; 0x194 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c0       	rjmp	.+322    	; 0x194 <__bad_interrupt>
      52:	00 00       	nop
      54:	9f c0       	rjmp	.+318    	; 0x194 <__bad_interrupt>
      56:	00 00       	nop
      58:	9d c0       	rjmp	.+314    	; 0x194 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1b c1       	rjmp	.+566    	; 0x294 <__vector_23>
      5e:	00 00       	nop
      60:	99 c0       	rjmp	.+306    	; 0x194 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__vector_25>
      68:	0c 94 94 1d 	jmp	0x3b28	; 0x3b28 <__vector_26>
      6c:	93 c0       	rjmp	.+294    	; 0x194 <__bad_interrupt>
      6e:	00 00       	nop
      70:	91 c0       	rjmp	.+290    	; 0x194 <__bad_interrupt>
      72:	00 00       	nop
      74:	8f c0       	rjmp	.+286    	; 0x194 <__bad_interrupt>
      76:	00 00       	nop
      78:	8d c0       	rjmp	.+282    	; 0x194 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8b c0       	rjmp	.+278    	; 0x194 <__bad_interrupt>
      7e:	00 00       	nop
      80:	89 c0       	rjmp	.+274    	; 0x194 <__bad_interrupt>
      82:	00 00       	nop
      84:	87 c0       	rjmp	.+270    	; 0x194 <__bad_interrupt>
      86:	00 00       	nop
      88:	85 c0       	rjmp	.+266    	; 0x194 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	83 c0       	rjmp	.+262    	; 0x194 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <__vector_36>
      94:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__vector_37>
      98:	7d c0       	rjmp	.+250    	; 0x194 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7b c0       	rjmp	.+246    	; 0x194 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	79 c0       	rjmp	.+242    	; 0x194 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	77 c0       	rjmp	.+238    	; 0x194 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	75 c0       	rjmp	.+234    	; 0x194 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	73 c0       	rjmp	.+230    	; 0x194 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	71 c0       	rjmp	.+226    	; 0x194 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6f c0       	rjmp	.+222    	; 0x194 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6d c0       	rjmp	.+218    	; 0x194 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6b c0       	rjmp	.+214    	; 0x194 <__bad_interrupt>
      be:	00 00       	nop
      c0:	69 c0       	rjmp	.+210    	; 0x194 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	67 c0       	rjmp	.+206    	; 0x194 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	65 c0       	rjmp	.+202    	; 0x194 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__vector_51>
      d0:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__vector_52>
      d4:	5f c0       	rjmp	.+190    	; 0x194 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__vector_54>
      dc:	0c 94 fa 1e 	jmp	0x3df4	; 0x3df4 <__vector_55>
      e0:	59 c0       	rjmp	.+178    	; 0x194 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__ctors_start>:
     130:	69 18       	sub	r6, r9

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d1 e2       	ldi	r29, 0x21	; 33
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61
     13e:	00 e0       	ldi	r16, 0x00	; 0
     140:	0c bf       	out	0x3c, r16	; 60

00000142 <__do_copy_data>:
     142:	12 e0       	ldi	r17, 0x02	; 2
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b2 e0       	ldi	r27, 0x02	; 2
     148:	e0 ef       	ldi	r30, 0xF0	; 240
     14a:	f5 e4       	ldi	r31, 0x45	; 69
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ae 3b       	cpi	r26, 0xBE	; 190
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	25 e0       	ldi	r18, 0x05	; 5
     15e:	ae eb       	ldi	r26, 0xBE	; 190
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a9 3b       	cpi	r26, 0xB9	; 185
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>

0000016c <__do_global_ctors>:
     16c:	10 e0       	ldi	r17, 0x00	; 0
     16e:	c9 e9       	ldi	r28, 0x99	; 153
     170:	d0 e0       	ldi	r29, 0x00	; 0
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	06 c0       	rjmp	.+12     	; 0x182 <__do_global_ctors+0x16>
     176:	21 97       	sbiw	r28, 0x01	; 1
     178:	01 09       	sbc	r16, r1
     17a:	80 2f       	mov	r24, r16
     17c:	fe 01       	movw	r30, r28
     17e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <__tablejump2__>
     182:	c8 39       	cpi	r28, 0x98	; 152
     184:	d1 07       	cpc	r29, r17
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 07       	cpc	r16, r24
     18a:	a9 f7       	brne	.-22     	; 0x176 <__do_global_ctors+0xa>
     18c:	0e 94 23 18 	call	0x3046	; 0x3046 <main>
     190:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <_exit>

00000194 <__bad_interrupt>:
     194:	35 cf       	rjmp	.-406    	; 0x0 <__vectors>

00000196 <_ZN7encoder22Init_encoder_interruptEv>:
volatile bool PidUpdateFlagDriveY = true;


void encoder::Init_encoder_interrupt()
{
	sei();
     196:	78 94       	sei
	EICRA = 0b00110000;
     198:	80 e3       	ldi	r24, 0x30	; 48
     19a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EICRB = 0b00001100;
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	EIMSK |=  (1<<INT2) |(1<<INT5);
     1a4:	8d b3       	in	r24, 0x1d	; 29
     1a6:	84 62       	ori	r24, 0x24	; 36
     1a8:	8d bb       	out	0x1d, r24	; 29
     1aa:	08 95       	ret

000001ac <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     1ac:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     1ae:	85 b5       	in	r24, 0x25	; 37
     1b0:	85 60       	ori	r24, 0x05	; 5
     1b2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     1ba:	08 95       	ret

000001bc <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
	{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     1c2:	68 81       	ld	r22, Y
     1c4:	79 81       	ldd	r23, Y+1	; 0x01
     1c6:	07 2e       	mov	r0, r23
     1c8:	00 0c       	add	r0, r0
     1ca:	88 0b       	sbc	r24, r24
     1cc:	99 0b       	sbc	r25, r25
     1ce:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
     1d2:	2e ef       	ldi	r18, 0xFE	; 254
     1d4:	34 e3       	ldi	r19, 0x34	; 52
     1d6:	46 e3       	ldi	r20, 0x36	; 54
     1d8:	53 e4       	ldi	r21, 0x43	; 67
     1da:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	48 e4       	ldi	r20, 0x48	; 72
     1e4:	53 e4       	ldi	r21, 0x43	; 67
     1e6:	0e 94 3f 20 	call	0x407e	; 0x407e <__divsf3>
     1ea:	6c 83       	std	Y+4, r22	; 0x04
     1ec:	7d 83       	std	Y+5, r23	; 0x05
     1ee:	8e 83       	std	Y+6, r24	; 0x06
     1f0:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     20e:	00 9b       	sbis	0x00, 0	; 0
     210:	08 c0       	rjmp	.+16     	; 0x222 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     212:	e6 ec       	ldi	r30, 0xC6	; 198
     214:	f2 e0       	ldi	r31, 0x02	; 2
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	91 83       	std	Z+1, r25	; 0x01
     21e:	80 83       	st	Z, r24
     220:	07 c0       	rjmp	.+14     	; 0x230 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     222:	e6 ec       	ldi	r30, 0xC6	; 198
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	80 81       	ld	r24, Z
     228:	91 81       	ldd	r25, Z+1	; 0x01
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	0f 90       	pop	r0
     23a:	0b be       	out	0x3b, r0	; 59
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	8f 93       	push	r24
     256:	9f 93       	push	r25
     258:	ef 93       	push	r30
     25a:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     25c:	05 9b       	sbis	0x00, 5	; 0
     25e:	08 c0       	rjmp	.+16     	; 0x270 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     260:	ee eb       	ldi	r30, 0xBE	; 190
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
     26e:	07 c0       	rjmp	.+14     	; 0x27e <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     270:	ee eb       	ldi	r30, 0xBE	; 190
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	0f 90       	pop	r0
     288:	0b be       	out	0x3b, r0	; 59
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     294:	1f 92       	push	r1
     296:	0f 92       	push	r0
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	0f 92       	push	r0
     29c:	11 24       	eor	r1, r1
     29e:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <PidUpdateFlagCompass>
	PidUpdateFlagLinetrackerBack = true;
     2a6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <PidUpdateFlagLinetrackerBack>
	PidUpdateFlagLinetrackerFront = true;
     2aa:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <PidUpdateFlagLinetrackerFront>
 
	PidUpdateFlagDriveX = true;
     2ae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <PidUpdateFlagDriveX>
	PidUpdateFlagDriveY = true;
     2b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <PidUpdateFlagDriveY>
	
     2b6:	8f 91       	pop	r24
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <_Z13init_HMC5883Lv>:
		}
	}
	
	Calculate_Velocity();
	
}
     2c2:	0e 94 ca 1c 	call	0x3994	; 0x3994 <_Z8i2c_initv>
     2c6:	8c e3       	ldi	r24, 0x3C	; 60
     2c8:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z9i2c_starth>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_Z9i2c_writeh>
     2d2:	80 e7       	ldi	r24, 0x70	; 112
     2d4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_Z9i2c_writeh>
     2d8:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_Z8i2c_stopv>
     2dc:	8c e3       	ldi	r24, 0x3C	; 60
     2de:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z9i2c_starth>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_Z9i2c_writeh>
     2e8:	80 ea       	ldi	r24, 0xA0	; 160
     2ea:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_Z9i2c_writeh>
     2ee:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_Z8i2c_stopv>
     2f2:	8c e3       	ldi	r24, 0x3C	; 60
     2f4:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z9i2c_starth>
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_Z9i2c_writeh>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_Z9i2c_writeh>
     304:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <_Z8i2c_stopv>
     308:	08 95       	ret

0000030a <_Z12read_Compassv>:
     30a:	8c e3       	ldi	r24, 0x3C	; 60
     30c:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <_Z9i2c_starth>
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <_Z9i2c_writeh>
     316:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_Z8i2c_stopv>
     31a:	8d e3       	ldi	r24, 0x3D	; 61
     31c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <_Z13i2c_rep_starth>
     320:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_Z11i2c_readAckv>
     324:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <raw_x>
     328:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <raw_x+0x1>
     32c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_Z11i2c_readAckv>
     330:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <raw_x>
     334:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <raw_x+0x1>
     338:	28 2b       	or	r18, r24
     33a:	30 93 bd 04 	sts	0x04BD, r19	; 0x8004bd <raw_x+0x1>
     33e:	20 93 bc 04 	sts	0x04BC, r18	; 0x8004bc <raw_x>
     342:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_Z11i2c_readAckv>
     346:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <raw_z>
     34a:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <raw_z+0x1>
     34e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_Z11i2c_readAckv>
     352:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <raw_z>
     356:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <raw_z+0x1>
     35a:	28 2b       	or	r18, r24
     35c:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <raw_z+0x1>
     360:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <raw_z>
     364:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_Z11i2c_readAckv>
     368:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <raw_y>
     36c:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <raw_y+0x1>
     370:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_Z11i2c_readNakv>
     374:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <raw_y>
     378:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <raw_y+0x1>
     37c:	28 2b       	or	r18, r24
     37e:	30 93 bb 04 	sts	0x04BB, r19	; 0x8004bb <raw_y+0x1>
     382:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <raw_y>
     386:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <_Z8i2c_stopv>
     38a:	08 95       	ret

0000038c <_Z6millisv>:
     38c:	2f b7       	in	r18, 0x3f	; 63
     38e:	f8 94       	cli
     390:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <timer2_millis>
     394:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <timer2_millis+0x1>
     398:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <timer2_millis+0x2>
     39c:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <timer2_millis+0x3>
     3a0:	2f bf       	out	0x3f, r18	; 63
     3a2:	08 95       	ret

000003a4 <_Z21initialise_timeperiodv>:
     3a4:	e1 eb       	ldi	r30, 0xB1	; 177
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	84 60       	ori	r24, 0x04	; 4
     3ac:	80 83       	st	Z, r24
     3ae:	e0 e7       	ldi	r30, 0x70	; 112
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 83       	st	Z, r24
     3b8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     3bc:	08 95       	ret

000003be <__vector_15>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
     3ca:	9f 93       	push	r25
     3cc:	af 93       	push	r26
     3ce:	bf 93       	push	r27
     3d0:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <timer2_millis>
     3d4:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <timer2_millis+0x1>
     3d8:	a0 91 b6 04 	lds	r26, 0x04B6	; 0x8004b6 <timer2_millis+0x2>
     3dc:	b0 91 b7 04 	lds	r27, 0x04B7	; 0x8004b7 <timer2_millis+0x3>
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	a1 1d       	adc	r26, r1
     3e4:	b1 1d       	adc	r27, r1
     3e6:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <timer2_millis>
     3ea:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <timer2_millis+0x1>
     3ee:	a0 93 b6 04 	sts	0x04B6, r26	; 0x8004b6 <timer2_millis+0x2>
     3f2:	b0 93 b7 04 	sts	0x04B7, r27	; 0x8004b7 <timer2_millis+0x3>
     3f6:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <timer2_fract>
     3fa:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <timer2_fract+0x1>
     3fe:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <timer2_fract+0x2>
     402:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <timer2_fract+0x3>
     406:	03 96       	adiw	r24, 0x03	; 3
     408:	a1 1d       	adc	r26, r1
     40a:	b1 1d       	adc	r27, r1
     40c:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <timer2_fract>
     410:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <timer2_fract+0x1>
     414:	a0 93 b2 04 	sts	0x04B2, r26	; 0x8004b2 <timer2_fract+0x2>
     418:	b0 93 b3 04 	sts	0x04B3, r27	; 0x8004b3 <timer2_fract+0x3>
     41c:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <timer2_fract>
     420:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <timer2_fract+0x1>
     424:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <timer2_fract+0x2>
     428:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <timer2_fract+0x3>
     42c:	8d 37       	cpi	r24, 0x7D	; 125
     42e:	91 05       	cpc	r25, r1
     430:	a1 05       	cpc	r26, r1
     432:	b1 05       	cpc	r27, r1
     434:	38 f1       	brcs	.+78     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     436:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <timer2_fract>
     43a:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <timer2_fract+0x1>
     43e:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <timer2_fract+0x2>
     442:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <timer2_fract+0x3>
     446:	8d 57       	subi	r24, 0x7D	; 125
     448:	91 09       	sbc	r25, r1
     44a:	a1 09       	sbc	r26, r1
     44c:	b1 09       	sbc	r27, r1
     44e:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <timer2_fract>
     452:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <timer2_fract+0x1>
     456:	a0 93 b2 04 	sts	0x04B2, r26	; 0x8004b2 <timer2_fract+0x2>
     45a:	b0 93 b3 04 	sts	0x04B3, r27	; 0x8004b3 <timer2_fract+0x3>
     45e:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <timer2_millis>
     462:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <timer2_millis+0x1>
     466:	a0 91 b6 04 	lds	r26, 0x04B6	; 0x8004b6 <timer2_millis+0x2>
     46a:	b0 91 b7 04 	lds	r27, 0x04B7	; 0x8004b7 <timer2_millis+0x3>
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	a1 1d       	adc	r26, r1
     472:	b1 1d       	adc	r27, r1
     474:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <timer2_millis>
     478:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <timer2_millis+0x1>
     47c:	a0 93 b6 04 	sts	0x04B6, r26	; 0x8004b6 <timer2_millis+0x2>
     480:	b0 93 b7 04 	sts	0x04B7, r27	; 0x8004b7 <timer2_millis+0x3>
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <_Z8initGY88v>:
     496:	15 df       	rcall	.-470    	; 0x2c2 <_Z13init_HMC5883Lv>
     498:	87 e3       	ldi	r24, 0x37	; 55
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <_ZN7MPU60504InitEv>
     4a0:	62 e3       	ldi	r22, 0x32	; 50
     4a2:	87 e3       	ldi	r24, 0x37	; 55
     4a4:	94 e0       	ldi	r25, 0x04	; 4
     4a6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <_ZN7MPU605013calibrateGyroEh>
     4aa:	7c df       	rcall	.-264    	; 0x3a4 <_Z21initialise_timeperiodv>
     4ac:	6f df       	rcall	.-290    	; 0x38c <_Z6millisv>
     4ae:	60 93 1b 04 	sts	0x041B, r22	; 0x80041b <previousTime>
     4b2:	70 93 1c 04 	sts	0x041C, r23	; 0x80041c <previousTime+0x1>
     4b6:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <previousTime+0x2>
     4ba:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <previousTime+0x3>
     4be:	08 95       	ret

000004c0 <_Z25compass_tilt_compensationfffff>:
     4c0:	4f 92       	push	r4
     4c2:	5f 92       	push	r5
     4c4:	6f 92       	push	r6
     4c6:	7f 92       	push	r7
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	64 97       	sbiw	r28, 0x14	; 20
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	69 83       	std	Y+1, r22	; 0x01
     4f2:	7a 83       	std	Y+2, r23	; 0x02
     4f4:	8b 83       	std	Y+3, r24	; 0x03
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	29 01       	movw	r4, r18
     4fa:	3a 01       	movw	r6, r20
     4fc:	e9 8a       	std	Y+17, r14	; 0x11
     4fe:	fa 8a       	std	Y+18, r15	; 0x12
     500:	0b 8b       	std	Y+19, r16	; 0x13
     502:	1c 8b       	std	Y+20, r17	; 0x14
     504:	0e 94 3c 20 	call	0x4078	; 0x4078 <cos>
     508:	6d 87       	std	Y+13, r22	; 0x0d
     50a:	7e 87       	std	Y+14, r23	; 0x0e
     50c:	8f 87       	std	Y+15, r24	; 0x0f
     50e:	98 8b       	std	Y+16, r25	; 0x10
     510:	69 81       	ldd	r22, Y+1	; 0x01
     512:	7a 81       	ldd	r23, Y+2	; 0x02
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	0e 94 56 22 	call	0x44ac	; 0x44ac <sin>
     51c:	69 83       	std	Y+1, r22	; 0x01
     51e:	7a 83       	std	Y+2, r23	; 0x02
     520:	8b 83       	std	Y+3, r24	; 0x03
     522:	9c 83       	std	Y+4, r25	; 0x04
     524:	c3 01       	movw	r24, r6
     526:	b2 01       	movw	r22, r4
     528:	0e 94 3c 20 	call	0x4078	; 0x4078 <cos>
     52c:	6d 83       	std	Y+5, r22	; 0x05
     52e:	7e 83       	std	Y+6, r23	; 0x06
     530:	8f 83       	std	Y+7, r24	; 0x07
     532:	98 87       	std	Y+8, r25	; 0x08
     534:	c3 01       	movw	r24, r6
     536:	b2 01       	movw	r22, r4
     538:	0e 94 56 22 	call	0x44ac	; 0x44ac <sin>
     53c:	69 87       	std	Y+9, r22	; 0x09
     53e:	7a 87       	std	Y+10, r23	; 0x0a
     540:	8b 87       	std	Y+11, r24	; 0x0b
     542:	9c 87       	std	Y+12, r25	; 0x0c
     544:	a6 01       	movw	r20, r12
     546:	95 01       	movw	r18, r10
     548:	6d 81       	ldd	r22, Y+5	; 0x05
     54a:	7e 81       	ldd	r23, Y+6	; 0x06
     54c:	8f 81       	ldd	r24, Y+7	; 0x07
     54e:	98 85       	ldd	r25, Y+8	; 0x08
     550:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     554:	2b 01       	movw	r4, r22
     556:	3c 01       	movw	r6, r24
     558:	28 a5       	ldd	r18, Y+40	; 0x28
     55a:	39 a5       	ldd	r19, Y+41	; 0x29
     55c:	4a a5       	ldd	r20, Y+42	; 0x2a
     55e:	5b a5       	ldd	r21, Y+43	; 0x2b
     560:	69 85       	ldd	r22, Y+9	; 0x09
     562:	7a 85       	ldd	r23, Y+10	; 0x0a
     564:	8b 85       	ldd	r24, Y+11	; 0x0b
     566:	9c 85       	ldd	r25, Y+12	; 0x0c
     568:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	c3 01       	movw	r24, r6
     572:	b2 01       	movw	r22, r4
     574:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__subsf3>
     578:	2b 01       	movw	r4, r22
     57a:	3c 01       	movw	r6, r24
     57c:	a6 01       	movw	r20, r12
     57e:	95 01       	movw	r18, r10
     580:	69 81       	ldd	r22, Y+1	; 0x01
     582:	7a 81       	ldd	r23, Y+2	; 0x02
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     58c:	29 85       	ldd	r18, Y+9	; 0x09
     58e:	3a 85       	ldd	r19, Y+10	; 0x0a
     590:	4b 85       	ldd	r20, Y+11	; 0x0b
     592:	5c 85       	ldd	r21, Y+12	; 0x0c
     594:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
     59c:	a8 01       	movw	r20, r16
     59e:	97 01       	movw	r18, r14
     5a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a6:	98 89       	ldd	r25, Y+16	; 0x10
     5a8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	c5 01       	movw	r24, r10
     5b2:	b4 01       	movw	r22, r8
     5b4:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__subsf3>
     5b8:	4b 01       	movw	r8, r22
     5ba:	5c 01       	movw	r10, r24
     5bc:	28 a5       	ldd	r18, Y+40	; 0x28
     5be:	39 a5       	ldd	r19, Y+41	; 0x29
     5c0:	4a a5       	ldd	r20, Y+42	; 0x2a
     5c2:	5b a5       	ldd	r21, Y+43	; 0x2b
     5c4:	69 81       	ldd	r22, Y+1	; 0x01
     5c6:	7a 81       	ldd	r23, Y+2	; 0x02
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     5d0:	2d 81       	ldd	r18, Y+5	; 0x05
     5d2:	3e 81       	ldd	r19, Y+6	; 0x06
     5d4:	4f 81       	ldd	r20, Y+7	; 0x07
     5d6:	58 85       	ldd	r21, Y+8	; 0x08
     5d8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     5dc:	9b 01       	movw	r18, r22
     5de:	ac 01       	movw	r20, r24
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     5e8:	90 58       	subi	r25, 0x80	; 128
     5ea:	a3 01       	movw	r20, r6
     5ec:	92 01       	movw	r18, r4
     5ee:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <atan2>
     5f2:	21 ee       	ldi	r18, 0xE1	; 225
     5f4:	3e e2       	ldi	r19, 0x2E	; 46
     5f6:	45 e6       	ldi	r20, 0x65	; 101
     5f8:	52 e4       	ldi	r21, 0x42	; 66
     5fa:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     5fe:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
     602:	9b 01       	movw	r18, r22
     604:	77 23       	and	r23, r23
     606:	14 f4       	brge	.+4      	; 0x60c <_Z25compass_tilt_compensationfffff+0x14c>
     608:	28 59       	subi	r18, 0x98	; 152
     60a:	3e 4f       	sbci	r19, 0xFE	; 254
     60c:	c9 01       	movw	r24, r18
     60e:	64 96       	adiw	r28, 0x14	; 20
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

0000063c <_Z24getAverageCompensatedYawv>:
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	28 97       	sbiw	r28, 0x08	; 8
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <raw_y>
     66c:	70 91 bb 04 	lds	r23, 0x04BB	; 0x8004bb <raw_y+0x1>
     670:	07 2e       	mov	r0, r23
     672:	00 0c       	add	r0, r0
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
     67c:	5b 01       	movw	r10, r22
     67e:	6c 01       	movw	r12, r24
     680:	60 91 bc 04 	lds	r22, 0x04BC	; 0x8004bc <raw_x>
     684:	70 91 bd 04 	lds	r23, 0x04BD	; 0x8004bd <raw_x+0x1>
     688:	07 2e       	mov	r0, r23
     68a:	00 0c       	add	r0, r0
     68c:	88 0b       	sbc	r24, r24
     68e:	99 0b       	sbc	r25, r25
     690:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
     694:	69 83       	std	Y+1, r22	; 0x01
     696:	7a 83       	std	Y+2, r23	; 0x02
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	25 e3       	ldi	r18, 0x35	; 53
     69e:	3a ef       	ldi	r19, 0xFA	; 250
     6a0:	4e e8       	ldi	r20, 0x8E	; 142
     6a2:	5c e3       	ldi	r21, 0x3C	; 60
     6a4:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <_ZL14filtered_pitch>
     6a8:	70 91 24 04 	lds	r23, 0x0424	; 0x800424 <_ZL14filtered_pitch+0x1>
     6ac:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZL14filtered_pitch+0x2>
     6b0:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZL14filtered_pitch+0x3>
     6b4:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     6b8:	6d 83       	std	Y+5, r22	; 0x05
     6ba:	7e 83       	std	Y+6, r23	; 0x06
     6bc:	8f 83       	std	Y+7, r24	; 0x07
     6be:	98 87       	std	Y+8, r25	; 0x08
     6c0:	25 e3       	ldi	r18, 0x35	; 53
     6c2:	3a ef       	ldi	r19, 0xFA	; 250
     6c4:	4e e8       	ldi	r20, 0x8E	; 142
     6c6:	5c e3       	ldi	r21, 0x3C	; 60
     6c8:	60 91 27 04 	lds	r22, 0x0427	; 0x800427 <_ZL13filtered_roll>
     6cc:	70 91 28 04 	lds	r23, 0x0428	; 0x800428 <_ZL13filtered_roll+0x1>
     6d0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_ZL13filtered_roll+0x2>
     6d4:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <_ZL13filtered_roll+0x3>
     6d8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
     6e0:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <raw_z>
     6e4:	70 91 b9 04 	lds	r23, 0x04B9	; 0x8004b9 <raw_z+0x1>
     6e8:	07 2e       	mov	r0, r23
     6ea:	00 0c       	add	r0, r0
     6ec:	88 0b       	sbc	r24, r24
     6ee:	99 0b       	sbc	r25, r25
     6f0:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	7f 93       	push	r23
     6fa:	6f 93       	push	r22
     6fc:	e9 80       	ldd	r14, Y+1	; 0x01
     6fe:	fa 80       	ldd	r15, Y+2	; 0x02
     700:	0b 81       	ldd	r16, Y+3	; 0x03
     702:	1c 81       	ldd	r17, Y+4	; 0x04
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	3e 81       	ldd	r19, Y+6	; 0x06
     708:	4f 81       	ldd	r20, Y+7	; 0x07
     70a:	58 85       	ldd	r21, Y+8	; 0x08
     70c:	c3 01       	movw	r24, r6
     70e:	b2 01       	movw	r22, r4
     710:	d7 de       	rcall	.-594    	; 0x4c0 <_Z25compass_tilt_compensationfffff>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	bc 01       	movw	r22, r24
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__floatunsisf>
     724:	2b 01       	movw	r4, r22
     726:	3c 01       	movw	r6, r24
     728:	2a e0       	ldi	r18, 0x0A	; 10
     72a:	29 83       	std	Y+1, r18	; 0x01
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	cb 01       	movw	r24, r22
     732:	a3 01       	movw	r20, r6
     734:	92 01       	movw	r18, r4
     736:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     73a:	29 81       	ldd	r18, Y+1	; 0x01
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	29 83       	std	Y+1, r18	; 0x01
     740:	21 11       	cpse	r18, r1
     742:	f7 cf       	rjmp	.-18     	; 0x732 <_Z24getAverageCompensatedYawv+0xf6>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e2       	ldi	r20, 0x20	; 32
     74a:	51 e4       	ldi	r21, 0x41	; 65
     74c:	0e 94 3f 20 	call	0x407e	; 0x407e <__divsf3>
     750:	28 96       	adiw	r28, 0x08	; 8
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	7f 90       	pop	r7
     772:	6f 90       	pop	r6
     774:	5f 90       	pop	r5
     776:	4f 90       	pop	r4
     778:	08 95       	ret

0000077a <_Z10getYawGY88v>:
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	2c 97       	sbiw	r28, 0x0c	; 12
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	67 e3       	ldi	r22, 0x37	; 55
     79c:	74 e0       	ldi	r23, 0x04	; 4
     79e:	ce 01       	movw	r24, r28
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	0e 94 98 19 	call	0x3330	; 0x3330 <_ZN7MPU605018readNormalizeAccelEv>
     7a6:	8c e0       	ldi	r24, 0x0C	; 12
     7a8:	fe 01       	movw	r30, r28
     7aa:	31 96       	adiw	r30, 0x01	; 1
     7ac:	af e0       	ldi	r26, 0x0F	; 15
     7ae:	b4 e0       	ldi	r27, 0x04	; 4
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <_Z10getYawGY88v+0x36>
     7b8:	87 e3       	ldi	r24, 0x37	; 55
     7ba:	94 e0       	ldi	r25, 0x04	; 4
     7bc:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN7MPU60508rateGyroEv>
     7c0:	0f e0       	ldi	r16, 0x0F	; 15
     7c2:	14 e0       	ldi	r17, 0x04	; 4
     7c4:	f8 01       	movw	r30, r16
     7c6:	c0 84       	ldd	r12, Z+8	; 0x08
     7c8:	d1 84       	ldd	r13, Z+9	; 0x09
     7ca:	e2 84       	ldd	r14, Z+10	; 0x0a
     7cc:	f3 84       	ldd	r15, Z+11	; 0x0b
     7ce:	60 81       	ld	r22, Z
     7d0:	71 81       	ldd	r23, Z+1	; 0x01
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	a7 01       	movw	r20, r14
     7d8:	96 01       	movw	r18, r12
     7da:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <atan2>
     7de:	21 ee       	ldi	r18, 0xE1	; 225
     7e0:	3e e2       	ldi	r19, 0x2E	; 46
     7e2:	45 e6       	ldi	r20, 0x65	; 101
     7e4:	52 e4       	ldi	r21, 0x42	; 66
     7e6:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     7ea:	60 93 33 04 	sts	0x0433, r22	; 0x800433 <_ZL15unfiltered_roll>
     7ee:	70 93 34 04 	sts	0x0434, r23	; 0x800434 <_ZL15unfiltered_roll+0x1>
     7f2:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <_ZL15unfiltered_roll+0x2>
     7f6:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <_ZL15unfiltered_roll+0x3>
     7fa:	f8 01       	movw	r30, r16
     7fc:	64 81       	ldd	r22, Z+4	; 0x04
     7fe:	75 81       	ldd	r23, Z+5	; 0x05
     800:	86 81       	ldd	r24, Z+6	; 0x06
     802:	97 81       	ldd	r25, Z+7	; 0x07
     804:	a7 01       	movw	r20, r14
     806:	96 01       	movw	r18, r12
     808:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <atan2>
     80c:	21 ee       	ldi	r18, 0xE1	; 225
     80e:	3e e2       	ldi	r19, 0x2E	; 46
     810:	45 e6       	ldi	r20, 0x65	; 101
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     818:	60 93 2f 04 	sts	0x042F, r22	; 0x80042f <_ZL16unfiltered_pitch>
     81c:	70 93 30 04 	sts	0x0430, r23	; 0x800430 <_ZL16unfiltered_pitch+0x1>
     820:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <_ZL16unfiltered_pitch+0x2>
     824:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <_ZL16unfiltered_pitch+0x3>
     828:	70 dd       	rcall	.-1312   	; 0x30a <_Z12read_Compassv>
     82a:	b0 dd       	rcall	.-1184   	; 0x38c <_Z6millisv>
     82c:	00 91 1b 04 	lds	r16, 0x041B	; 0x80041b <previousTime>
     830:	10 91 1c 04 	lds	r17, 0x041C	; 0x80041c <previousTime+0x1>
     834:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <previousTime+0x2>
     838:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <previousTime+0x3>
     83c:	60 17       	cp	r22, r16
     83e:	71 07       	cpc	r23, r17
     840:	82 07       	cpc	r24, r18
     842:	93 07       	cpc	r25, r19
     844:	09 f4       	brne	.+2      	; 0x848 <_Z10getYawGY88v+0xce>
     846:	f0 c0       	rjmp	.+480    	; 0xa28 <_Z10getYawGY88v+0x2ae>
     848:	a1 dd       	rcall	.-1214   	; 0x38c <_Z6millisv>
     84a:	60 93 1b 04 	sts	0x041B, r22	; 0x80041b <previousTime>
     84e:	70 93 1c 04 	sts	0x041C, r23	; 0x80041c <previousTime+0x1>
     852:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <previousTime+0x2>
     856:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <previousTime+0x3>
     85a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <readFirstData>
     85e:	88 23       	and	r24, r24
     860:	91 f1       	breq	.+100    	; 0x8c6 <_Z10getYawGY88v+0x14c>
     862:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <_ZL15unfiltered_roll>
     866:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <_ZL15unfiltered_roll+0x1>
     86a:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <_ZL15unfiltered_roll+0x2>
     86e:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <_ZL15unfiltered_roll+0x3>
     872:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_ZL13filtered_roll>
     876:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <_ZL13filtered_roll+0x1>
     87a:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <_ZL13filtered_roll+0x2>
     87e:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <_ZL13filtered_roll+0x3>
     882:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZL16unfiltered_pitch>
     886:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <_ZL16unfiltered_pitch+0x1>
     88a:	a0 91 31 04 	lds	r26, 0x0431	; 0x800431 <_ZL16unfiltered_pitch+0x2>
     88e:	b0 91 32 04 	lds	r27, 0x0432	; 0x800432 <_ZL16unfiltered_pitch+0x3>
     892:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZL14filtered_pitch>
     896:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZL14filtered_pitch+0x1>
     89a:	a0 93 25 04 	sts	0x0425, r26	; 0x800425 <_ZL14filtered_pitch+0x2>
     89e:	b0 93 26 04 	sts	0x0426, r27	; 0x800426 <_ZL14filtered_pitch+0x3>
     8a2:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <_ZL14unfiltered_yaw>
     8a6:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <_ZL14unfiltered_yaw+0x1>
     8aa:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <_ZL14unfiltered_yaw+0x2>
     8ae:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <_ZL14unfiltered_yaw+0x3>
     8b2:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZL12filtered_yaw>
     8b6:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <_ZL12filtered_yaw+0x1>
     8ba:	a0 93 21 04 	sts	0x0421, r26	; 0x800421 <_ZL12filtered_yaw+0x2>
     8be:	b0 93 22 04 	sts	0x0422, r27	; 0x800422 <_ZL12filtered_yaw+0x3>
     8c2:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <readFirstData>
     8c6:	87 e3       	ldi	r24, 0x37	; 55
     8c8:	94 e0       	ldi	r25, 0x04	; 4
     8ca:	0e 94 8e 1c 	call	0x391c	; 0x391c <_ZN7MPU605012getGyroRateXEv>
     8ce:	2f e6       	ldi	r18, 0x6F	; 111
     8d0:	32 e1       	ldi	r19, 0x12	; 18
     8d2:	43 e8       	ldi	r20, 0x83	; 131
     8d4:	5a e3       	ldi	r21, 0x3A	; 58
     8d6:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     8da:	20 91 27 04 	lds	r18, 0x0427	; 0x800427 <_ZL13filtered_roll>
     8de:	30 91 28 04 	lds	r19, 0x0428	; 0x800428 <_ZL13filtered_roll+0x1>
     8e2:	40 91 29 04 	lds	r20, 0x0429	; 0x800429 <_ZL13filtered_roll+0x2>
     8e6:	50 91 2a 04 	lds	r21, 0x042A	; 0x80042a <_ZL13filtered_roll+0x3>
     8ea:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     8ee:	2b e7       	ldi	r18, 0x7B	; 123
     8f0:	34 e1       	ldi	r19, 0x14	; 20
     8f2:	4e e6       	ldi	r20, 0x6E	; 110
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	29 e2       	ldi	r18, 0x29	; 41
     900:	3c e5       	ldi	r19, 0x5C	; 92
     902:	4f e8       	ldi	r20, 0x8F	; 143
     904:	5d e3       	ldi	r21, 0x3D	; 61
     906:	60 91 33 04 	lds	r22, 0x0433	; 0x800433 <_ZL15unfiltered_roll>
     90a:	70 91 34 04 	lds	r23, 0x0434	; 0x800434 <_ZL15unfiltered_roll+0x1>
     90e:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <_ZL15unfiltered_roll+0x2>
     912:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <_ZL15unfiltered_roll+0x3>
     916:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     926:	60 93 27 04 	sts	0x0427, r22	; 0x800427 <_ZL13filtered_roll>
     92a:	70 93 28 04 	sts	0x0428, r23	; 0x800428 <_ZL13filtered_roll+0x1>
     92e:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <_ZL13filtered_roll+0x2>
     932:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <_ZL13filtered_roll+0x3>
     936:	87 e3       	ldi	r24, 0x37	; 55
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	0e 94 96 1c 	call	0x392c	; 0x392c <_ZN7MPU605012getGyroRateYEv>
     93e:	2f e6       	ldi	r18, 0x6F	; 111
     940:	32 e1       	ldi	r19, 0x12	; 18
     942:	43 e8       	ldi	r20, 0x83	; 131
     944:	5a e3       	ldi	r21, 0x3A	; 58
     946:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     94a:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <_ZL14filtered_pitch>
     94e:	30 91 24 04 	lds	r19, 0x0424	; 0x800424 <_ZL14filtered_pitch+0x1>
     952:	40 91 25 04 	lds	r20, 0x0425	; 0x800425 <_ZL14filtered_pitch+0x2>
     956:	50 91 26 04 	lds	r21, 0x0426	; 0x800426 <_ZL14filtered_pitch+0x3>
     95a:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     95e:	2b e7       	ldi	r18, 0x7B	; 123
     960:	34 e1       	ldi	r19, 0x14	; 20
     962:	4e e6       	ldi	r20, 0x6E	; 110
     964:	5f e3       	ldi	r21, 0x3F	; 63
     966:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
     96e:	29 e2       	ldi	r18, 0x29	; 41
     970:	3c e5       	ldi	r19, 0x5C	; 92
     972:	4f e8       	ldi	r20, 0x8F	; 143
     974:	5d e3       	ldi	r21, 0x3D	; 61
     976:	60 91 2f 04 	lds	r22, 0x042F	; 0x80042f <_ZL16unfiltered_pitch>
     97a:	70 91 30 04 	lds	r23, 0x0430	; 0x800430 <_ZL16unfiltered_pitch+0x1>
     97e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <_ZL16unfiltered_pitch+0x2>
     982:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <_ZL16unfiltered_pitch+0x3>
     986:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     98a:	9b 01       	movw	r18, r22
     98c:	ac 01       	movw	r20, r24
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     996:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <_ZL14filtered_pitch>
     99a:	70 93 24 04 	sts	0x0424, r23	; 0x800424 <_ZL14filtered_pitch+0x1>
     99e:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZL14filtered_pitch+0x2>
     9a2:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZL14filtered_pitch+0x3>
     9a6:	4a de       	rcall	.-876    	; 0x63c <_Z24getAverageCompensatedYawv>
     9a8:	60 93 2b 04 	sts	0x042B, r22	; 0x80042b <_ZL14unfiltered_yaw>
     9ac:	70 93 2c 04 	sts	0x042C, r23	; 0x80042c <_ZL14unfiltered_yaw+0x1>
     9b0:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <_ZL14unfiltered_yaw+0x2>
     9b4:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <_ZL14unfiltered_yaw+0x3>
     9b8:	87 e3       	ldi	r24, 0x37	; 55
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN7MPU605012getGyroRateZEv>
     9c0:	2f e6       	ldi	r18, 0x6F	; 111
     9c2:	32 e1       	ldi	r19, 0x12	; 18
     9c4:	43 e8       	ldi	r20, 0x83	; 131
     9c6:	5a e3       	ldi	r21, 0x3A	; 58
     9c8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     9cc:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <_ZL12filtered_yaw>
     9d0:	30 91 20 04 	lds	r19, 0x0420	; 0x800420 <_ZL12filtered_yaw+0x1>
     9d4:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <_ZL12filtered_yaw+0x2>
     9d8:	50 91 22 04 	lds	r21, 0x0422	; 0x800422 <_ZL12filtered_yaw+0x3>
     9dc:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     9e0:	2d ec       	ldi	r18, 0xCD	; 205
     9e2:	3c ec       	ldi	r19, 0xCC	; 204
     9e4:	4c ec       	ldi	r20, 0xCC	; 204
     9e6:	5d e3       	ldi	r21, 0x3D	; 61
     9e8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	26 e6       	ldi	r18, 0x66	; 102
     9f2:	36 e6       	ldi	r19, 0x66	; 102
     9f4:	46 e6       	ldi	r20, 0x66	; 102
     9f6:	5f e3       	ldi	r21, 0x3F	; 63
     9f8:	60 91 2b 04 	lds	r22, 0x042B	; 0x80042b <_ZL14unfiltered_yaw>
     9fc:	70 91 2c 04 	lds	r23, 0x042C	; 0x80042c <_ZL14unfiltered_yaw+0x1>
     a00:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZL14unfiltered_yaw+0x2>
     a04:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <_ZL14unfiltered_yaw+0x3>
     a08:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     a18:	60 93 1f 04 	sts	0x041F, r22	; 0x80041f <_ZL12filtered_yaw>
     a1c:	70 93 20 04 	sts	0x0420, r23	; 0x800420 <_ZL12filtered_yaw+0x1>
     a20:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZL12filtered_yaw+0x2>
     a24:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZL12filtered_yaw+0x3>
     a28:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <_ZL12filtered_yaw>
     a2c:	70 91 20 04 	lds	r23, 0x0420	; 0x800420 <_ZL12filtered_yaw+0x1>
     a30:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZL12filtered_yaw+0x2>
     a34:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <_ZL12filtered_yaw+0x3>
     a38:	0e 94 ac 20 	call	0x4158	; 0x4158 <__fixunssfsi>
     a3c:	cb 01       	movw	r24, r22
     a3e:	2c 96       	adiw	r28, 0x0c	; 12
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	08 95       	ret

00000a5c <_Z13initializeAllv>:
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ed e6       	ldi	r30, 0x6D	; 109
     a66:	f3 e0       	ldi	r31, 0x03	; 3
     a68:	88 e2       	ldi	r24, 0x28	; 40
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	92 8b       	std	Z+18, r25	; 0x12
     a6e:	81 8b       	std	Z+17, r24	; 0x11
     a70:	14 8a       	std	Z+20, r1	; 0x14
     a72:	13 8a       	std	Z+19, r1	; 0x13
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 eb       	ldi	r26, 0xB0	; 176
     a7a:	b0 e4       	ldi	r27, 0x40	; 64
     a7c:	85 8b       	std	Z+21, r24	; 0x15
     a7e:	96 8b       	std	Z+22, r25	; 0x16
     a80:	a7 8b       	std	Z+23, r26	; 0x17
     a82:	b0 8f       	std	Z+24, r27	; 0x18
     a84:	11 8e       	std	Z+25, r1	; 0x19
     a86:	12 8e       	std	Z+26, r1	; 0x1a
     a88:	13 8e       	std	Z+27, r1	; 0x1b
     a8a:	14 8e       	std	Z+28, r1	; 0x1c
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	aa ef       	ldi	r26, 0xFA	; 250
     a92:	b3 e4       	ldi	r27, 0x43	; 67
     a94:	85 8f       	std	Z+29, r24	; 0x1d
     a96:	96 8f       	std	Z+30, r25	; 0x1e
     a98:	a7 8f       	std	Z+31, r26	; 0x1f
     a9a:	b0 a3       	std	Z+32, r27	; 0x20
     a9c:	ec e4       	ldi	r30, 0x4C	; 76
     a9e:	f3 e0       	ldi	r31, 0x03	; 3
     aa0:	8a e9       	ldi	r24, 0x9A	; 154
     aa2:	99 e9       	ldi	r25, 0x99	; 153
     aa4:	a9 e1       	ldi	r26, 0x19	; 25
     aa6:	be e3       	ldi	r27, 0x3E	; 62
     aa8:	85 8b       	std	Z+21, r24	; 0x15
     aaa:	96 8b       	std	Z+22, r25	; 0x16
     aac:	a7 8b       	std	Z+23, r26	; 0x17
     aae:	b0 8f       	std	Z+24, r27	; 0x18
     ab0:	11 8e       	std	Z+25, r1	; 0x19
     ab2:	12 8e       	std	Z+26, r1	; 0x1a
     ab4:	13 8e       	std	Z+27, r1	; 0x1b
     ab6:	14 8e       	std	Z+28, r1	; 0x1c
     ab8:	46 e6       	ldi	r20, 0x66	; 102
     aba:	56 e6       	ldi	r21, 0x66	; 102
     abc:	66 e6       	ldi	r22, 0x66	; 102
     abe:	7f e3       	ldi	r23, 0x3F	; 63
     ac0:	45 8f       	std	Z+29, r20	; 0x1d
     ac2:	56 8f       	std	Z+30, r21	; 0x1e
     ac4:	67 8f       	std	Z+31, r22	; 0x1f
     ac6:	70 a3       	std	Z+32, r23	; 0x20
     ac8:	eb e2       	ldi	r30, 0x2B	; 43
     aca:	f3 e0       	ldi	r31, 0x03	; 3
     acc:	85 8b       	std	Z+21, r24	; 0x15
     ace:	96 8b       	std	Z+22, r25	; 0x16
     ad0:	a7 8b       	std	Z+23, r26	; 0x17
     ad2:	b0 8f       	std	Z+24, r27	; 0x18
     ad4:	11 8e       	std	Z+25, r1	; 0x19
     ad6:	12 8e       	std	Z+26, r1	; 0x1a
     ad8:	13 8e       	std	Z+27, r1	; 0x1b
     ada:	14 8e       	std	Z+28, r1	; 0x1c
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e8       	ldi	r26, 0x80	; 128
     ae2:	bf e3       	ldi	r27, 0x3F	; 63
     ae4:	85 8f       	std	Z+29, r24	; 0x1d
     ae6:	96 8f       	std	Z+30, r25	; 0x1e
     ae8:	a7 8f       	std	Z+31, r26	; 0x1f
     aea:	b0 a3       	std	Z+32, r27	; 0x20
     aec:	a6 e0       	ldi	r26, 0x06	; 6
     aee:	b3 e0       	ldi	r27, 0x03	; 3
     af0:	8d e2       	ldi	r24, 0x2D	; 45
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	1f 96       	adiw	r26, 0x0f	; 15
     af6:	9c 93       	st	X, r25
     af8:	8e 93       	st	-X, r24
     afa:	1e 97       	sbiw	r26, 0x0e	; 14
     afc:	e5 ee       	ldi	r30, 0xE5	; 229
     afe:	f2 e0       	ldi	r31, 0x02	; 2
     b00:	97 87       	std	Z+15, r25	; 0x0f
     b02:	86 87       	std	Z+14, r24	; 0x0e
     b04:	0a e9       	ldi	r16, 0x9A	; 154
     b06:	19 e9       	ldi	r17, 0x99	; 153
     b08:	29 e9       	ldi	r18, 0x99	; 153
     b0a:	3f e3       	ldi	r19, 0x3F	; 63
     b0c:	55 96       	adiw	r26, 0x15	; 21
     b0e:	0d 93       	st	X+, r16
     b10:	1d 93       	st	X+, r17
     b12:	2d 93       	st	X+, r18
     b14:	3c 93       	st	X, r19
     b16:	58 97       	sbiw	r26, 0x18	; 24
     b18:	59 96       	adiw	r26, 0x19	; 25
     b1a:	1d 92       	st	X+, r1
     b1c:	1d 92       	st	X+, r1
     b1e:	1d 92       	st	X+, r1
     b20:	1c 92       	st	X, r1
     b22:	5c 97       	sbiw	r26, 0x1c	; 28
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	60 e8       	ldi	r22, 0x80	; 128
     b2a:	71 e4       	ldi	r23, 0x41	; 65
     b2c:	5d 96       	adiw	r26, 0x1d	; 29
     b2e:	4d 93       	st	X+, r20
     b30:	5d 93       	st	X+, r21
     b32:	6d 93       	st	X+, r22
     b34:	7c 93       	st	X, r23
     b36:	90 97       	sbiw	r26, 0x20	; 32
     b38:	05 8b       	std	Z+21, r16	; 0x15
     b3a:	16 8b       	std	Z+22, r17	; 0x16
     b3c:	27 8b       	std	Z+23, r18	; 0x17
     b3e:	30 8f       	std	Z+24, r19	; 0x18
     b40:	11 8e       	std	Z+25, r1	; 0x19
     b42:	12 8e       	std	Z+26, r1	; 0x1a
     b44:	13 8e       	std	Z+27, r1	; 0x1b
     b46:	14 8e       	std	Z+28, r1	; 0x1c
     b48:	45 8f       	std	Z+29, r20	; 0x1d
     b4a:	56 8f       	std	Z+30, r21	; 0x1e
     b4c:	67 8f       	std	Z+31, r22	; 0x1f
     b4e:	70 a3       	std	Z+32, r23	; 0x20
     b50:	a2 dc       	rcall	.-1724   	; 0x496 <_Z8initGY88v>
     b52:	1c dc       	rcall	.-1992   	; 0x38c <_Z6millisv>
     b54:	60 93 0b 04 	sts	0x040B, r22	; 0x80040b <startTime>
     b58:	70 93 0c 04 	sts	0x040C, r23	; 0x80040c <startTime+0x1>
     b5c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <startTime+0x2>
     b60:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <startTime+0x3>
     b64:	cd e6       	ldi	r28, 0x6D	; 109
     b66:	d3 e0       	ldi	r29, 0x03	; 3
     b68:	11 dc       	rcall	.-2014   	; 0x38c <_Z6millisv>
     b6a:	00 91 0b 04 	lds	r16, 0x040B	; 0x80040b <startTime>
     b6e:	10 91 0c 04 	lds	r17, 0x040C	; 0x80040c <startTime+0x1>
     b72:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <startTime+0x2>
     b76:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <startTime+0x3>
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	80 1b       	sub	r24, r16
     b80:	91 0b       	sbc	r25, r17
     b82:	a2 0b       	sbc	r26, r18
     b84:	b3 0b       	sbc	r27, r19
     b86:	84 3f       	cpi	r24, 0xF4	; 244
     b88:	91 40       	sbci	r25, 0x01	; 1
     b8a:	a1 05       	cpc	r26, r1
     b8c:	b1 05       	cpc	r27, r1
     b8e:	48 f4       	brcc	.+18     	; 0xba2 <_Z13initializeAllv+0x146>
     b90:	f4 dd       	rcall	.-1048   	; 0x77a <_Z10getYawGY88v>
     b92:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <initialCompassAngle+0x1>
     b96:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <initialCompassAngle>
     b9a:	18 8a       	std	Y+16, r1	; 0x10
     b9c:	9f 87       	std	Y+15, r25	; 0x0f
     b9e:	8e 87       	std	Y+14, r24	; 0x0e
     ba0:	e3 cf       	rjmp	.-58     	; 0xb68 <_Z13initializeAllv+0x10c>
     ba2:	0e 94 a6 1c 	call	0x394c	; 0x394c <_Z16checkRobotMotionv>
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	08 95       	ret

00000bb0 <_Z10BrakeMotorv>:
     bb0:	e8 e0       	ldi	r30, 0x08	; 8
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	90 81       	ld	r25, Z
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	89 27       	eor	r24, r25
     bba:	80 83       	st	Z, r24
     bbc:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <movingxfront>
     bc0:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <movingxback>
     bc4:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <movingyfront>
     bc8:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <movingyback>
     bcc:	08 95       	ret

00000bce <_Z15sendDataToSlavev>:
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	8f e7       	ldi	r24, 0x7F	; 127
     bd4:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart2_putch>
     bd8:	c3 e0       	ldi	r28, 0x03	; 3
     bda:	d4 e0       	ldi	r29, 0x04	; 4
     bdc:	88 81       	ld	r24, Y
     bde:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart2_putch>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart2_putch>
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart2_putch>
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <_Z10uart2_putch>
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <_Z21Goto_Fence_And_Detectv>:
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <movingyfront>
     c02:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c06:	83 ff       	sbrs	r24, 3
     c08:	57 c0       	rjmp	.+174    	; 0xcb8 <_Z21Goto_Fence_And_Detectv+0xbe>
     c0a:	63 9b       	sbis	0x0c, 3	; 12
     c0c:	58 c0       	rjmp	.+176    	; 0xcbe <_Z21Goto_Fence_And_Detectv+0xc4>
     c0e:	54 c0       	rjmp	.+168    	; 0xcb8 <_Z21Goto_Fence_And_Detectv+0xbe>
     c10:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c14:	83 ff       	sbrs	r24, 3
     c16:	6f c0       	rjmp	.+222    	; 0xcf6 <_Z21Goto_Fence_And_Detectv+0xfc>
     c18:	8a c0       	rjmp	.+276    	; 0xd2e <_Z21Goto_Fence_And_Detectv+0x134>
     c1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c1e:	83 fd       	sbrc	r24, 3
     c20:	89 c0       	rjmp	.+274    	; 0xd34 <_Z21Goto_Fence_And_Detectv+0x13a>
     c22:	63 99       	sbic	0x0c, 3	; 12
     c24:	47 c0       	rjmp	.+142    	; 0xcb4 <_Z21Goto_Fence_And_Detectv+0xba>
     c26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     c2a:	83 ff       	sbrs	r24, 3
     c2c:	9b c0       	rjmp	.+310    	; 0xd64 <_Z21Goto_Fence_And_Detectv+0x16a>
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	a0 c0       	rjmp	.+320    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     c32:	eb ef       	ldi	r30, 0xFB	; 251
     c34:	f3 e0       	ldi	r31, 0x03	; 3
     c36:	11 82       	std	Z+1, r1	; 0x01
     c38:	10 82       	st	Z, r1
     c3a:	13 82       	std	Z+3, r1	; 0x03
     c3c:	12 82       	std	Z+2, r1	; 0x02
     c3e:	15 82       	std	Z+5, r1	; 0x05
     c40:	14 82       	std	Z+4, r1	; 0x04
     c42:	17 82       	std	Z+7, r1	; 0x07
     c44:	16 82       	std	Z+6, r1	; 0x06
     c46:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <first_data_time_of_limit_switches_pressed>
     c4a:	88 23       	and	r24, r24
     c4c:	59 f0       	breq	.+22     	; 0xc64 <_Z21Goto_Fence_And_Detectv+0x6a>
     c4e:	9e db       	rcall	.-2244   	; 0x38c <_Z6millisv>
     c50:	60 93 07 04 	sts	0x0407, r22	; 0x800407 <time_of_limit_switches_pressed>
     c54:	70 93 08 04 	sts	0x0408, r23	; 0x800408 <time_of_limit_switches_pressed+0x1>
     c58:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <time_of_limit_switches_pressed+0x2>
     c5c:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <time_of_limit_switches_pressed+0x3>
     c60:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <first_data_time_of_limit_switches_pressed>
     c64:	93 db       	rcall	.-2266   	; 0x38c <_Z6millisv>
     c66:	00 91 07 04 	lds	r16, 0x0407	; 0x800407 <time_of_limit_switches_pressed>
     c6a:	10 91 08 04 	lds	r17, 0x0408	; 0x800408 <time_of_limit_switches_pressed+0x1>
     c6e:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <time_of_limit_switches_pressed+0x2>
     c72:	30 91 0a 04 	lds	r19, 0x040A	; 0x80040a <time_of_limit_switches_pressed+0x3>
     c76:	ab 01       	movw	r20, r22
     c78:	bc 01       	movw	r22, r24
     c7a:	40 1b       	sub	r20, r16
     c7c:	51 0b       	sbc	r21, r17
     c7e:	62 0b       	sbc	r22, r18
     c80:	73 0b       	sbc	r23, r19
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	42 30       	cpi	r20, 0x02	; 2
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <_Z21Goto_Fence_And_Detectv+0x96>
     c8e:	71 c0       	rjmp	.+226    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	6f c0       	rjmp	.+222    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     c94:	eb ef       	ldi	r30, 0xFB	; 251
     c96:	f3 e0       	ldi	r31, 0x03	; 3
     c98:	8f e0       	ldi	r24, 0x0F	; 15
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
     ca0:	13 82       	std	Z+3, r1	; 0x03
     ca2:	12 82       	std	Z+2, r1	; 0x02
     ca4:	15 82       	std	Z+5, r1	; 0x05
     ca6:	14 82       	std	Z+4, r1	; 0x04
     ca8:	81 ef       	ldi	r24, 0xF1	; 241
     caa:	9f ef       	ldi	r25, 0xFF	; 255
     cac:	97 83       	std	Z+7, r25	; 0x07
     cae:	86 83       	std	Z+6, r24	; 0x06
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	5f c0       	rjmp	.+190    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	5d c0       	rjmp	.+186    	; 0xd72 <_Z21Goto_Fence_And_Detectv+0x178>
     cb8:	63 99       	sbic	0x0c, 3	; 12
     cba:	aa cf       	rjmp	.-172    	; 0xc10 <_Z21Goto_Fence_And_Detectv+0x16>
     cbc:	38 c0       	rjmp	.+112    	; 0xd2e <_Z21Goto_Fence_And_Detectv+0x134>
     cbe:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     cc2:	eb ef       	ldi	r30, 0xFB	; 251
     cc4:	f3 e0       	ldi	r31, 0x03	; 3
     cc6:	8e e1       	ldi	r24, 0x1E	; 30
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	80 83       	st	Z, r24
     cce:	13 82       	std	Z+3, r1	; 0x03
     cd0:	12 82       	std	Z+2, r1	; 0x02
     cd2:	15 82       	std	Z+5, r1	; 0x05
     cd4:	14 82       	std	Z+4, r1	; 0x04
     cd6:	8c ee       	ldi	r24, 0xEC	; 236
     cd8:	9f ef       	ldi	r25, 0xFF	; 255
     cda:	97 83       	std	Z+7, r25	; 0x07
     cdc:	86 83       	std	Z+6, r24	; 0x06
     cde:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <time_of_limit_switches_pressed>
     ce2:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <time_of_limit_switches_pressed+0x1>
     ce6:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <time_of_limit_switches_pressed+0x2>
     cea:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <time_of_limit_switches_pressed+0x3>
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     cf4:	96 cf       	rjmp	.-212    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     cf6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     cfa:	eb ef       	ldi	r30, 0xFB	; 251
     cfc:	f3 e0       	ldi	r31, 0x03	; 3
     cfe:	84 e1       	ldi	r24, 0x14	; 20
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	13 82       	std	Z+3, r1	; 0x03
     d08:	12 82       	std	Z+2, r1	; 0x02
     d0a:	15 82       	std	Z+5, r1	; 0x05
     d0c:	14 82       	std	Z+4, r1	; 0x04
     d0e:	82 ee       	ldi	r24, 0xE2	; 226
     d10:	9f ef       	ldi	r25, 0xFF	; 255
     d12:	97 83       	std	Z+7, r25	; 0x07
     d14:	86 83       	std	Z+6, r24	; 0x06
     d16:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <time_of_limit_switches_pressed>
     d1a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <time_of_limit_switches_pressed+0x1>
     d1e:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <time_of_limit_switches_pressed+0x2>
     d22:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <time_of_limit_switches_pressed+0x3>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     d2c:	7a cf       	rjmp	.-268    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     d2e:	63 99       	sbic	0x0c, 3	; 12
     d30:	74 cf       	rjmp	.-280    	; 0xc1a <_Z21Goto_Fence_And_Detectv+0x20>
     d32:	77 cf       	rjmp	.-274    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
     d3a:	e5 ef       	ldi	r30, 0xF5	; 245
     d3c:	f3 e0       	ldi	r31, 0x03	; 3
     d3e:	28 ed       	ldi	r18, 0xD8	; 216
     d40:	3f ef       	ldi	r19, 0xFF	; 255
     d42:	31 83       	std	Z+1, r19	; 0x01
     d44:	20 83       	st	Z, r18
     d46:	13 82       	std	Z+3, r1	; 0x03
     d48:	12 82       	std	Z+2, r1	; 0x02
     d4a:	15 82       	std	Z+5, r1	; 0x05
     d4c:	14 82       	std	Z+4, r1	; 0x04
     d4e:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <time_of_limit_switches_pressed>
     d52:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <time_of_limit_switches_pressed+0x1>
     d56:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <time_of_limit_switches_pressed+0x2>
     d5a:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <time_of_limit_switches_pressed+0x3>
     d5e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <first_data_time_of_limit_switches_pressed>
     d62:	5f cf       	rjmp	.-322    	; 0xc22 <_Z21Goto_Fence_And_Detectv+0x28>
     d64:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
     d68:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <pressRobot>
     d6c:	81 11       	cpse	r24, r1
     d6e:	92 cf       	rjmp	.-220    	; 0xc94 <_Z21Goto_Fence_And_Detectv+0x9a>
     d70:	60 cf       	rjmp	.-320    	; 0xc32 <_Z21Goto_Fence_And_Detectv+0x38>
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <_Z19calculateCompassPIDv>:
     d78:	2f 92       	push	r2
     d7a:	3f 92       	push	r3
     d7c:	4f 92       	push	r4
     d7e:	5f 92       	push	r5
     d80:	6f 92       	push	r6
     d82:	7f 92       	push	r7
     d84:	8f 92       	push	r8
     d86:	9f 92       	push	r9
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	cf 92       	push	r12
     d8e:	df 92       	push	r13
     d90:	ef 92       	push	r14
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <_Z19calculateCompassPIDv+0x26>
     d9e:	1f 92       	push	r1
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
     daa:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PidUpdateFlagCompass>
     dae:	88 23       	and	r24, r24
     db0:	09 f4       	brne	.+2      	; 0xdb4 <_Z19calculateCompassPIDv+0x3c>
     db2:	19 c1       	rjmp	.+562    	; 0xfe6 <_Z19calculateCompassPIDv+0x26e>
     db4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <compassPID>
     db8:	88 23       	and	r24, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <_Z19calculateCompassPIDv+0x46>
     dbc:	18 c1       	rjmp	.+560    	; 0xfee <_Z19calculateCompassPIDv+0x276>
     dbe:	dd dc       	rcall	.-1606   	; 0x77a <_Z10getYawGY88v>
     dc0:	8c 01       	movw	r16, r24
     dc2:	ed e6       	ldi	r30, 0x6D	; 109
     dc4:	f3 e0       	ldi	r31, 0x03	; 3
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	80 83       	st	Z, r24
     dca:	86 85       	ldd	r24, Z+14	; 0x0e
     dcc:	97 85       	ldd	r25, Z+15	; 0x0f
     dce:	80 1b       	sub	r24, r16
     dd0:	91 0b       	sbc	r25, r17
     dd2:	85 3b       	cpi	r24, 0xB5	; 181
     dd4:	91 05       	cpc	r25, r1
     dd6:	3c f0       	brlt	.+14     	; 0xde6 <_Z19calculateCompassPIDv+0x6e>
     dd8:	88 56       	subi	r24, 0x68	; 104
     dda:	91 40       	sbci	r25, 0x01	; 1
     ddc:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <compass+0x3>
     de0:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <compass+0x2>
     de4:	0f c0       	rjmp	.+30     	; 0xe04 <_Z19calculateCompassPIDv+0x8c>
     de6:	8c 34       	cpi	r24, 0x4C	; 76
     de8:	2f ef       	ldi	r18, 0xFF	; 255
     dea:	92 07       	cpc	r25, r18
     dec:	2c f0       	brlt	.+10     	; 0xdf8 <_Z19calculateCompassPIDv+0x80>
     dee:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <compass+0x3>
     df2:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <compass+0x2>
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <_Z19calculateCompassPIDv+0x8c>
     df8:	88 59       	subi	r24, 0x98	; 152
     dfa:	9e 4f       	sbci	r25, 0xFE	; 254
     dfc:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <compass+0x3>
     e00:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <compass+0x2>
     e04:	20 90 6f 03 	lds	r2, 0x036F	; 0x80036f <compass+0x2>
     e08:	30 90 70 03 	lds	r3, 0x0370	; 0x800370 <compass+0x3>
     e0c:	b1 01       	movw	r22, r2
     e0e:	03 2c       	mov	r0, r3
     e10:	00 0c       	add	r0, r0
     e12:	88 0b       	sbc	r24, r24
     e14:	99 0b       	sbc	r25, r25
     e16:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
     e1a:	4b 01       	movw	r8, r22
     e1c:	5c 01       	movw	r10, r24
     e1e:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <compass+0x19>
     e22:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <compass+0x1a>
     e26:	40 91 88 03 	lds	r20, 0x0388	; 0x800388 <compass+0x1b>
     e2a:	50 91 89 03 	lds	r21, 0x0389	; 0x800389 <compass+0x1c>
     e2e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     e32:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <compass+0xa>
     e36:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <compass+0xb>
     e3a:	40 91 79 03 	lds	r20, 0x0379	; 0x800379 <compass+0xc>
     e3e:	50 91 7a 03 	lds	r21, 0x037A	; 0x80037a <compass+0xd>
     e42:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     e46:	6b 01       	movw	r12, r22
     e48:	7c 01       	movw	r14, r24
     e4a:	60 93 77 03 	sts	0x0377, r22	; 0x800377 <compass+0xa>
     e4e:	70 93 78 03 	sts	0x0378, r23	; 0x800378 <compass+0xb>
     e52:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <compass+0xc>
     e56:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <compass+0xd>
     e5a:	60 91 7e 03 	lds	r22, 0x037E	; 0x80037e <compass+0x11>
     e5e:	70 91 7f 03 	lds	r23, 0x037F	; 0x80037f <compass+0x12>
     e62:	07 2e       	mov	r0, r23
     e64:	00 0c       	add	r0, r0
     e66:	88 0b       	sbc	r24, r24
     e68:	99 0b       	sbc	r25, r25
     e6a:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
     e6e:	69 83       	std	Y+1, r22	; 0x01
     e70:	7a 83       	std	Y+2, r23	; 0x02
     e72:	8b 83       	std	Y+3, r24	; 0x03
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	2d ec       	ldi	r18, 0xCD	; 205
     e78:	3c ec       	ldi	r19, 0xCC	; 204
     e7a:	4c ec       	ldi	r20, 0xCC	; 204
     e7c:	5d e3       	ldi	r21, 0x3D	; 61
     e7e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     e82:	2b 01       	movw	r4, r22
     e84:	3c 01       	movw	r6, r24
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
     e8e:	9b 01       	movw	r18, r22
     e90:	77 23       	and	r23, r23
     e92:	24 f4       	brge	.+8      	; 0xe9c <_Z19calculateCompassPIDv+0x124>
     e94:	22 27       	eor	r18, r18
     e96:	33 27       	eor	r19, r19
     e98:	26 1b       	sub	r18, r22
     e9a:	37 0b       	sbc	r19, r23
     e9c:	b9 01       	movw	r22, r18
     e9e:	33 0f       	add	r19, r19
     ea0:	88 0b       	sbc	r24, r24
     ea2:	99 0b       	sbc	r25, r25
     ea4:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
     ea8:	a3 01       	movw	r20, r6
     eaa:	92 01       	movw	r18, r4
     eac:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__gesf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	24 f5       	brge	.+72     	; 0xefc <_Z19calculateCompassPIDv+0x184>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	a9 01       	movw	r20, r18
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__gesf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	4c f4       	brge	.+18     	; 0xed8 <_Z19calculateCompassPIDv+0x160>
     ec6:	40 92 77 03 	sts	0x0377, r4	; 0x800377 <compass+0xa>
     eca:	50 92 78 03 	sts	0x0378, r5	; 0x800378 <compass+0xb>
     ece:	60 92 79 03 	sts	0x0379, r6	; 0x800379 <compass+0xc>
     ed2:	70 92 7a 03 	sts	0x037A, r7	; 0x80037a <compass+0xd>
     ed6:	12 c0       	rjmp	.+36     	; 0xefc <_Z19calculateCompassPIDv+0x184>
     ed8:	2d ec       	ldi	r18, 0xCD	; 205
     eda:	3c ec       	ldi	r19, 0xCC	; 204
     edc:	4c ec       	ldi	r20, 0xCC	; 204
     ede:	5d eb       	ldi	r21, 0xBD	; 189
     ee0:	69 81       	ldd	r22, Y+1	; 0x01
     ee2:	7a 81       	ldd	r23, Y+2	; 0x02
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     eec:	60 93 77 03 	sts	0x0377, r22	; 0x800377 <compass+0xa>
     ef0:	70 93 78 03 	sts	0x0378, r23	; 0x800378 <compass+0xb>
     ef4:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <compass+0xc>
     ef8:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <compass+0xd>
     efc:	c1 01       	movw	r24, r2
     efe:	99 23       	and	r25, r25
     f00:	24 f4       	brge	.+8      	; 0xf0a <_Z19calculateCompassPIDv+0x192>
     f02:	88 27       	eor	r24, r24
     f04:	99 27       	eor	r25, r25
     f06:	82 19       	sub	r24, r2
     f08:	93 09       	sbc	r25, r3
     f0a:	02 97       	sbiw	r24, 0x02	; 2
     f0c:	e4 f1       	brlt	.+120    	; 0xf86 <_Z19calculateCompassPIDv+0x20e>
     f0e:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <compass+0x15>
     f12:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <compass+0x16>
     f16:	40 91 84 03 	lds	r20, 0x0384	; 0x800384 <compass+0x17>
     f1a:	50 91 85 03 	lds	r21, 0x0385	; 0x800385 <compass+0x18>
     f1e:	c5 01       	movw	r24, r10
     f20:	b4 01       	movw	r22, r8
     f22:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     f26:	6b 01       	movw	r12, r22
     f28:	7c 01       	movw	r14, r24
     f2a:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <compass+0x4>
     f2e:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <compass+0x5>
     f32:	b8 01       	movw	r22, r16
     f34:	68 1b       	sub	r22, r24
     f36:	79 0b       	sbc	r23, r25
     f38:	07 2e       	mov	r0, r23
     f3a:	00 0c       	add	r0, r0
     f3c:	88 0b       	sbc	r24, r24
     f3e:	99 0b       	sbc	r25, r25
     f40:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
     f44:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <compass+0x1d>
     f48:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <compass+0x1e>
     f4c:	40 91 8c 03 	lds	r20, 0x038C	; 0x80038c <compass+0x1f>
     f50:	50 91 8d 03 	lds	r21, 0x038D	; 0x80038d <compass+0x20>
     f54:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
     f58:	9b 01       	movw	r18, r22
     f5a:	ac 01       	movw	r20, r24
     f5c:	c7 01       	movw	r24, r14
     f5e:	b6 01       	movw	r22, r12
     f60:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__subsf3>
     f64:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <compass+0xa>
     f68:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <compass+0xb>
     f6c:	40 91 79 03 	lds	r20, 0x0379	; 0x800379 <compass+0xc>
     f70:	50 91 7a 03 	lds	r21, 0x037A	; 0x80037a <compass+0xd>
     f74:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
     f78:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
     f7c:	70 93 74 03 	sts	0x0374, r23	; 0x800374 <compass+0x7>
     f80:	60 93 73 03 	sts	0x0373, r22	; 0x800373 <compass+0x6>
     f84:	08 c0       	rjmp	.+16     	; 0xf96 <_Z19calculateCompassPIDv+0x21e>
     f86:	ed e6       	ldi	r30, 0x6D	; 109
     f88:	f3 e0       	ldi	r31, 0x03	; 3
     f8a:	12 86       	std	Z+10, r1	; 0x0a
     f8c:	13 86       	std	Z+11, r1	; 0x0b
     f8e:	14 86       	std	Z+12, r1	; 0x0c
     f90:	15 86       	std	Z+13, r1	; 0x0d
     f92:	17 82       	std	Z+7, r1	; 0x07
     f94:	16 82       	std	Z+6, r1	; 0x06
     f96:	ed e6       	ldi	r30, 0x6D	; 109
     f98:	f3 e0       	ldi	r31, 0x03	; 3
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	95 83       	std	Z+5, r25	; 0x05
     fa0:	84 83       	std	Z+4, r24	; 0x04
     fa2:	86 81       	ldd	r24, Z+6	; 0x06
     fa4:	97 81       	ldd	r25, Z+7	; 0x07
     fa6:	21 89       	ldd	r18, Z+17	; 0x11
     fa8:	32 89       	ldd	r19, Z+18	; 0x12
     faa:	ac 01       	movw	r20, r24
     fac:	99 23       	and	r25, r25
     fae:	24 f4       	brge	.+8      	; 0xfb8 <_Z19calculateCompassPIDv+0x240>
     fb0:	44 27       	eor	r20, r20
     fb2:	55 27       	eor	r21, r21
     fb4:	48 1b       	sub	r20, r24
     fb6:	59 0b       	sbc	r21, r25
     fb8:	24 17       	cp	r18, r20
     fba:	35 07       	cpc	r19, r21
     fbc:	54 f4       	brge	.+20     	; 0xfd2 <_Z19calculateCompassPIDv+0x25a>
     fbe:	28 17       	cp	r18, r24
     fc0:	39 07       	cpc	r19, r25
     fc2:	1c f0       	brlt	.+6      	; 0xfca <_Z19calculateCompassPIDv+0x252>
     fc4:	31 95       	neg	r19
     fc6:	21 95       	neg	r18
     fc8:	31 09       	sbc	r19, r1
     fca:	30 93 74 03 	sts	0x0374, r19	; 0x800374 <compass+0x7>
     fce:	20 93 73 03 	sts	0x0373, r18	; 0x800373 <compass+0x6>
     fd2:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <compass+0x6>
     fd6:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <compass+0x7>
     fda:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <velocity_robot+0x5>
     fde:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <velocity_robot+0x4>
     fe2:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <PidUpdateFlagCompass>
     fe6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <compassPID>
     fea:	81 11       	cpse	r24, r1
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <_Z19calculateCompassPIDv+0x27e>
     fee:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <velocity_robot+0x5>
     ff2:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <velocity_robot+0x4>
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	bf 90       	pop	r11
    1010:	af 90       	pop	r10
    1012:	9f 90       	pop	r9
    1014:	8f 90       	pop	r8
    1016:	7f 90       	pop	r7
    1018:	6f 90       	pop	r6
    101a:	5f 90       	pop	r5
    101c:	4f 90       	pop	r4
    101e:	3f 90       	pop	r3
    1020:	2f 90       	pop	r2
    1022:	08 95       	ret

00001024 <_Z12calculatevelv>:
    1024:	2f 92       	push	r2
    1026:	3f 92       	push	r3
    1028:	4f 92       	push	r4
    102a:	5f 92       	push	r5
    102c:	6f 92       	push	r6
    102e:	7f 92       	push	r7
    1030:	8f 92       	push	r8
    1032:	9f 92       	push	r9
    1034:	af 92       	push	r10
    1036:	bf 92       	push	r11
    1038:	cf 92       	push	r12
    103a:	df 92       	push	r13
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	00 d0       	rcall	.+0      	; 0x104a <_Z12calculatevelv+0x26>
    104a:	1f 92       	push	r1
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <inverseKinematicsTrue>
    1054:	88 23       	and	r24, r24
    1056:	09 f4       	brne	.+2      	; 0x105a <_Z12calculatevelv+0x36>
    1058:	57 c0       	rjmp	.+174    	; 0x1108 <_Z12calculatevelv+0xe4>
    105a:	0f 2e       	mov	r0, r31
    105c:	fb ef       	ldi	r31, 0xFB	; 251
    105e:	cf 2e       	mov	r12, r31
    1060:	f3 e0       	ldi	r31, 0x03	; 3
    1062:	df 2e       	mov	r13, r31
    1064:	f0 2d       	mov	r31, r0
    1066:	0f 2e       	mov	r0, r31
    1068:	f3 e2       	ldi	r31, 0x23	; 35
    106a:	4f 2e       	mov	r4, r31
    106c:	f2 e0       	ldi	r31, 0x02	; 2
    106e:	5f 2e       	mov	r5, r31
    1070:	f0 2d       	mov	r31, r0
    1072:	0f 2e       	mov	r0, r31
    1074:	f3 e0       	ldi	r31, 0x03	; 3
    1076:	2f 2e       	mov	r2, r31
    1078:	f4 e0       	ldi	r31, 0x04	; 4
    107a:	3f 2e       	mov	r3, r31
    107c:	f0 2d       	mov	r31, r0
    107e:	0f 2e       	mov	r0, r31
    1080:	fb ef       	ldi	r31, 0xFB	; 251
    1082:	6f 2e       	mov	r6, r31
    1084:	f3 e0       	ldi	r31, 0x03	; 3
    1086:	7f 2e       	mov	r7, r31
    1088:	f0 2d       	mov	r31, r0
    108a:	da 82       	std	Y+2, r13	; 0x02
    108c:	c9 82       	std	Y+1, r12	; 0x01
    108e:	05 ef       	ldi	r16, 0xF5	; 245
    1090:	13 e0       	ldi	r17, 0x03	; 3
    1092:	72 01       	movw	r14, r4
    1094:	1b 82       	std	Y+3, r1	; 0x03
    1096:	1c 82       	std	Y+4, r1	; 0x04
    1098:	d8 01       	movw	r26, r16
    109a:	6d 91       	ld	r22, X+
    109c:	7d 91       	ld	r23, X+
    109e:	8d 01       	movw	r16, r26
    10a0:	f7 01       	movw	r30, r14
    10a2:	81 90       	ld	r8, Z+
    10a4:	91 90       	ld	r9, Z+
    10a6:	a1 90       	ld	r10, Z+
    10a8:	b1 90       	ld	r11, Z+
    10aa:	7f 01       	movw	r14, r30
    10ac:	07 2e       	mov	r0, r23
    10ae:	00 0c       	add	r0, r0
    10b0:	88 0b       	sbc	r24, r24
    10b2:	99 0b       	sbc	r25, r25
    10b4:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    10b8:	a5 01       	movw	r20, r10
    10ba:	94 01       	movw	r18, r8
    10bc:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    10c0:	4b 01       	movw	r8, r22
    10c2:	5c 01       	movw	r10, r24
    10c4:	2b 81       	ldd	r18, Y+3	; 0x03
    10c6:	3c 81       	ldd	r19, Y+4	; 0x04
    10c8:	b9 01       	movw	r22, r18
    10ca:	33 0f       	add	r19, r19
    10cc:	88 0b       	sbc	r24, r24
    10ce:	99 0b       	sbc	r25, r25
    10d0:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	c5 01       	movw	r24, r10
    10da:	b4 01       	movw	r22, r8
    10dc:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    10e0:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    10e4:	7c 83       	std	Y+4, r23	; 0x04
    10e6:	6b 83       	std	Y+3, r22	; 0x03
    10e8:	06 15       	cp	r16, r6
    10ea:	17 05       	cpc	r17, r7
    10ec:	a9 f6       	brne	.-86     	; 0x1098 <_Z12calculatevelv+0x74>
    10ee:	a9 81       	ldd	r26, Y+1	; 0x01
    10f0:	ba 81       	ldd	r27, Y+2	; 0x02
    10f2:	6d 93       	st	X+, r22
    10f4:	7c 93       	st	X, r23
    10f6:	f2 e0       	ldi	r31, 0x02	; 2
    10f8:	cf 0e       	add	r12, r31
    10fa:	d1 1c       	adc	r13, r1
    10fc:	2c e0       	ldi	r18, 0x0C	; 12
    10fe:	42 0e       	add	r4, r18
    1100:	51 1c       	adc	r5, r1
    1102:	c2 14       	cp	r12, r2
    1104:	d3 04       	cpc	r13, r3
    1106:	09 f6       	brne	.-126    	; 0x108a <_Z12calculatevelv+0x66>
    1108:	e3 e0       	ldi	r30, 0x03	; 3
    110a:	f4 e0       	ldi	r31, 0x04	; 4
    110c:	ab ef       	ldi	r26, 0xFB	; 251
    110e:	b3 e0       	ldi	r27, 0x03	; 3
    1110:	2d 91       	ld	r18, X+
    1112:	3c 91       	ld	r19, X
    1114:	47 e1       	ldi	r20, 0x17	; 23
    1116:	42 9f       	mul	r20, r18
    1118:	c0 01       	movw	r24, r0
    111a:	43 9f       	mul	r20, r19
    111c:	90 0d       	add	r25, r0
    111e:	11 24       	eor	r1, r1
    1120:	29 ef       	ldi	r18, 0xF9	; 249
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	b9 01       	movw	r22, r18
    1126:	0e 94 c7 22 	call	0x458e	; 0x458e <__divmodhi4>
    112a:	60 83       	st	Z, r22
    112c:	60 91 fd 03 	lds	r22, 0x03FD	; 0x8003fd <velocity_motor+0x2>
    1130:	70 91 fe 03 	lds	r23, 0x03FE	; 0x8003fe <velocity_motor+0x3>
    1134:	46 9f       	mul	r20, r22
    1136:	c0 01       	movw	r24, r0
    1138:	47 9f       	mul	r20, r23
    113a:	90 0d       	add	r25, r0
    113c:	11 24       	eor	r1, r1
    113e:	b9 01       	movw	r22, r18
    1140:	0e 94 c7 22 	call	0x458e	; 0x458e <__divmodhi4>
    1144:	61 83       	std	Z+1, r22	; 0x01
    1146:	60 91 ff 03 	lds	r22, 0x03FF	; 0x8003ff <velocity_motor+0x4>
    114a:	70 91 00 04 	lds	r23, 0x0400	; 0x800400 <velocity_motor+0x5>
    114e:	46 9f       	mul	r20, r22
    1150:	c0 01       	movw	r24, r0
    1152:	47 9f       	mul	r20, r23
    1154:	90 0d       	add	r25, r0
    1156:	11 24       	eor	r1, r1
    1158:	b9 01       	movw	r22, r18
    115a:	0e 94 c7 22 	call	0x458e	; 0x458e <__divmodhi4>
    115e:	62 83       	std	Z+2, r22	; 0x02
    1160:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <velocity_motor+0x6>
    1164:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <velocity_motor+0x7>
    1168:	46 9f       	mul	r20, r22
    116a:	c0 01       	movw	r24, r0
    116c:	47 9f       	mul	r20, r23
    116e:	90 0d       	add	r25, r0
    1170:	11 24       	eor	r1, r1
    1172:	b9 01       	movw	r22, r18
    1174:	0e 94 c7 22 	call	0x458e	; 0x458e <__divmodhi4>
    1178:	63 83       	std	Z+3, r22	; 0x03
    117a:	29 dd       	rcall	.-1454   	; 0xbce <_Z15sendDataToSlavev>
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	7f 90       	pop	r7
    119e:	6f 90       	pop	r6
    11a0:	5f 90       	pop	r5
    11a2:	4f 90       	pop	r4
    11a4:	3f 90       	pop	r3
    11a6:	2f 90       	pop	r2
    11a8:	08 95       	ret

000011aa <_Z4movxiij>:
    11aa:	2f 92       	push	r2
    11ac:	3f 92       	push	r3
    11ae:	4f 92       	push	r4
    11b0:	5f 92       	push	r5
    11b2:	6f 92       	push	r6
    11b4:	7f 92       	push	r7
    11b6:	8f 92       	push	r8
    11b8:	9f 92       	push	r9
    11ba:	af 92       	push	r10
    11bc:	bf 92       	push	r11
    11be:	cf 92       	push	r12
    11c0:	df 92       	push	r13
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	1c 01       	movw	r2, r24
    11d0:	8b 01       	movw	r16, r22
    11d2:	7a 01       	movw	r14, r20
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <inverseKinematicsTrue>
    11da:	86 ec       	ldi	r24, 0xC6	; 198
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    11e2:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    11e6:	ab 01       	movw	r20, r22
    11e8:	77 23       	and	r23, r23
    11ea:	24 f4       	brge	.+8      	; 0x11f4 <_Z4movxiij+0x4a>
    11ec:	44 27       	eor	r20, r20
    11ee:	55 27       	eor	r21, r21
    11f0:	46 1b       	sub	r20, r22
    11f2:	57 0b       	sbc	r21, r23
    11f4:	ea 01       	movw	r28, r20
    11f6:	50 93 f4 03 	sts	0x03F4, r21	; 0x8003f4 <distanceX+0x1>
    11fa:	40 93 f3 03 	sts	0x03F3, r20	; 0x8003f3 <distanceX>
    11fe:	30 92 5b 03 	sts	0x035B, r3	; 0x80035b <driveX+0xf>
    1202:	20 92 5a 03 	sts	0x035A, r2	; 0x80035a <driveX+0xe>
    1206:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <PidUpdateFlagDriveX>
    120a:	22 23       	and	r18, r18
    120c:	09 f4       	brne	.+2      	; 0x1210 <_Z4movxiij+0x66>
    120e:	55 c1       	rjmp	.+682    	; 0x14ba <_Z4movxiij+0x310>
    1210:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <movingyfront>
    1214:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <movingyback>
    1218:	50 93 4d 03 	sts	0x034D, r21	; 0x80034d <driveX+0x1>
    121c:	40 93 4c 03 	sts	0x034C, r20	; 0x80034c <driveX>
    1220:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <PidUpdateFlagDriveX>
    1224:	48 3e       	cpi	r20, 0xE8	; 232
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	58 07       	cpc	r21, r24
    122a:	0c f4       	brge	.+2      	; 0x122e <_Z4movxiij+0x84>
    122c:	ea c0       	rjmp	.+468    	; 0x1402 <_Z4movxiij+0x258>
    122e:	24 1a       	sub	r2, r20
    1230:	35 0a       	sbc	r3, r21
    1232:	0f 2e       	mov	r0, r31
    1234:	fc e4       	ldi	r31, 0x4C	; 76
    1236:	cf 2e       	mov	r12, r31
    1238:	f3 e0       	ldi	r31, 0x03	; 3
    123a:	df 2e       	mov	r13, r31
    123c:	f0 2d       	mov	r31, r0
    123e:	f6 01       	movw	r30, r12
    1240:	33 82       	std	Z+3, r3	; 0x03
    1242:	22 82       	std	Z+2, r2	; 0x02
    1244:	b1 01       	movw	r22, r2
    1246:	03 2c       	mov	r0, r3
    1248:	00 0c       	add	r0, r0
    124a:	88 0b       	sbc	r24, r24
    124c:	99 0b       	sbc	r25, r25
    124e:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1252:	2b 01       	movw	r4, r22
    1254:	3c 01       	movw	r6, r24
    1256:	f6 01       	movw	r30, r12
    1258:	21 8d       	ldd	r18, Z+25	; 0x19
    125a:	32 8d       	ldd	r19, Z+26	; 0x1a
    125c:	43 8d       	ldd	r20, Z+27	; 0x1b
    125e:	54 8d       	ldd	r21, Z+28	; 0x1c
    1260:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1264:	f6 01       	movw	r30, r12
    1266:	22 85       	ldd	r18, Z+10	; 0x0a
    1268:	33 85       	ldd	r19, Z+11	; 0x0b
    126a:	44 85       	ldd	r20, Z+12	; 0x0c
    126c:	55 85       	ldd	r21, Z+13	; 0x0d
    126e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1272:	4b 01       	movw	r8, r22
    1274:	5c 01       	movw	r10, r24
    1276:	f6 01       	movw	r30, r12
    1278:	62 87       	std	Z+10, r22	; 0x0a
    127a:	73 87       	std	Z+11, r23	; 0x0b
    127c:	84 87       	std	Z+12, r24	; 0x0c
    127e:	95 87       	std	Z+13, r25	; 0x0d
    1280:	80 89       	ldd	r24, Z+16	; 0x10
    1282:	88 23       	and	r24, r24
    1284:	19 f0       	breq	.+6      	; 0x128c <_Z4movxiij+0xe2>
    1286:	d5 83       	std	Z+5, r29	; 0x05
    1288:	c4 83       	std	Z+4, r28	; 0x04
    128a:	10 8a       	std	Z+16, r1	; 0x10
    128c:	c5 01       	movw	r24, r10
    128e:	b4 01       	movw	r22, r8
    1290:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1294:	9b 01       	movw	r18, r22
    1296:	77 23       	and	r23, r23
    1298:	24 f4       	brge	.+8      	; 0x12a2 <_Z4movxiij+0xf8>
    129a:	22 27       	eor	r18, r18
    129c:	33 27       	eor	r19, r19
    129e:	26 1b       	sub	r18, r22
    12a0:	37 0b       	sbc	r19, r23
    12a2:	2b 30       	cpi	r18, 0x0B	; 11
    12a4:	31 05       	cpc	r19, r1
    12a6:	5c f1       	brlt	.+86     	; 0x12fe <_Z4movxiij+0x154>
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	a9 01       	movw	r20, r18
    12ae:	c5 01       	movw	r24, r10
    12b0:	b4 01       	movw	r22, r8
    12b2:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__gesf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	6c f4       	brge	.+26     	; 0x12d4 <_Z4movxiij+0x12a>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a0 e2       	ldi	r26, 0x20	; 32
    12c0:	b1 e4       	ldi	r27, 0x41	; 65
    12c2:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <driveX+0xa>
    12c6:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <driveX+0xb>
    12ca:	a0 93 58 03 	sts	0x0358, r26	; 0x800358 <driveX+0xc>
    12ce:	b0 93 59 03 	sts	0x0359, r27	; 0x800359 <driveX+0xd>
    12d2:	15 c0       	rjmp	.+42     	; 0x12fe <_Z4movxiij+0x154>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	c5 01       	movw	r24, r10
    12dc:	b4 01       	movw	r22, r8
    12de:	0e 94 38 20 	call	0x4070	; 0x4070 <__cmpsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	64 f4       	brge	.+24     	; 0x12fe <_Z4movxiij+0x154>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a0 e2       	ldi	r26, 0x20	; 32
    12ec:	b1 ec       	ldi	r27, 0xC1	; 193
    12ee:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <driveX+0xa>
    12f2:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <driveX+0xb>
    12f6:	a0 93 58 03 	sts	0x0358, r26	; 0x800358 <driveX+0xc>
    12fa:	b0 93 59 03 	sts	0x0359, r27	; 0x800359 <driveX+0xd>
    12fe:	12 14       	cp	r1, r2
    1300:	13 04       	cpc	r1, r3
    1302:	bc f5       	brge	.+110    	; 0x1372 <_Z4movxiij+0x1c8>
    1304:	0f 2e       	mov	r0, r31
    1306:	fc e4       	ldi	r31, 0x4C	; 76
    1308:	cf 2e       	mov	r12, r31
    130a:	f3 e0       	ldi	r31, 0x03	; 3
    130c:	df 2e       	mov	r13, r31
    130e:	f0 2d       	mov	r31, r0
    1310:	f6 01       	movw	r30, r12
    1312:	25 89       	ldd	r18, Z+21	; 0x15
    1314:	36 89       	ldd	r19, Z+22	; 0x16
    1316:	47 89       	ldd	r20, Z+23	; 0x17
    1318:	50 8d       	ldd	r21, Z+24	; 0x18
    131a:	c3 01       	movw	r24, r6
    131c:	b2 01       	movw	r22, r4
    131e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1322:	f6 01       	movw	r30, r12
    1324:	22 85       	ldd	r18, Z+10	; 0x0a
    1326:	33 85       	ldd	r19, Z+11	; 0x0b
    1328:	44 85       	ldd	r20, Z+12	; 0x0c
    132a:	55 85       	ldd	r21, Z+13	; 0x0d
    132c:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1330:	4b 01       	movw	r8, r22
    1332:	5c 01       	movw	r10, r24
    1334:	f6 01       	movw	r30, r12
    1336:	84 81       	ldd	r24, Z+4	; 0x04
    1338:	95 81       	ldd	r25, Z+5	; 0x05
    133a:	be 01       	movw	r22, r28
    133c:	68 1b       	sub	r22, r24
    133e:	79 0b       	sbc	r23, r25
    1340:	07 2e       	mov	r0, r23
    1342:	00 0c       	add	r0, r0
    1344:	88 0b       	sbc	r24, r24
    1346:	99 0b       	sbc	r25, r25
    1348:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    134c:	f6 01       	movw	r30, r12
    134e:	25 8d       	ldd	r18, Z+29	; 0x1d
    1350:	36 8d       	ldd	r19, Z+30	; 0x1e
    1352:	47 8d       	ldd	r20, Z+31	; 0x1f
    1354:	50 a1       	ldd	r21, Z+32	; 0x20
    1356:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	c5 01       	movw	r24, r10
    1360:	b4 01       	movw	r22, r8
    1362:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__subsf3>
    1366:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    136a:	f6 01       	movw	r30, r12
    136c:	77 83       	std	Z+7, r23	; 0x07
    136e:	66 83       	std	Z+6, r22	; 0x06
    1370:	04 c0       	rjmp	.+8      	; 0x137a <_Z4movxiij+0x1d0>
    1372:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <driveX+0x7>
    1376:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <driveX+0x6>
    137a:	ec e4       	ldi	r30, 0x4C	; 76
    137c:	f3 e0       	ldi	r31, 0x03	; 3
    137e:	d5 83       	std	Z+5, r29	; 0x05
    1380:	c4 83       	std	Z+4, r28	; 0x04
    1382:	86 81       	ldd	r24, Z+6	; 0x06
    1384:	97 81       	ldd	r25, Z+7	; 0x07
    1386:	9c 01       	movw	r18, r24
    1388:	99 23       	and	r25, r25
    138a:	24 f4       	brge	.+8      	; 0x1394 <_Z4movxiij+0x1ea>
    138c:	22 27       	eor	r18, r18
    138e:	33 27       	eor	r19, r19
    1390:	28 1b       	sub	r18, r24
    1392:	39 0b       	sbc	r19, r25
    1394:	e2 16       	cp	r14, r18
    1396:	f3 06       	cpc	r15, r19
    1398:	78 f4       	brcc	.+30     	; 0x13b8 <_Z4movxiij+0x20e>
    139a:	18 16       	cp	r1, r24
    139c:	19 06       	cpc	r1, r25
    139e:	2c f4       	brge	.+10     	; 0x13aa <_Z4movxiij+0x200>
    13a0:	f0 92 53 03 	sts	0x0353, r15	; 0x800353 <driveX+0x7>
    13a4:	e0 92 52 03 	sts	0x0352, r14	; 0x800352 <driveX+0x6>
    13a8:	07 c0       	rjmp	.+14     	; 0x13b8 <_Z4movxiij+0x20e>
    13aa:	f1 94       	neg	r15
    13ac:	e1 94       	neg	r14
    13ae:	f1 08       	sbc	r15, r1
    13b0:	f0 92 53 03 	sts	0x0353, r15	; 0x800353 <driveX+0x7>
    13b4:	e0 92 52 03 	sts	0x0352, r14	; 0x800352 <driveX+0x6>
    13b8:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <driveX+0x6>
    13bc:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <driveX+0x7>
    13c0:	43 96       	adiw	r24, 0x13	; 19
    13c2:	87 97       	sbiw	r24, 0x27	; 39
    13c4:	a8 f4       	brcc	.+42     	; 0x13f0 <_Z4movxiij+0x246>
    13c6:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <movingxfront>
    13ca:	88 23       	and	r24, r24
    13cc:	39 f0       	breq	.+14     	; 0x13dc <_Z4movxiij+0x232>
    13ce:	84 e1       	ldi	r24, 0x14	; 20
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <driveX+0x7>
    13d6:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <driveX+0x6>
    13da:	0a c0       	rjmp	.+20     	; 0x13f0 <_Z4movxiij+0x246>
    13dc:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <movingxback>
    13e0:	88 23       	and	r24, r24
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <_Z4movxiij+0x246>
    13e4:	8c ee       	ldi	r24, 0xEC	; 236
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <driveX+0x7>
    13ec:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <driveX+0x6>
    13f0:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <driveX+0x6>
    13f4:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <driveX+0x7>
    13f8:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <velocity_robot+0x1>
    13fc:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <velocity_robot>
    1400:	35 c0       	rjmp	.+106    	; 0x146c <_Z4movxiij+0x2c2>
    1402:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <startingAtFront>
    1406:	88 23       	and	r24, r24
    1408:	c9 f0       	breq	.+50     	; 0x143c <_Z4movxiij+0x292>
    140a:	ba 01       	movw	r22, r20
    140c:	55 0f       	add	r21, r21
    140e:	88 0b       	sbc	r24, r24
    1410:	99 0b       	sbc	r25, r25
    1412:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1416:	2d ec       	ldi	r18, 0xCD	; 205
    1418:	3c ec       	ldi	r19, 0xCC	; 204
    141a:	4c ec       	ldi	r20, 0xCC	; 204
    141c:	5d e3       	ldi	r21, 0x3D	; 61
    141e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e7       	ldi	r20, 0x70	; 112
    1428:	52 e4       	ldi	r21, 0x42	; 66
    142a:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    142e:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1432:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <velocity_robot+0x1>
    1436:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <velocity_robot>
    143a:	18 c0       	rjmp	.+48     	; 0x146c <_Z4movxiij+0x2c2>
    143c:	ba 01       	movw	r22, r20
    143e:	55 0f       	add	r21, r21
    1440:	88 0b       	sbc	r24, r24
    1442:	99 0b       	sbc	r25, r25
    1444:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1448:	2a e0       	ldi	r18, 0x0A	; 10
    144a:	37 ed       	ldi	r19, 0xD7	; 215
    144c:	43 e2       	ldi	r20, 0x23	; 35
    144e:	5d e3       	ldi	r21, 0x3D	; 61
    1450:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e7       	ldi	r20, 0x70	; 112
    145a:	52 e4       	ldi	r21, 0x42	; 66
    145c:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1460:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1464:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <velocity_robot+0x1>
    1468:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <velocity_robot>
    146c:	02 30       	cpi	r16, 0x02	; 2
    146e:	11 05       	cpc	r17, r1
    1470:	51 f4       	brne	.+20     	; 0x1486 <_Z4movxiij+0x2dc>
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <movingxfront>
    1478:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <movingxback>
    147c:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <movingyback>
    1480:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <movingyfront>
    1484:	1a c0       	rjmp	.+52     	; 0x14ba <_Z4movxiij+0x310>
    1486:	03 30       	cpi	r16, 0x03	; 3
    1488:	11 05       	cpc	r17, r1
    148a:	b9 f4       	brne	.+46     	; 0x14ba <_Z4movxiij+0x310>
    148c:	e5 ef       	ldi	r30, 0xF5	; 245
    148e:	f3 e0       	ldi	r31, 0x03	; 3
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	99 23       	and	r25, r25
    1496:	1c f4       	brge	.+6      	; 0x149e <_Z4movxiij+0x2f4>
    1498:	91 95       	neg	r25
    149a:	81 95       	neg	r24
    149c:	91 09       	sbc	r25, r1
    149e:	91 95       	neg	r25
    14a0:	81 95       	neg	r24
    14a2:	91 09       	sbc	r25, r1
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
    14a8:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <movingxfront>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <movingxback>
    14b2:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <movingyfront>
    14b6:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <movingyback>
    14ba:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <startingAtFront>
    14be:	88 23       	and	r24, r24
    14c0:	49 f0       	breq	.+18     	; 0x14d4 <_Z4movxiij+0x32a>
    14c2:	e5 ef       	ldi	r30, 0xF5	; 245
    14c4:	f3 e0       	ldi	r31, 0x03	; 3
    14c6:	8c ee       	ldi	r24, 0xEC	; 236
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	93 83       	std	Z+3, r25	; 0x03
    14cc:	82 83       	std	Z+2, r24	; 0x02
    14ce:	15 82       	std	Z+5, r1	; 0x05
    14d0:	14 82       	std	Z+4, r1	; 0x04
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <_Z4movxiij+0x334>
    14d4:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <velocity_robot+0x3>
    14d8:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <velocity_robot+0x2>
    14dc:	4d dc       	rcall	.-1894   	; 0xd78 <_Z19calculateCompassPIDv>
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	bf 90       	pop	r11
    14f0:	af 90       	pop	r10
    14f2:	9f 90       	pop	r9
    14f4:	8f 90       	pop	r8
    14f6:	7f 90       	pop	r7
    14f8:	6f 90       	pop	r6
    14fa:	5f 90       	pop	r5
    14fc:	4f 90       	pop	r4
    14fe:	3f 90       	pop	r3
    1500:	2f 90       	pop	r2
    1502:	08 95       	ret

00001504 <_Z27Get_Front_LinetrackerY_Datav>:
    1504:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_Z10uart2_getcv>
    1508:	85 36       	cpi	r24, 0x65	; 101
    150a:	38 f0       	brcs	.+14     	; 0x151a <_Z27Get_Front_LinetrackerY_Datav+0x16>
    150c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <_previous_data_of_front_linetracker>
    1510:	90 35       	cpi	r25, 0x50	; 80
    1512:	61 f0       	breq	.+24     	; 0x152c <_Z27Get_Front_LinetrackerY_Datav+0x28>
    1514:	9a 30       	cpi	r25, 0x0A	; 10
    1516:	d9 f5       	brne	.+118    	; 0x158e <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <_Z27Get_Front_LinetrackerY_Datav+0x1e>
    151a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <_previous_data_of_front_linetracker>
    151e:	9a 30       	cpi	r25, 0x0A	; 10
    1520:	81 f5       	brne	.+96     	; 0x1582 <_Z27Get_Front_LinetrackerY_Datav+0x7e>
    1522:	81 11       	cpse	r24, r1
    1524:	31 c0       	rjmp	.+98     	; 0x1588 <_Z27Get_Front_LinetrackerY_Datav+0x84>
    1526:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <_front_linetracker_left_edge_left>
    152a:	2e c0       	rjmp	.+92     	; 0x1588 <_Z27Get_Front_LinetrackerY_Datav+0x84>
    152c:	86 34       	cpi	r24, 0x46	; 70
    152e:	79 f4       	brne	.+30     	; 0x154e <_Z27Get_Front_LinetrackerY_Datav+0x4a>
    1530:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <_front_linetracker_right_edge_left>
    1534:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <_front_linetracker_left_edge_left>
    1538:	91 11       	cpse	r25, r1
    153a:	20 c0       	rjmp	.+64     	; 0x157c <_Z27Get_Front_LinetrackerY_Datav+0x78>
    153c:	1a c0       	rjmp	.+52     	; 0x1572 <_Z27Get_Front_LinetrackerY_Datav+0x6e>
    153e:	8a e0       	ldi	r24, 0x0A	; 10
    1540:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <_front_linetracker_left_edge_left>
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	20 c0       	rjmp	.+64     	; 0x158e <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    154e:	85 36       	cpi	r24, 0x65	; 101
    1550:	40 f0       	brcs	.+16     	; 0x1562 <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    1552:	80 e5       	ldi	r24, 0x50	; 80
    1554:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_previous_data_of_front_linetracker>
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <_front_linetracker_right_edge_left>
    155e:	9a e5       	ldi	r25, 0x5A	; 90
    1560:	16 c0       	rjmp	.+44     	; 0x158e <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1562:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <_front_linetracker_left_edge_left>
    1566:	91 11       	cpse	r25, r1
    1568:	09 c0       	rjmp	.+18     	; 0x157c <_Z27Get_Front_LinetrackerY_Datav+0x78>
    156a:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <_front_linetracker_right_edge_left>
    156e:	91 11       	cpse	r25, r1
    1570:	05 c0       	rjmp	.+10     	; 0x157c <_Z27Get_Front_LinetrackerY_Datav+0x78>
    1572:	9a e0       	ldi	r25, 0x0A	; 10
    1574:	98 0f       	add	r25, r24
    1576:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_previous_data_of_front_linetracker>
    157a:	09 c0       	rjmp	.+18     	; 0x158e <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    157c:	9a e0       	ldi	r25, 0x0A	; 10
    157e:	98 0f       	add	r25, r24
    1580:	06 c0       	rjmp	.+12     	; 0x158e <_Z27Get_Front_LinetrackerY_Datav+0x8a>
    1582:	90 35       	cpi	r25, 0x50	; 80
    1584:	71 f7       	brne	.-36     	; 0x1562 <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    1586:	d2 cf       	rjmp	.-92     	; 0x152c <_Z27Get_Front_LinetrackerY_Datav+0x28>
    1588:	85 36       	cpi	r24, 0x65	; 101
    158a:	58 f3       	brcs	.-42     	; 0x1562 <_Z27Get_Front_LinetrackerY_Datav+0x5e>
    158c:	d8 cf       	rjmp	.-80     	; 0x153e <_Z27Get_Front_LinetrackerY_Datav+0x3a>
    158e:	89 2f       	mov	r24, r25
    1590:	08 95       	ret

00001592 <_Z26Get_Back_LinetrackerY_Datav>:
    1592:	4f 92       	push	r4
    1594:	5f 92       	push	r5
    1596:	6f 92       	push	r6
    1598:	7f 92       	push	r7
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	0f 2e       	mov	r0, r31
    15b0:	fd ea       	ldi	r31, 0xAD	; 173
    15b2:	ef 2e       	mov	r14, r31
    15b4:	f2 e0       	ldi	r31, 0x02	; 2
    15b6:	ff 2e       	mov	r15, r31
    15b8:	f0 2d       	mov	r31, r0
    15ba:	00 ed       	ldi	r16, 0xD0	; 208
    15bc:	13 e0       	ldi	r17, 0x03	; 3
    15be:	c0 e0       	ldi	r28, 0x00	; 0
    15c0:	d0 e0       	ldi	r29, 0x00	; 0
    15c2:	cc 24       	eor	r12, r12
    15c4:	c3 94       	inc	r12
    15c6:	d1 2c       	mov	r13, r1
    15c8:	86 b1       	in	r24, 0x06	; 6
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0c 2e       	mov	r0, r28
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <_Z26Get_Back_LinetrackerY_Datav+0x42>
    15d0:	95 95       	asr	r25
    15d2:	87 95       	ror	r24
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <_Z26Get_Back_LinetrackerY_Datav+0x3e>
    15d8:	80 ff       	sbrs	r24, 0
    15da:	10 c0       	rjmp	.+32     	; 0x15fc <_Z26Get_Back_LinetrackerY_Datav+0x6a>
    15dc:	f8 01       	movw	r30, r16
    15de:	d1 82       	std	Z+1, r13	; 0x01
    15e0:	c0 82       	st	Z, r12
    15e2:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <_ZL9linestate>
    15e6:	c6 01       	movw	r24, r12
    15e8:	0c 2e       	mov	r0, r28
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <_Z26Get_Back_LinetrackerY_Datav+0x5e>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <_Z26Get_Back_LinetrackerY_Datav+0x5a>
    15f4:	82 2b       	or	r24, r18
    15f6:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <_ZL9linestate>
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <_Z26Get_Back_LinetrackerY_Datav+0x70>
    15fc:	f8 01       	movw	r30, r16
    15fe:	11 82       	std	Z+1, r1	; 0x01
    1600:	10 82       	st	Z, r1
    1602:	f7 01       	movw	r30, r14
    1604:	81 91       	ld	r24, Z+
    1606:	91 91       	ld	r25, Z+
    1608:	7f 01       	movw	r14, r30
    160a:	f8 01       	movw	r30, r16
    160c:	a1 90       	ld	r10, Z+
    160e:	b1 90       	ld	r11, Z+
    1610:	8f 01       	movw	r16, r30
    1612:	8a 9d       	mul	r24, r10
    1614:	b0 01       	movw	r22, r0
    1616:	8b 9d       	mul	r24, r11
    1618:	70 0d       	add	r23, r0
    161a:	9a 9d       	mul	r25, r10
    161c:	70 0d       	add	r23, r0
    161e:	11 24       	eor	r1, r1
    1620:	07 2e       	mov	r0, r23
    1622:	00 0c       	add	r0, r0
    1624:	88 0b       	sbc	r24, r24
    1626:	99 0b       	sbc	r25, r25
    1628:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    162c:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <_ZL8totalSum>
    1630:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <_ZL8totalSum+0x1>
    1634:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <_ZL8totalSum+0x2>
    1638:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <_ZL8totalSum+0x3>
    163c:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1640:	2b 01       	movw	r4, r22
    1642:	3c 01       	movw	r6, r24
    1644:	60 93 e4 03 	sts	0x03E4, r22	; 0x8003e4 <_ZL8totalSum>
    1648:	70 93 e5 03 	sts	0x03E5, r23	; 0x8003e5 <_ZL8totalSum+0x1>
    164c:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <_ZL8totalSum+0x2>
    1650:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <_ZL8totalSum+0x3>
    1654:	b5 01       	movw	r22, r10
    1656:	bb 0c       	add	r11, r11
    1658:	88 0b       	sbc	r24, r24
    165a:	99 0b       	sbc	r25, r25
    165c:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1660:	20 91 e0 03 	lds	r18, 0x03E0	; 0x8003e0 <_ZL9totalLine>
    1664:	30 91 e1 03 	lds	r19, 0x03E1	; 0x8003e1 <_ZL9totalLine+0x1>
    1668:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <_ZL9totalLine+0x2>
    166c:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <_ZL9totalLine+0x3>
    1670:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1674:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <_ZL9totalLine>
    1678:	70 93 e1 03 	sts	0x03E1, r23	; 0x8003e1 <_ZL9totalLine+0x1>
    167c:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <_ZL9totalLine+0x2>
    1680:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <_ZL9totalLine+0x3>
    1684:	21 96       	adiw	r28, 0x01	; 1
    1686:	c8 30       	cpi	r28, 0x08	; 8
    1688:	d1 05       	cpc	r29, r1
    168a:	09 f0       	breq	.+2      	; 0x168e <_Z26Get_Back_LinetrackerY_Datav+0xfc>
    168c:	9d cf       	rjmp	.-198    	; 0x15c8 <_Z26Get_Back_LinetrackerY_Datav+0x36>
    168e:	9b 01       	movw	r18, r22
    1690:	ac 01       	movw	r20, r24
    1692:	c3 01       	movw	r24, r6
    1694:	b2 01       	movw	r22, r4
    1696:	0e 94 3f 20 	call	0x407e	; 0x407e <__divsf3>
    169a:	0e 94 ac 20 	call	0x4158	; 0x4158 <__fixunssfsi>
    169e:	60 93 e8 03 	sts	0x03E8, r22	; 0x8003e8 <_ZL16linetracker_data>
    16a2:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <_ZL8totalSum>
    16a6:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <_ZL8totalSum+0x1>
    16aa:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_ZL8totalSum+0x2>
    16ae:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <_ZL8totalSum+0x3>
    16b2:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <_ZL9totalLine>
    16b6:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <_ZL9totalLine+0x1>
    16ba:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <_ZL9totalLine+0x2>
    16be:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <_ZL9totalLine+0x3>
    16c2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_previous_data_of_back_linetracker>
    16c6:	8a 30       	cpi	r24, 0x0A	; 10
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <_Z26Get_Back_LinetrackerY_Datav+0x142>
    16ca:	6a 30       	cpi	r22, 0x0A	; 10
    16cc:	81 f5       	brne	.+96     	; 0x172e <_Z26Get_Back_LinetrackerY_Datav+0x19c>
    16ce:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <_back_linetracker_left_edge_left>
    16d2:	2d c0       	rjmp	.+90     	; 0x172e <_Z26Get_Back_LinetrackerY_Datav+0x19c>
    16d4:	80 35       	cpi	r24, 0x50	; 80
    16d6:	f1 f4       	brne	.+60     	; 0x1714 <_Z26Get_Back_LinetrackerY_Datav+0x182>
    16d8:	60 35       	cpi	r22, 0x50	; 80
    16da:	81 f4       	brne	.+32     	; 0x16fc <_Z26Get_Back_LinetrackerY_Datav+0x16a>
    16dc:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <_back_linetracker_right_edge_left>
    16e0:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_back_linetracker_left_edge_left>
    16e4:	88 23       	and	r24, r24
    16e6:	f1 f0       	breq	.+60     	; 0x1724 <_Z26Get_Back_LinetrackerY_Datav+0x192>
    16e8:	1f c0       	rjmp	.+62     	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    16ea:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <_ZL16linetracker_data>
    16ee:	8a e0       	ldi	r24, 0x0A	; 10
    16f0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_back_linetracker_left_edge_left>
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    16fc:	61 11       	cpse	r22, r1
    16fe:	0a c0       	rjmp	.+20     	; 0x1714 <_Z26Get_Back_LinetrackerY_Datav+0x182>
    1700:	8a e5       	ldi	r24, 0x5A	; 90
    1702:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <_ZL16linetracker_data>
    1706:	80 e5       	ldi	r24, 0x50	; 80
    1708:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_previous_data_of_back_linetracker>
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <_back_linetracker_right_edge_left>
    1712:	0a c0       	rjmp	.+20     	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    1714:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <_back_linetracker_left_edge_left>
    1718:	81 11       	cpse	r24, r1
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    171c:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <_back_linetracker_right_edge_left>
    1720:	81 11       	cpse	r24, r1
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <_Z26Get_Back_LinetrackerY_Datav+0x196>
    1724:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <_previous_data_of_back_linetracker>
    1728:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <_ZL16linetracker_data>
    172c:	03 c0       	rjmp	.+6      	; 0x1734 <_Z26Get_Back_LinetrackerY_Datav+0x1a2>
    172e:	61 11       	cpse	r22, r1
    1730:	f1 cf       	rjmp	.-30     	; 0x1714 <_Z26Get_Back_LinetrackerY_Datav+0x182>
    1732:	db cf       	rjmp	.-74     	; 0x16ea <_Z26Get_Back_LinetrackerY_Datav+0x158>
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	af 90       	pop	r10
    1748:	7f 90       	pop	r7
    174a:	6f 90       	pop	r6
    174c:	5f 90       	pop	r5
    174e:	4f 90       	pop	r4
    1750:	08 95       	ret

00001752 <_Z32Calculate_Front_LinetrackerY_Pidv>:
    1752:	4f 92       	push	r4
    1754:	5f 92       	push	r5
    1756:	6f 92       	push	r6
    1758:	7f 92       	push	r7
    175a:	8f 92       	push	r8
    175c:	9f 92       	push	r9
    175e:	af 92       	push	r10
    1760:	bf 92       	push	r11
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <FrontLinetrackerY_+0x10>
    1772:	88 23       	and	r24, r24
    1774:	59 f0       	breq	.+22     	; 0x178c <_Z32Calculate_Front_LinetrackerY_Pidv+0x3a>
    1776:	c6 de       	rcall	.-628    	; 0x1504 <_Z27Get_Front_LinetrackerY_Datav>
    1778:	88 23       	and	r24, r24
    177a:	41 f0       	breq	.+16     	; 0x178c <_Z32Calculate_Front_LinetrackerY_Pidv+0x3a>
    177c:	c3 de       	rcall	.-634    	; 0x1504 <_Z27Get_Front_LinetrackerY_Datav>
    177e:	e6 e0       	ldi	r30, 0x06	; 6
    1780:	f3 e0       	ldi	r31, 0x03	; 3
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	95 83       	std	Z+5, r25	; 0x05
    1786:	84 83       	std	Z+4, r24	; 0x04
    1788:	10 8a       	std	Z+16, r1	; 0x10
    178a:	c5 c0       	rjmp	.+394    	; 0x1916 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    178c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1790:	88 23       	and	r24, r24
    1792:	09 f4       	brne	.+2      	; 0x1796 <_Z32Calculate_Front_LinetrackerY_Pidv+0x44>
    1794:	c0 c0       	rjmp	.+384    	; 0x1916 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c4>
    1796:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    179a:	88 23       	and	r24, r24
    179c:	09 f4       	brne	.+2      	; 0x17a0 <_Z32Calculate_Front_LinetrackerY_Pidv+0x4e>
    179e:	bf c0       	rjmp	.+382    	; 0x191e <_Z32Calculate_Front_LinetrackerY_Pidv+0x1cc>
    17a0:	b1 de       	rcall	.-670    	; 0x1504 <_Z27Get_Front_LinetrackerY_Datav>
    17a2:	e8 2e       	mov	r14, r24
    17a4:	f1 2c       	mov	r15, r1
    17a6:	c6 e0       	ldi	r28, 0x06	; 6
    17a8:	d3 e0       	ldi	r29, 0x03	; 3
    17aa:	f9 82       	std	Y+1, r15	; 0x01
    17ac:	e8 82       	st	Y, r14
    17ae:	0e 85       	ldd	r16, Y+14	; 0x0e
    17b0:	1f 85       	ldd	r17, Y+15	; 0x0f
    17b2:	0e 19       	sub	r16, r14
    17b4:	1f 09       	sbc	r17, r15
    17b6:	1b 83       	std	Y+3, r17	; 0x03
    17b8:	0a 83       	std	Y+2, r16	; 0x02
    17ba:	b8 01       	movw	r22, r16
    17bc:	01 2e       	mov	r0, r17
    17be:	00 0c       	add	r0, r0
    17c0:	88 0b       	sbc	r24, r24
    17c2:	99 0b       	sbc	r25, r25
    17c4:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    17c8:	4b 01       	movw	r8, r22
    17ca:	5c 01       	movw	r10, r24
    17cc:	29 8d       	ldd	r18, Y+25	; 0x19
    17ce:	3a 8d       	ldd	r19, Y+26	; 0x1a
    17d0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    17d2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    17d4:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    17d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    17da:	3b 85       	ldd	r19, Y+11	; 0x0b
    17dc:	4c 85       	ldd	r20, Y+12	; 0x0c
    17de:	5d 85       	ldd	r21, Y+13	; 0x0d
    17e0:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    17e4:	2b 01       	movw	r4, r22
    17e6:	3c 01       	movw	r6, r24
    17e8:	6a 87       	std	Y+10, r22	; 0x0a
    17ea:	7b 87       	std	Y+11, r23	; 0x0b
    17ec:	8c 87       	std	Y+12, r24	; 0x0c
    17ee:	9d 87       	std	Y+13, r25	; 0x0d
    17f0:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    17f4:	9b 01       	movw	r18, r22
    17f6:	77 23       	and	r23, r23
    17f8:	24 f4       	brge	.+8      	; 0x1802 <_Z32Calculate_Front_LinetrackerY_Pidv+0xb0>
    17fa:	22 27       	eor	r18, r18
    17fc:	33 27       	eor	r19, r19
    17fe:	26 1b       	sub	r18, r22
    1800:	37 0b       	sbc	r19, r23
    1802:	26 30       	cpi	r18, 0x06	; 6
    1804:	31 05       	cpc	r19, r1
    1806:	5c f1       	brlt	.+86     	; 0x185e <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	a9 01       	movw	r20, r18
    180e:	c3 01       	movw	r24, r6
    1810:	b2 01       	movw	r22, r4
    1812:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__gesf2>
    1816:	18 16       	cp	r1, r24
    1818:	6c f4       	brge	.+26     	; 0x1834 <_Z32Calculate_Front_LinetrackerY_Pidv+0xe2>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a0 ea       	ldi	r26, 0xA0	; 160
    1820:	b0 e4       	ldi	r27, 0x40	; 64
    1822:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <FrontLinetrackerY_+0xa>
    1826:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <FrontLinetrackerY_+0xb>
    182a:	a0 93 12 03 	sts	0x0312, r26	; 0x800312 <FrontLinetrackerY_+0xc>
    182e:	b0 93 13 03 	sts	0x0313, r27	; 0x800313 <FrontLinetrackerY_+0xd>
    1832:	15 c0       	rjmp	.+42     	; 0x185e <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	a9 01       	movw	r20, r18
    183a:	c3 01       	movw	r24, r6
    183c:	b2 01       	movw	r22, r4
    183e:	0e 94 38 20 	call	0x4070	; 0x4070 <__cmpsf2>
    1842:	88 23       	and	r24, r24
    1844:	64 f4       	brge	.+24     	; 0x185e <_Z32Calculate_Front_LinetrackerY_Pidv+0x10c>
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 ea       	ldi	r26, 0xA0	; 160
    184c:	b0 ec       	ldi	r27, 0xC0	; 192
    184e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <FrontLinetrackerY_+0xa>
    1852:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <FrontLinetrackerY_+0xb>
    1856:	a0 93 12 03 	sts	0x0312, r26	; 0x800312 <FrontLinetrackerY_+0xc>
    185a:	b0 93 13 03 	sts	0x0313, r27	; 0x800313 <FrontLinetrackerY_+0xd>
    185e:	01 2b       	or	r16, r17
    1860:	49 f4       	brne	.+18     	; 0x1874 <_Z32Calculate_Front_LinetrackerY_Pidv+0x122>
    1862:	e6 e0       	ldi	r30, 0x06	; 6
    1864:	f3 e0       	ldi	r31, 0x03	; 3
    1866:	12 86       	std	Z+10, r1	; 0x0a
    1868:	13 86       	std	Z+11, r1	; 0x0b
    186a:	14 86       	std	Z+12, r1	; 0x0c
    186c:	15 86       	std	Z+13, r1	; 0x0d
    186e:	17 82       	std	Z+7, r1	; 0x07
    1870:	16 82       	std	Z+6, r1	; 0x06
    1872:	2d c0       	rjmp	.+90     	; 0x18ce <_Z32Calculate_Front_LinetrackerY_Pidv+0x17c>
    1874:	c6 e0       	ldi	r28, 0x06	; 6
    1876:	d3 e0       	ldi	r29, 0x03	; 3
    1878:	2d 89       	ldd	r18, Y+21	; 0x15
    187a:	3e 89       	ldd	r19, Y+22	; 0x16
    187c:	4f 89       	ldd	r20, Y+23	; 0x17
    187e:	58 8d       	ldd	r21, Y+24	; 0x18
    1880:	c5 01       	movw	r24, r10
    1882:	b4 01       	movw	r22, r8
    1884:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1888:	2a 85       	ldd	r18, Y+10	; 0x0a
    188a:	3b 85       	ldd	r19, Y+11	; 0x0b
    188c:	4c 85       	ldd	r20, Y+12	; 0x0c
    188e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1890:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1894:	4b 01       	movw	r8, r22
    1896:	5c 01       	movw	r10, r24
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	b7 01       	movw	r22, r14
    189e:	68 1b       	sub	r22, r24
    18a0:	79 0b       	sbc	r23, r25
    18a2:	07 2e       	mov	r0, r23
    18a4:	00 0c       	add	r0, r0
    18a6:	88 0b       	sbc	r24, r24
    18a8:	99 0b       	sbc	r25, r25
    18aa:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    18ae:	2d 8d       	ldd	r18, Y+29	; 0x1d
    18b0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    18b2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    18b4:	58 a1       	ldd	r21, Y+32	; 0x20
    18b6:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    18ba:	9b 01       	movw	r18, r22
    18bc:	ac 01       	movw	r20, r24
    18be:	c5 01       	movw	r24, r10
    18c0:	b4 01       	movw	r22, r8
    18c2:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__subsf3>
    18c6:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    18ca:	7f 83       	std	Y+7, r23	; 0x07
    18cc:	6e 83       	std	Y+6, r22	; 0x06
    18ce:	e6 e0       	ldi	r30, 0x06	; 6
    18d0:	f3 e0       	ldi	r31, 0x03	; 3
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	95 83       	std	Z+5, r25	; 0x05
    18d8:	84 83       	std	Z+4, r24	; 0x04
    18da:	86 81       	ldd	r24, Z+6	; 0x06
    18dc:	97 81       	ldd	r25, Z+7	; 0x07
    18de:	9c 01       	movw	r18, r24
    18e0:	99 23       	and	r25, r25
    18e2:	24 f4       	brge	.+8      	; 0x18ec <_Z32Calculate_Front_LinetrackerY_Pidv+0x19a>
    18e4:	22 27       	eor	r18, r18
    18e6:	33 27       	eor	r19, r19
    18e8:	28 1b       	sub	r18, r24
    18ea:	39 0b       	sbc	r19, r25
    18ec:	21 35       	cpi	r18, 0x51	; 81
    18ee:	31 05       	cpc	r19, r1
    18f0:	84 f0       	brlt	.+32     	; 0x1912 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    18f2:	18 16       	cp	r1, r24
    18f4:	19 06       	cpc	r1, r25
    18f6:	3c f4       	brge	.+14     	; 0x1906 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1b4>
    18f8:	80 e5       	ldi	r24, 0x50	; 80
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <FrontLinetrackerY_+0x7>
    1900:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <FrontLinetrackerY_+0x6>
    1904:	06 c0       	rjmp	.+12     	; 0x1912 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1c0>
    1906:	80 eb       	ldi	r24, 0xB0	; 176
    1908:	9f ef       	ldi	r25, 0xFF	; 255
    190a:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <FrontLinetrackerY_+0x7>
    190e:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <FrontLinetrackerY_+0x6>
    1912:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <PidUpdateFlagLinetrackerFront>
    1916:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    191a:	81 11       	cpse	r24, r1
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <_Z32Calculate_Front_LinetrackerY_Pidv+0x1d4>
    191e:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <FrontLinetrackerY_+0x7>
    1922:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <FrontLinetrackerY_+0x6>
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	bf 90       	pop	r11
    1934:	af 90       	pop	r10
    1936:	9f 90       	pop	r9
    1938:	8f 90       	pop	r8
    193a:	7f 90       	pop	r7
    193c:	6f 90       	pop	r6
    193e:	5f 90       	pop	r5
    1940:	4f 90       	pop	r4
    1942:	08 95       	ret

00001944 <_Z31Calculate_Back_LinetrackerY_Pidv>:
    1944:	4f 92       	push	r4
    1946:	5f 92       	push	r5
    1948:	6f 92       	push	r6
    194a:	7f 92       	push	r7
    194c:	8f 92       	push	r8
    194e:	9f 92       	push	r9
    1950:	af 92       	push	r10
    1952:	bf 92       	push	r11
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <BackLinetrackerY_+0x10>
    1964:	88 23       	and	r24, r24
    1966:	51 f0       	breq	.+20     	; 0x197c <_Z31Calculate_Back_LinetrackerY_Pidv+0x38>
    1968:	14 de       	rcall	.-984    	; 0x1592 <_Z26Get_Back_LinetrackerY_Datav>
    196a:	88 23       	and	r24, r24
    196c:	39 f0       	breq	.+14     	; 0x197c <_Z31Calculate_Back_LinetrackerY_Pidv+0x38>
    196e:	11 de       	rcall	.-990    	; 0x1592 <_Z26Get_Back_LinetrackerY_Datav>
    1970:	e5 ee       	ldi	r30, 0xE5	; 229
    1972:	f2 e0       	ldi	r31, 0x02	; 2
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	95 83       	std	Z+5, r25	; 0x05
    1978:	84 83       	std	Z+4, r24	; 0x04
    197a:	10 8a       	std	Z+16, r1	; 0x10
    197c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1980:	88 23       	and	r24, r24
    1982:	09 f4       	brne	.+2      	; 0x1986 <_Z31Calculate_Back_LinetrackerY_Pidv+0x42>
    1984:	c0 c0       	rjmp	.+384    	; 0x1b06 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1c2>
    1986:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    198a:	88 23       	and	r24, r24
    198c:	09 f4       	brne	.+2      	; 0x1990 <_Z31Calculate_Back_LinetrackerY_Pidv+0x4c>
    198e:	bf c0       	rjmp	.+382    	; 0x1b0e <_Z31Calculate_Back_LinetrackerY_Pidv+0x1ca>
    1990:	00 de       	rcall	.-1024   	; 0x1592 <_Z26Get_Back_LinetrackerY_Datav>
    1992:	e8 2e       	mov	r14, r24
    1994:	f1 2c       	mov	r15, r1
    1996:	c5 ee       	ldi	r28, 0xE5	; 229
    1998:	d2 e0       	ldi	r29, 0x02	; 2
    199a:	f9 82       	std	Y+1, r15	; 0x01
    199c:	e8 82       	st	Y, r14
    199e:	0e 85       	ldd	r16, Y+14	; 0x0e
    19a0:	1f 85       	ldd	r17, Y+15	; 0x0f
    19a2:	0e 19       	sub	r16, r14
    19a4:	1f 09       	sbc	r17, r15
    19a6:	1b 83       	std	Y+3, r17	; 0x03
    19a8:	0a 83       	std	Y+2, r16	; 0x02
    19aa:	b8 01       	movw	r22, r16
    19ac:	01 2e       	mov	r0, r17
    19ae:	00 0c       	add	r0, r0
    19b0:	88 0b       	sbc	r24, r24
    19b2:	99 0b       	sbc	r25, r25
    19b4:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    19b8:	4b 01       	movw	r8, r22
    19ba:	5c 01       	movw	r10, r24
    19bc:	29 8d       	ldd	r18, Y+25	; 0x19
    19be:	3a 8d       	ldd	r19, Y+26	; 0x1a
    19c0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    19c2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    19c4:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    19c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    19ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    19cc:	4c 85       	ldd	r20, Y+12	; 0x0c
    19ce:	5d 85       	ldd	r21, Y+13	; 0x0d
    19d0:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    19d4:	2b 01       	movw	r4, r22
    19d6:	3c 01       	movw	r6, r24
    19d8:	6a 87       	std	Y+10, r22	; 0x0a
    19da:	7b 87       	std	Y+11, r23	; 0x0b
    19dc:	8c 87       	std	Y+12, r24	; 0x0c
    19de:	9d 87       	std	Y+13, r25	; 0x0d
    19e0:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    19e4:	9b 01       	movw	r18, r22
    19e6:	77 23       	and	r23, r23
    19e8:	24 f4       	brge	.+8      	; 0x19f2 <_Z31Calculate_Back_LinetrackerY_Pidv+0xae>
    19ea:	22 27       	eor	r18, r18
    19ec:	33 27       	eor	r19, r19
    19ee:	26 1b       	sub	r18, r22
    19f0:	37 0b       	sbc	r19, r23
    19f2:	26 30       	cpi	r18, 0x06	; 6
    19f4:	31 05       	cpc	r19, r1
    19f6:	5c f1       	brlt	.+86     	; 0x1a4e <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	a9 01       	movw	r20, r18
    19fe:	c3 01       	movw	r24, r6
    1a00:	b2 01       	movw	r22, r4
    1a02:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__gesf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	6c f4       	brge	.+26     	; 0x1a24 <_Z31Calculate_Back_LinetrackerY_Pidv+0xe0>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a0 ea       	ldi	r26, 0xA0	; 160
    1a10:	b0 e4       	ldi	r27, 0x40	; 64
    1a12:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <BackLinetrackerY_+0xa>
    1a16:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <BackLinetrackerY_+0xb>
    1a1a:	a0 93 f1 02 	sts	0x02F1, r26	; 0x8002f1 <BackLinetrackerY_+0xc>
    1a1e:	b0 93 f2 02 	sts	0x02F2, r27	; 0x8002f2 <BackLinetrackerY_+0xd>
    1a22:	15 c0       	rjmp	.+42     	; 0x1a4e <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	a9 01       	movw	r20, r18
    1a2a:	c3 01       	movw	r24, r6
    1a2c:	b2 01       	movw	r22, r4
    1a2e:	0e 94 38 20 	call	0x4070	; 0x4070 <__cmpsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	64 f4       	brge	.+24     	; 0x1a4e <_Z31Calculate_Back_LinetrackerY_Pidv+0x10a>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a3c:	b0 ec       	ldi	r27, 0xC0	; 192
    1a3e:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <BackLinetrackerY_+0xa>
    1a42:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <BackLinetrackerY_+0xb>
    1a46:	a0 93 f1 02 	sts	0x02F1, r26	; 0x8002f1 <BackLinetrackerY_+0xc>
    1a4a:	b0 93 f2 02 	sts	0x02F2, r27	; 0x8002f2 <BackLinetrackerY_+0xd>
    1a4e:	01 2b       	or	r16, r17
    1a50:	49 f4       	brne	.+18     	; 0x1a64 <_Z31Calculate_Back_LinetrackerY_Pidv+0x120>
    1a52:	e5 ee       	ldi	r30, 0xE5	; 229
    1a54:	f2 e0       	ldi	r31, 0x02	; 2
    1a56:	12 86       	std	Z+10, r1	; 0x0a
    1a58:	13 86       	std	Z+11, r1	; 0x0b
    1a5a:	14 86       	std	Z+12, r1	; 0x0c
    1a5c:	15 86       	std	Z+13, r1	; 0x0d
    1a5e:	17 82       	std	Z+7, r1	; 0x07
    1a60:	16 82       	std	Z+6, r1	; 0x06
    1a62:	2d c0       	rjmp	.+90     	; 0x1abe <_Z31Calculate_Back_LinetrackerY_Pidv+0x17a>
    1a64:	c5 ee       	ldi	r28, 0xE5	; 229
    1a66:	d2 e0       	ldi	r29, 0x02	; 2
    1a68:	2d 89       	ldd	r18, Y+21	; 0x15
    1a6a:	3e 89       	ldd	r19, Y+22	; 0x16
    1a6c:	4f 89       	ldd	r20, Y+23	; 0x17
    1a6e:	58 8d       	ldd	r21, Y+24	; 0x18
    1a70:	c5 01       	movw	r24, r10
    1a72:	b4 01       	movw	r22, r8
    1a74:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1a78:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a7a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a7c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a7e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a80:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1a84:	4b 01       	movw	r8, r22
    1a86:	5c 01       	movw	r10, r24
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8c:	b7 01       	movw	r22, r14
    1a8e:	68 1b       	sub	r22, r24
    1a90:	79 0b       	sbc	r23, r25
    1a92:	07 2e       	mov	r0, r23
    1a94:	00 0c       	add	r0, r0
    1a96:	88 0b       	sbc	r24, r24
    1a98:	99 0b       	sbc	r25, r25
    1a9a:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1a9e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1aa0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1aa2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1aa4:	58 a1       	ldd	r21, Y+32	; 0x20
    1aa6:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1aaa:	9b 01       	movw	r18, r22
    1aac:	ac 01       	movw	r20, r24
    1aae:	c5 01       	movw	r24, r10
    1ab0:	b4 01       	movw	r22, r8
    1ab2:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__subsf3>
    1ab6:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1aba:	7f 83       	std	Y+7, r23	; 0x07
    1abc:	6e 83       	std	Y+6, r22	; 0x06
    1abe:	e5 ee       	ldi	r30, 0xE5	; 229
    1ac0:	f2 e0       	ldi	r31, 0x02	; 2
    1ac2:	80 81       	ld	r24, Z
    1ac4:	91 81       	ldd	r25, Z+1	; 0x01
    1ac6:	95 83       	std	Z+5, r25	; 0x05
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	86 81       	ldd	r24, Z+6	; 0x06
    1acc:	97 81       	ldd	r25, Z+7	; 0x07
    1ace:	9c 01       	movw	r18, r24
    1ad0:	99 23       	and	r25, r25
    1ad2:	24 f4       	brge	.+8      	; 0x1adc <_Z31Calculate_Back_LinetrackerY_Pidv+0x198>
    1ad4:	22 27       	eor	r18, r18
    1ad6:	33 27       	eor	r19, r19
    1ad8:	28 1b       	sub	r18, r24
    1ada:	39 0b       	sbc	r19, r25
    1adc:	21 35       	cpi	r18, 0x51	; 81
    1ade:	31 05       	cpc	r19, r1
    1ae0:	84 f0       	brlt	.+32     	; 0x1b02 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1be>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	19 06       	cpc	r1, r25
    1ae6:	3c f4       	brge	.+14     	; 0x1af6 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1b2>
    1ae8:	80 e5       	ldi	r24, 0x50	; 80
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <BackLinetrackerY_+0x7>
    1af0:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <BackLinetrackerY_+0x6>
    1af4:	06 c0       	rjmp	.+12     	; 0x1b02 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1be>
    1af6:	80 eb       	ldi	r24, 0xB0	; 176
    1af8:	9f ef       	ldi	r25, 0xFF	; 255
    1afa:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <BackLinetrackerY_+0x7>
    1afe:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <BackLinetrackerY_+0x6>
    1b02:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <PidUpdateFlagLinetrackerBack>
    1b06:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <linetrackerPID>
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <_Z31Calculate_Back_LinetrackerY_Pidv+0x1d2>
    1b0e:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <BackLinetrackerY_+0x7>
    1b12:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <BackLinetrackerY_+0x6>
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	1f 91       	pop	r17
    1b1c:	0f 91       	pop	r16
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	bf 90       	pop	r11
    1b24:	af 90       	pop	r10
    1b26:	9f 90       	pop	r9
    1b28:	8f 90       	pop	r8
    1b2a:	7f 90       	pop	r7
    1b2c:	6f 90       	pop	r6
    1b2e:	5f 90       	pop	r5
    1b30:	4f 90       	pop	r4
    1b32:	08 95       	ret

00001b34 <_Z18Calculate_Velocityv>:
    1b34:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <_axis>
    1b38:	81 11       	cpse	r24, r1
    1b3a:	08 c0       	rjmp	.+16     	; 0x1b4c <_Z18Calculate_Velocityv+0x18>
    1b3c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	71 f0       	breq	.+28     	; 0x1b60 <_Z18Calculate_Velocityv+0x2c>
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	71 f4       	brne	.+28     	; 0x1b64 <_Z18Calculate_Velocityv+0x30>
    1b48:	a1 e0       	ldi	r26, 0x01	; 1
    1b4a:	13 c0       	rjmp	.+38     	; 0x1b72 <_Z18Calculate_Velocityv+0x3e>
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	61 f4       	brne	.+24     	; 0x1b68 <_Z18Calculate_Velocityv+0x34>
    1b50:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1b54:	82 30       	cpi	r24, 0x02	; 2
    1b56:	51 f0       	breq	.+20     	; 0x1b6c <_Z18Calculate_Velocityv+0x38>
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	51 f4       	brne	.+20     	; 0x1b70 <_Z18Calculate_Velocityv+0x3c>
    1b5c:	a3 e0       	ldi	r26, 0x03	; 3
    1b5e:	09 c0       	rjmp	.+18     	; 0x1b72 <_Z18Calculate_Velocityv+0x3e>
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <_Z18Calculate_Velocityv+0x3e>
    1b64:	a4 e0       	ldi	r26, 0x04	; 4
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <_Z18Calculate_Velocityv+0x3e>
    1b68:	a4 e0       	ldi	r26, 0x04	; 4
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <_Z18Calculate_Velocityv+0x3e>
    1b6c:	a2 e0       	ldi	r26, 0x02	; 2
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <_Z18Calculate_Velocityv+0x3e>
    1b70:	a4 e0       	ldi	r26, 0x04	; 4
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	aa 0f       	add	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	aa 0f       	add	r26, r26
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	a3 5f       	subi	r26, 0xF3	; 243
    1b7e:	bd 4f       	sbci	r27, 0xFD	; 253
    1b80:	eb ef       	ldi	r30, 0xFB	; 251
    1b82:	f3 e0       	ldi	r31, 0x03	; 3
    1b84:	63 e0       	ldi	r22, 0x03	; 3
    1b86:	74 e0       	ldi	r23, 0x04	; 4
    1b88:	4d 91       	ld	r20, X+
    1b8a:	20 81       	ld	r18, Z
    1b8c:	31 81       	ldd	r19, Z+1	; 0x01
    1b8e:	42 03       	mulsu	r20, r18
    1b90:	c0 01       	movw	r24, r0
    1b92:	43 9f       	mul	r20, r19
    1b94:	90 0d       	add	r25, r0
    1b96:	11 24       	eor	r1, r1
    1b98:	81 93       	st	Z+, r24
    1b9a:	91 93       	st	Z+, r25
    1b9c:	e6 17       	cp	r30, r22
    1b9e:	f7 07       	cpc	r31, r23
    1ba0:	99 f7       	brne	.-26     	; 0x1b88 <_Z18Calculate_Velocityv+0x54>
    1ba2:	08 95       	ret

00001ba4 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>:
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	ec 01       	movw	r28, r24
    1baa:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <inverseKinematicsTrue>
    1bae:	d1 dd       	rcall	.-1118   	; 0x1752 <_Z32Calculate_Front_LinetrackerY_Pidv>
    1bb0:	c9 de       	rcall	.-622    	; 0x1944 <_Z31Calculate_Back_LinetrackerY_Pidv>
    1bb2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_direction>
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	f1 f4       	brne	.+60     	; 0x1bf6 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x52>
    1bba:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <FrontLinetrackerY_+0x6>
    1bbe:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <FrontLinetrackerY_+0x7>
    1bc2:	eb ef       	ldi	r30, 0xFB	; 251
    1bc4:	f3 e0       	ldi	r31, 0x03	; 3
    1bc6:	9c 01       	movw	r18, r24
    1bc8:	2c 0f       	add	r18, r28
    1bca:	3d 1f       	adc	r19, r29
    1bcc:	31 83       	std	Z+1, r19	; 0x01
    1bce:	20 83       	st	Z, r18
    1bd0:	9e 01       	movw	r18, r28
    1bd2:	28 1b       	sub	r18, r24
    1bd4:	39 0b       	sbc	r19, r25
    1bd6:	33 83       	std	Z+3, r19	; 0x03
    1bd8:	22 83       	std	Z+2, r18	; 0x02
    1bda:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <BackLinetrackerY_+0x6>
    1bde:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <BackLinetrackerY_+0x7>
    1be2:	9e 01       	movw	r18, r28
    1be4:	28 0f       	add	r18, r24
    1be6:	39 1f       	adc	r19, r25
    1be8:	35 83       	std	Z+5, r19	; 0x05
    1bea:	24 83       	std	Z+4, r18	; 0x04
    1bec:	c8 1b       	sub	r28, r24
    1bee:	d9 0b       	sbc	r29, r25
    1bf0:	d7 83       	std	Z+7, r29	; 0x07
    1bf2:	c6 83       	std	Z+6, r28	; 0x06
    1bf4:	1c c0       	rjmp	.+56     	; 0x1c2e <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti+0x8a>
    1bf6:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <FrontLinetrackerY_+0x6>
    1bfa:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <FrontLinetrackerY_+0x7>
    1bfe:	eb ef       	ldi	r30, 0xFB	; 251
    1c00:	f3 e0       	ldi	r31, 0x03	; 3
    1c02:	9e 01       	movw	r18, r28
    1c04:	28 1b       	sub	r18, r24
    1c06:	39 0b       	sbc	r19, r25
    1c08:	31 83       	std	Z+1, r19	; 0x01
    1c0a:	20 83       	st	Z, r18
    1c0c:	8c 0f       	add	r24, r28
    1c0e:	9d 1f       	adc	r25, r29
    1c10:	93 83       	std	Z+3, r25	; 0x03
    1c12:	82 83       	std	Z+2, r24	; 0x02
    1c14:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <BackLinetrackerY_+0x6>
    1c18:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <BackLinetrackerY_+0x7>
    1c1c:	9e 01       	movw	r18, r28
    1c1e:	28 1b       	sub	r18, r24
    1c20:	39 0b       	sbc	r19, r25
    1c22:	35 83       	std	Z+5, r19	; 0x05
    1c24:	24 83       	std	Z+4, r18	; 0x04
    1c26:	c8 0f       	add	r28, r24
    1c28:	d9 1f       	adc	r29, r25
    1c2a:	d7 83       	std	Z+7, r29	; 0x07
    1c2c:	c6 83       	std	Z+6, r28	; 0x06
    1c2e:	82 df       	rcall	.-252    	; 0x1b34 <_Z18Calculate_Velocityv>
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <_Z10Move_Yaxisiij>:
    1c36:	2f 92       	push	r2
    1c38:	3f 92       	push	r3
    1c3a:	4f 92       	push	r4
    1c3c:	5f 92       	push	r5
    1c3e:	6f 92       	push	r6
    1c40:	7f 92       	push	r7
    1c42:	8f 92       	push	r8
    1c44:	9f 92       	push	r9
    1c46:	af 92       	push	r10
    1c48:	bf 92       	push	r11
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	1c 01       	movw	r2, r24
    1c5c:	8b 01       	movw	r16, r22
    1c5e:	7a 01       	movw	r14, r20
    1c60:	e6 e0       	ldi	r30, 0x06	; 6
    1c62:	f3 e0       	ldi	r31, 0x03	; 3
    1c64:	8a e9       	ldi	r24, 0x9A	; 154
    1c66:	99 e9       	ldi	r25, 0x99	; 153
    1c68:	a9 e9       	ldi	r26, 0x99	; 153
    1c6a:	bf e3       	ldi	r27, 0x3F	; 63
    1c6c:	85 8b       	std	Z+21, r24	; 0x15
    1c6e:	96 8b       	std	Z+22, r25	; 0x16
    1c70:	a7 8b       	std	Z+23, r26	; 0x17
    1c72:	b0 8f       	std	Z+24, r27	; 0x18
    1c74:	11 8e       	std	Z+25, r1	; 0x19
    1c76:	12 8e       	std	Z+26, r1	; 0x1a
    1c78:	13 8e       	std	Z+27, r1	; 0x1b
    1c7a:	14 8e       	std	Z+28, r1	; 0x1c
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	b1 e4       	ldi	r27, 0x41	; 65
    1c84:	85 8f       	std	Z+29, r24	; 0x1d
    1c86:	96 8f       	std	Z+30, r25	; 0x1e
    1c88:	a7 8f       	std	Z+31, r26	; 0x1f
    1c8a:	b0 a3       	std	Z+32, r27	; 0x20
    1c8c:	8e eb       	ldi	r24, 0xBE	; 190
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1c94:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1c98:	9b 01       	movw	r18, r22
    1c9a:	77 23       	and	r23, r23
    1c9c:	24 f4       	brge	.+8      	; 0x1ca6 <_Z10Move_Yaxisiij+0x70>
    1c9e:	22 27       	eor	r18, r18
    1ca0:	33 27       	eor	r19, r19
    1ca2:	26 1b       	sub	r18, r22
    1ca4:	37 0b       	sbc	r19, r23
    1ca6:	e9 01       	movw	r28, r18
    1ca8:	30 93 f2 03 	sts	0x03F2, r19	; 0x8003f2 <distanceY+0x1>
    1cac:	20 93 f1 03 	sts	0x03F1, r18	; 0x8003f1 <distanceY>
    1cb0:	30 92 3a 03 	sts	0x033A, r3	; 0x80033a <driveY+0xf>
    1cb4:	20 92 39 03 	sts	0x0339, r2	; 0x800339 <driveY+0xe>
    1cb8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PidUpdateFlagDriveY>
    1cbc:	88 23       	and	r24, r24
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <_Z10Move_Yaxisiij+0x8c>
    1cc0:	0a c1       	rjmp	.+532    	; 0x1ed6 <_Z10Move_Yaxisiij+0x2a0>
    1cc2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PidUpdateFlagDriveY>
    1cc6:	28 35       	cpi	r18, 0x58	; 88
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	38 07       	cpc	r19, r24
    1ccc:	0c f4       	brge	.+2      	; 0x1cd0 <_Z10Move_Yaxisiij+0x9a>
    1cce:	ad c0       	rjmp	.+346    	; 0x1e2a <_Z10Move_Yaxisiij+0x1f4>
    1cd0:	0f 2e       	mov	r0, r31
    1cd2:	fb e2       	ldi	r31, 0x2B	; 43
    1cd4:	cf 2e       	mov	r12, r31
    1cd6:	f3 e0       	ldi	r31, 0x03	; 3
    1cd8:	df 2e       	mov	r13, r31
    1cda:	f0 2d       	mov	r31, r0
    1cdc:	f6 01       	movw	r30, r12
    1cde:	31 83       	std	Z+1, r19	; 0x01
    1ce0:	20 83       	st	Z, r18
    1ce2:	22 1a       	sub	r2, r18
    1ce4:	33 0a       	sbc	r3, r19
    1ce6:	33 82       	std	Z+3, r3	; 0x03
    1ce8:	22 82       	std	Z+2, r2	; 0x02
    1cea:	b1 01       	movw	r22, r2
    1cec:	03 2c       	mov	r0, r3
    1cee:	00 0c       	add	r0, r0
    1cf0:	88 0b       	sbc	r24, r24
    1cf2:	99 0b       	sbc	r25, r25
    1cf4:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1cf8:	2b 01       	movw	r4, r22
    1cfa:	3c 01       	movw	r6, r24
    1cfc:	f6 01       	movw	r30, r12
    1cfe:	21 8d       	ldd	r18, Z+25	; 0x19
    1d00:	32 8d       	ldd	r19, Z+26	; 0x1a
    1d02:	43 8d       	ldd	r20, Z+27	; 0x1b
    1d04:	54 8d       	ldd	r21, Z+28	; 0x1c
    1d06:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1d0a:	f6 01       	movw	r30, r12
    1d0c:	22 85       	ldd	r18, Z+10	; 0x0a
    1d0e:	33 85       	ldd	r19, Z+11	; 0x0b
    1d10:	44 85       	ldd	r20, Z+12	; 0x0c
    1d12:	55 85       	ldd	r21, Z+13	; 0x0d
    1d14:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1d18:	4b 01       	movw	r8, r22
    1d1a:	5c 01       	movw	r10, r24
    1d1c:	f6 01       	movw	r30, r12
    1d1e:	62 87       	std	Z+10, r22	; 0x0a
    1d20:	73 87       	std	Z+11, r23	; 0x0b
    1d22:	84 87       	std	Z+12, r24	; 0x0c
    1d24:	95 87       	std	Z+13, r25	; 0x0d
    1d26:	80 89       	ldd	r24, Z+16	; 0x10
    1d28:	88 23       	and	r24, r24
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <_Z10Move_Yaxisiij+0xfc>
    1d2c:	d5 83       	std	Z+5, r29	; 0x05
    1d2e:	c4 83       	std	Z+4, r28	; 0x04
    1d30:	10 8a       	std	Z+16, r1	; 0x10
    1d32:	c5 01       	movw	r24, r10
    1d34:	b4 01       	movw	r22, r8
    1d36:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	77 23       	and	r23, r23
    1d3e:	24 f4       	brge	.+8      	; 0x1d48 <_Z10Move_Yaxisiij+0x112>
    1d40:	22 27       	eor	r18, r18
    1d42:	33 27       	eor	r19, r19
    1d44:	26 1b       	sub	r18, r22
    1d46:	37 0b       	sbc	r19, r23
    1d48:	2b 30       	cpi	r18, 0x0B	; 11
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	5c f1       	brlt	.+86     	; 0x1da4 <_Z10Move_Yaxisiij+0x16e>
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	a9 01       	movw	r20, r18
    1d54:	c5 01       	movw	r24, r10
    1d56:	b4 01       	movw	r22, r8
    1d58:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <__gesf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	6c f4       	brge	.+26     	; 0x1d7a <_Z10Move_Yaxisiij+0x144>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e2       	ldi	r26, 0x20	; 32
    1d66:	b1 e4       	ldi	r27, 0x41	; 65
    1d68:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <driveY+0xa>
    1d6c:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <driveY+0xb>
    1d70:	a0 93 37 03 	sts	0x0337, r26	; 0x800337 <driveY+0xc>
    1d74:	b0 93 38 03 	sts	0x0338, r27	; 0x800338 <driveY+0xd>
    1d78:	15 c0       	rjmp	.+42     	; 0x1da4 <_Z10Move_Yaxisiij+0x16e>
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	a9 01       	movw	r20, r18
    1d80:	c5 01       	movw	r24, r10
    1d82:	b4 01       	movw	r22, r8
    1d84:	0e 94 38 20 	call	0x4070	; 0x4070 <__cmpsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	64 f4       	brge	.+24     	; 0x1da4 <_Z10Move_Yaxisiij+0x16e>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e2       	ldi	r26, 0x20	; 32
    1d92:	b1 ec       	ldi	r27, 0xC1	; 193
    1d94:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <driveY+0xa>
    1d98:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <driveY+0xb>
    1d9c:	a0 93 37 03 	sts	0x0337, r26	; 0x800337 <driveY+0xc>
    1da0:	b0 93 38 03 	sts	0x0338, r27	; 0x800338 <driveY+0xd>
    1da4:	12 14       	cp	r1, r2
    1da6:	13 04       	cpc	r1, r3
    1da8:	bc f5       	brge	.+110    	; 0x1e18 <_Z10Move_Yaxisiij+0x1e2>
    1daa:	0f 2e       	mov	r0, r31
    1dac:	fb e2       	ldi	r31, 0x2B	; 43
    1dae:	cf 2e       	mov	r12, r31
    1db0:	f3 e0       	ldi	r31, 0x03	; 3
    1db2:	df 2e       	mov	r13, r31
    1db4:	f0 2d       	mov	r31, r0
    1db6:	f6 01       	movw	r30, r12
    1db8:	25 89       	ldd	r18, Z+21	; 0x15
    1dba:	36 89       	ldd	r19, Z+22	; 0x16
    1dbc:	47 89       	ldd	r20, Z+23	; 0x17
    1dbe:	50 8d       	ldd	r21, Z+24	; 0x18
    1dc0:	c3 01       	movw	r24, r6
    1dc2:	b2 01       	movw	r22, r4
    1dc4:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1dc8:	f6 01       	movw	r30, r12
    1dca:	22 85       	ldd	r18, Z+10	; 0x0a
    1dcc:	33 85       	ldd	r19, Z+11	; 0x0b
    1dce:	44 85       	ldd	r20, Z+12	; 0x0c
    1dd0:	55 85       	ldd	r21, Z+13	; 0x0d
    1dd2:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1dd6:	4b 01       	movw	r8, r22
    1dd8:	5c 01       	movw	r10, r24
    1dda:	f6 01       	movw	r30, r12
    1ddc:	84 81       	ldd	r24, Z+4	; 0x04
    1dde:	95 81       	ldd	r25, Z+5	; 0x05
    1de0:	be 01       	movw	r22, r28
    1de2:	68 1b       	sub	r22, r24
    1de4:	79 0b       	sbc	r23, r25
    1de6:	07 2e       	mov	r0, r23
    1de8:	00 0c       	add	r0, r0
    1dea:	88 0b       	sbc	r24, r24
    1dec:	99 0b       	sbc	r25, r25
    1dee:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1df2:	f6 01       	movw	r30, r12
    1df4:	25 8d       	ldd	r18, Z+29	; 0x1d
    1df6:	36 8d       	ldd	r19, Z+30	; 0x1e
    1df8:	47 8d       	ldd	r20, Z+31	; 0x1f
    1dfa:	50 a1       	ldd	r21, Z+32	; 0x20
    1dfc:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	c5 01       	movw	r24, r10
    1e06:	b4 01       	movw	r22, r8
    1e08:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__subsf3>
    1e0c:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1e10:	f6 01       	movw	r30, r12
    1e12:	77 83       	std	Z+7, r23	; 0x07
    1e14:	66 83       	std	Z+6, r22	; 0x06
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <_Z10Move_Yaxisiij+0x1ea>
    1e18:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <driveY+0x7>
    1e1c:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <driveY+0x6>
    1e20:	d0 93 30 03 	sts	0x0330, r29	; 0x800330 <driveY+0x5>
    1e24:	c0 93 2f 03 	sts	0x032F, r28	; 0x80032f <driveY+0x4>
    1e28:	18 c0       	rjmp	.+48     	; 0x1e5a <_Z10Move_Yaxisiij+0x224>
    1e2a:	b9 01       	movw	r22, r18
    1e2c:	33 0f       	add	r19, r19
    1e2e:	88 0b       	sbc	r24, r24
    1e30:	99 0b       	sbc	r25, r25
    1e32:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1e36:	2a e9       	ldi	r18, 0x9A	; 154
    1e38:	39 e9       	ldi	r19, 0x99	; 153
    1e3a:	49 e1       	ldi	r20, 0x19	; 25
    1e3c:	5e e3       	ldi	r21, 0x3E	; 62
    1e3e:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e7       	ldi	r20, 0x70	; 112
    1e48:	52 e4       	ldi	r21, 0x42	; 66
    1e4a:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <__addsf3>
    1e4e:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1e52:	70 93 32 03 	sts	0x0332, r23	; 0x800332 <driveY+0x7>
    1e56:	60 93 31 03 	sts	0x0331, r22	; 0x800331 <driveY+0x6>
    1e5a:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <driveY+0x6>
    1e5e:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <driveY+0x7>
    1e62:	99 23       	and	r25, r25
    1e64:	1c f4       	brge	.+6      	; 0x1e6c <_Z10Move_Yaxisiij+0x236>
    1e66:	91 95       	neg	r25
    1e68:	81 95       	neg	r24
    1e6a:	91 09       	sbc	r25, r1
    1e6c:	8e 15       	cp	r24, r14
    1e6e:	9f 05       	cpc	r25, r15
    1e70:	20 f0       	brcs	.+8      	; 0x1e7a <_Z10Move_Yaxisiij+0x244>
    1e72:	f0 92 32 03 	sts	0x0332, r15	; 0x800332 <driveY+0x7>
    1e76:	e0 92 31 03 	sts	0x0331, r14	; 0x800331 <driveY+0x6>
    1e7a:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <driveY+0x6>
    1e7e:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <driveY+0x7>
    1e82:	43 96       	adiw	r24, 0x13	; 19
    1e84:	87 97       	sbiw	r24, 0x27	; 39
    1e86:	30 f4       	brcc	.+12     	; 0x1e94 <_Z10Move_Yaxisiij+0x25e>
    1e88:	84 e1       	ldi	r24, 0x14	; 20
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <driveY+0x7>
    1e90:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <driveY+0x6>
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
    1e9a:	02 30       	cpi	r16, 0x02	; 2
    1e9c:	11 05       	cpc	r17, r1
    1e9e:	61 f4       	brne	.+24     	; 0x1eb8 <_Z10Move_Yaxisiij+0x282>
    1ea0:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <movingyfront>
    1ea4:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <movingyback>
    1ea8:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <movingxfront>
    1eac:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <movingxback>
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <_Z10Move_Yaxisiij+0x2a0>
    1eb8:	03 30       	cpi	r16, 0x03	; 3
    1eba:	11 05       	cpc	r17, r1
    1ebc:	61 f4       	brne	.+24     	; 0x1ed6 <_Z10Move_Yaxisiij+0x2a0>
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <movingyback>
    1ec4:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <movingyfront>
    1ec8:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <movingxfront>
    1ecc:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <movingxback>
    1ed0:	83 e0       	ldi	r24, 0x03	; 3
    1ed2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    1ed6:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <driveY+0x6>
    1eda:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <driveY+0x7>
    1ede:	62 de       	rcall	.-828    	; 0x1ba4 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	df 90       	pop	r13
    1eee:	cf 90       	pop	r12
    1ef0:	bf 90       	pop	r11
    1ef2:	af 90       	pop	r10
    1ef4:	9f 90       	pop	r9
    1ef6:	8f 90       	pop	r8
    1ef8:	7f 90       	pop	r7
    1efa:	6f 90       	pop	r6
    1efc:	5f 90       	pop	r5
    1efe:	4f 90       	pop	r4
    1f00:	3f 90       	pop	r3
    1f02:	2f 90       	pop	r2
    1f04:	08 95       	ret

00001f06 <_Z15Move_Yaxis_Slowjhh>:
    1f06:	8f 92       	push	r8
    1f08:	9f 92       	push	r9
    1f0a:	af 92       	push	r10
    1f0c:	bf 92       	push	r11
    1f0e:	cf 92       	push	r12
    1f10:	df 92       	push	r13
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	d6 2f       	mov	r29, r22
    1f20:	c4 2f       	mov	r28, r20
    1f22:	e6 e0       	ldi	r30, 0x06	; 6
    1f24:	f3 e0       	ldi	r31, 0x03	; 3
    1f26:	0a e9       	ldi	r16, 0x9A	; 154
    1f28:	19 e9       	ldi	r17, 0x99	; 153
    1f2a:	29 e1       	ldi	r18, 0x19	; 25
    1f2c:	3f e3       	ldi	r19, 0x3F	; 63
    1f2e:	05 8b       	std	Z+21, r16	; 0x15
    1f30:	16 8b       	std	Z+22, r17	; 0x16
    1f32:	27 8b       	std	Z+23, r18	; 0x17
    1f34:	30 8f       	std	Z+24, r19	; 0x18
    1f36:	4a e0       	ldi	r20, 0x0A	; 10
    1f38:	57 ed       	ldi	r21, 0xD7	; 215
    1f3a:	63 ea       	ldi	r22, 0xA3	; 163
    1f3c:	7c e3       	ldi	r23, 0x3C	; 60
    1f3e:	41 8f       	std	Z+25, r20	; 0x19
    1f40:	52 8f       	std	Z+26, r21	; 0x1a
    1f42:	63 8f       	std	Z+27, r22	; 0x1b
    1f44:	74 8f       	std	Z+28, r23	; 0x1c
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e2       	ldi	r26, 0x20	; 32
    1f4c:	b1 e4       	ldi	r27, 0x41	; 65
    1f4e:	85 8f       	std	Z+29, r24	; 0x1d
    1f50:	96 8f       	std	Z+30, r25	; 0x1e
    1f52:	a7 8f       	std	Z+31, r26	; 0x1f
    1f54:	b0 a3       	std	Z+32, r27	; 0x20
    1f56:	e5 ee       	ldi	r30, 0xE5	; 229
    1f58:	f2 e0       	ldi	r31, 0x02	; 2
    1f5a:	05 8b       	std	Z+21, r16	; 0x15
    1f5c:	16 8b       	std	Z+22, r17	; 0x16
    1f5e:	27 8b       	std	Z+23, r18	; 0x17
    1f60:	30 8f       	std	Z+24, r19	; 0x18
    1f62:	41 8f       	std	Z+25, r20	; 0x19
    1f64:	52 8f       	std	Z+26, r21	; 0x1a
    1f66:	63 8f       	std	Z+27, r22	; 0x1b
    1f68:	74 8f       	std	Z+28, r23	; 0x1c
    1f6a:	85 8f       	std	Z+29, r24	; 0x1d
    1f6c:	96 8f       	std	Z+30, r25	; 0x1e
    1f6e:	a7 8f       	std	Z+31, r26	; 0x1f
    1f70:	b0 a3       	std	Z+32, r27	; 0x20
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
    1f78:	d2 30       	cpi	r29, 0x02	; 2
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <_Z15Move_Yaxis_Slowjhh+0x7e>
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    1f82:	05 c0       	rjmp	.+10     	; 0x1f8e <_Z15Move_Yaxis_Slowjhh+0x88>
    1f84:	d3 30       	cpi	r29, 0x03	; 3
    1f86:	19 f4       	brne	.+6      	; 0x1f8e <_Z15Move_Yaxis_Slowjhh+0x88>
    1f88:	83 e0       	ldi	r24, 0x03	; 3
    1f8a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
    1f8e:	8e eb       	ldi	r24, 0xBE	; 190
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
    1f96:	4b 01       	movw	r8, r22
    1f98:	5c 01       	movw	r10, r24
    1f9a:	6c 2f       	mov	r22, r28
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1fa6:	6b 01       	movw	r12, r22
    1fa8:	7c 01       	movw	r14, r24
    1faa:	c5 01       	movw	r24, r10
    1fac:	b4 01       	movw	r22, r8
    1fae:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1fb2:	9b 01       	movw	r18, r22
    1fb4:	77 23       	and	r23, r23
    1fb6:	24 f4       	brge	.+8      	; 0x1fc0 <_Z15Move_Yaxis_Slowjhh+0xba>
    1fb8:	22 27       	eor	r18, r18
    1fba:	33 27       	eor	r19, r19
    1fbc:	26 1b       	sub	r18, r22
    1fbe:	37 0b       	sbc	r19, r23
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	33 0f       	add	r19, r19
    1fc4:	88 0b       	sbc	r24, r24
    1fc6:	99 0b       	sbc	r25, r25
    1fc8:	0e 94 da 20 	call	0x41b4	; 0x41b4 <__floatsisf>
    1fcc:	2a e0       	ldi	r18, 0x0A	; 10
    1fce:	37 ed       	ldi	r19, 0xD7	; 215
    1fd0:	43 ea       	ldi	r20, 0xA3	; 163
    1fd2:	5c e3       	ldi	r21, 0x3C	; 60
    1fd4:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    1fd8:	9b 01       	movw	r18, r22
    1fda:	ac 01       	movw	r20, r24
    1fdc:	c7 01       	movw	r24, r14
    1fde:	b6 01       	movw	r22, r12
    1fe0:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__subsf3>
    1fe4:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    1fe8:	cb 01       	movw	r24, r22
    1fea:	dc dd       	rcall	.-1096   	; 0x1ba4 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	bf 90       	pop	r11
    1ffe:	af 90       	pop	r10
    2000:	9f 90       	pop	r9
    2002:	8f 90       	pop	r8
    2004:	08 95       	ret

00002006 <_Z13Hold_Positionv>:

void Hold_Position(void)
{
	_axis = Y_Axis;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_axis>
	_direction = Back;
    200c:	83 e0       	ldi	r24, 0x03	; 3
    200e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_direction>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2012:	e6 e0       	ldi	r30, 0x06	; 6
    2014:	f3 e0       	ldi	r31, 0x03	; 3
    2016:	46 e6       	ldi	r20, 0x66	; 102
    2018:	56 e6       	ldi	r21, 0x66	; 102
    201a:	66 ee       	ldi	r22, 0xE6	; 230
    201c:	7f e3       	ldi	r23, 0x3F	; 63
    201e:	45 8b       	std	Z+21, r20	; 0x15
    2020:	56 8b       	std	Z+22, r21	; 0x16
    2022:	67 8b       	std	Z+23, r22	; 0x17
    2024:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    2026:	11 8e       	std	Z+25, r1	; 0x19
    2028:	12 8e       	std	Z+26, r1	; 0x1a
    202a:	13 8e       	std	Z+27, r1	; 0x1b
    202c:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e8       	ldi	r26, 0x80	; 128
    2034:	b1 e4       	ldi	r27, 0x41	; 65
    2036:	85 8f       	std	Z+29, r24	; 0x1d
    2038:	96 8f       	std	Z+30, r25	; 0x1e
    203a:	a7 8f       	std	Z+31, r26	; 0x1f
    203c:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    203e:	e5 ee       	ldi	r30, 0xE5	; 229
    2040:	f2 e0       	ldi	r31, 0x02	; 2
    2042:	45 8b       	std	Z+21, r20	; 0x15
    2044:	56 8b       	std	Z+22, r21	; 0x16
    2046:	67 8b       	std	Z+23, r22	; 0x17
    2048:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
    204a:	11 8e       	std	Z+25, r1	; 0x19
    204c:	12 8e       	std	Z+26, r1	; 0x1a
    204e:	13 8e       	std	Z+27, r1	; 0x1b
    2050:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    2052:	85 8f       	std	Z+29, r24	; 0x1d
    2054:	96 8f       	std	Z+30, r25	; 0x1e
    2056:	a7 8f       	std	Z+31, r26	; 0x1f
    2058:	b0 a3       	std	Z+32, r27	; 0x20
	
	
 	FrontLinetrackerY_.setPid(1.8,0,16);
 	BackLinetrackerY_.setPid(1.8,0,16);
	
	Calculate_Motor_Differential_Velocity_With_Center_Pivot(0);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a2 cd       	rjmp	.-1212   	; 0x1ba4 <_Z55Calculate_Motor_Differential_Velocity_With_Center_Pivoti>
    2060:	08 95       	ret

00002062 <_Z14updateZoneflagv>:
//  		if(task8)	uart0_puts("8 \n");
//  		else        uart0_puts("0 \n");

}

void updateZoneflag(void){
    2062:	cf 93       	push	r28
	/*if low on shuttlecock pin then shuttlecock received
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
    2064:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <ShuttleCockGiven>
    2068:	81 11       	cpse	r24, r1
    206a:	b5 c0       	rjmp	.+362    	; 0x21d6 <_Z14updateZoneflagv+0x174>
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
    206c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2070:	86 fd       	sbrc	r24, 6
    2072:	6d c0       	rjmp	.+218    	; 0x214e <_Z14updateZoneflagv+0xec>
    2074:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2078:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    207c:	05 97       	sbiw	r24, 0x05	; 5
    207e:	09 f0       	breq	.+2      	; 0x2082 <_Z14updateZoneflagv+0x20>
    2080:	66 c0       	rjmp	.+204    	; 0x214e <_Z14updateZoneflagv+0xec>
    2082:	54 c0       	rjmp	.+168    	; 0x212c <_Z14updateZoneflagv+0xca>
			GoThrowingZone1 = true;
			task3 = task4 = false;
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    2084:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2088:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    208c:	06 97       	sbiw	r24, 0x06	; 6
    208e:	f9 f4       	brne	.+62     	; 0x20ce <_Z14updateZoneflagv+0x6c>
    2090:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    2094:	81 11       	cpse	r24, r1
    2096:	60 c0       	rjmp	.+192    	; 0x2158 <_Z14updateZoneflagv+0xf6>
    2098:	1a c0       	rjmp	.+52     	; 0x20ce <_Z14updateZoneflagv+0x6c>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    209a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    209e:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    20a2:	05 97       	sbiw	r24, 0x05	; 5
    20a4:	31 f0       	breq	.+12     	; 0x20b2 <_Z14updateZoneflagv+0x50>
    20a6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    20aa:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    20ae:	06 97       	sbiw	r24, 0x06	; 6
    20b0:	31 f4       	brne	.+12     	; 0x20be <_Z14updateZoneflagv+0x5c>
		/*uart0_puts("Shuttlecock arm gone \r\n");*/
		ShuttleCockArmGone = true;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <ShuttleCockArmGone>
		uart3_putc('w');
    20b8:	87 e7       	ldi	r24, 0x77	; 119
    20ba:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
	}
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
    20be:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <ShuttleCockGiven>
    20c2:	88 23       	and	r24, r24
    20c4:	21 f0       	breq	.+8      	; 0x20ce <_Z14updateZoneflagv+0x6c>
    20c6:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <GoldenRackGiven>
    20ca:	81 11       	cpse	r24, r1
    20cc:	89 c0       	rjmp	.+274    	; 0x21e0 <_Z14updateZoneflagv+0x17e>
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
    20ce:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <sendoncetorotateGeneva>
    20d2:	88 23       	and	r24, r24
    20d4:	99 f0       	breq	.+38     	; 0x20fc <_Z14updateZoneflagv+0x9a>
    20d6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    20da:	86 fd       	sbrc	r24, 6
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <_Z14updateZoneflagv+0x9a>
    20de:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    20e2:	82 fd       	sbrc	r24, 2
    20e4:	0b c0       	rjmp	.+22     	; 0x20fc <_Z14updateZoneflagv+0x9a>
    20e6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    20ea:	81 11       	cpse	r24, r1
    20ec:	07 c0       	rjmp	.+14     	; 0x20fc <_Z14updateZoneflagv+0x9a>
    20ee:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    20f2:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    20f6:	06 97       	sbiw	r24, 0x06	; 6
    20f8:	09 f4       	brne	.+2      	; 0x20fc <_Z14updateZoneflagv+0x9a>
    20fa:	43 c0       	rjmp	.+134    	; 0x2182 <_Z14updateZoneflagv+0x120>
			uart3_putc('k');
			sendoncetorotateGeneva = false;
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
    20fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2100:	82 ff       	sbrs	r24, 2
    2102:	62 c0       	rjmp	.+196    	; 0x21c8 <_Z14updateZoneflagv+0x166>
    2104:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2108:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    210c:	06 97       	sbiw	r24, 0x06	; 6
    210e:	09 f0       	breq	.+2      	; 0x2112 <_Z14updateZoneflagv+0xb0>
    2110:	5b c0       	rjmp	.+182    	; 0x21c8 <_Z14updateZoneflagv+0x166>
    2112:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <ManualInFrontOfLZ2>
    2116:	81 11       	cpse	r24, r1
    2118:	57 c0       	rjmp	.+174    	; 0x21c8 <_Z14updateZoneflagv+0x166>
    211a:	39 c0       	rjmp	.+114    	; 0x218e <_Z14updateZoneflagv+0x12c>
			GoThrowingZone2 = false;
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
			//uart0_puts("none \r\n");
			GoldenRackGiven = false;
    211c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <GoldenRackGiven>
			GoThrowingZone2 = true;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <GoThrowingZone2>
			GoThrowingZone3 = false;
    2126:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <GoThrowingZone3>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    212a:	5a c0       	rjmp	.+180    	; 0x21e0 <_Z14updateZoneflagv+0x17e>
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL6)) &&  where == inLZ1 ){
			//'w' is sent to throwing mechanism to grip shuttlecock
			uart0_puts("shuttlecock given \r\n");
    212c:	87 e5       	ldi	r24, 0x57	; 87
    212e:	92 e0       	ldi	r25, 0x02	; 2
    2130:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_Z10uart0_putsPKc>
			uart3_putc('o');
    2134:	8f e6       	ldi	r24, 0x6F	; 111
    2136:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = true;
    2140:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <GoThrowingZone1>
			task3 = task4 = false;
    2144:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <task4>
    2148:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <task3>
    214c:	44 c0       	rjmp	.+136    	; 0x21d6 <_Z14updateZoneflagv+0x174>
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    214e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    2152:	86 ff       	sbrs	r24, 6
    2154:	97 cf       	rjmp	.-210    	; 0x2084 <_Z14updateZoneflagv+0x22>
    2156:	bb cf       	rjmp	.-138    	; 0x20ce <_Z14updateZoneflagv+0x6c>
		/*	uart0_puts("Shuttlecock given in loading zone 2\r\nManual robot ahead \r\n");*/
			//'o' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    2158:	8f e6       	ldi	r24, 0x6F	; 111
    215a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = false;
    2164:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <GoThrowingZone1>
			GoThrowingZone2 = true;
    2168:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <GoThrowingZone2>
			//robotState = moving;
			task3 = task4 = task5 = true;
    216c:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <task5>
    2170:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <task4>
    2174:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <task3>
			task6 = task7 = false;
    2178:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <task7>
    217c:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <task6>
    2180:	2a c0       	rjmp	.+84     	; 0x21d6 <_Z14updateZoneflagv+0x174>
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
		if(sendoncetorotateGeneva && !(PINL & (1<<PL6)) && !((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && !ManualInFrontOfLZ2 && where == inLZ2){
			uart3_putc('k');
    2182:	8b e6       	ldi	r24, 0x6B	; 107
    2184:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
			sendoncetorotateGeneva = false;
    2188:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sendoncetorotateGeneva>
    218c:	b7 cf       	rjmp	.-146    	; 0x20fc <_Z14updateZoneflagv+0x9a>
		}
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
			//'f' is sent to throwing mechanism to tell to throwing zone 3 from golden rack
			task6 = task7 = true;
    218e:	c1 e0       	ldi	r28, 0x01	; 1
    2190:	c0 93 d2 02 	sts	0x02D2, r28	; 0x8002d2 <task7>
    2194:	c0 93 d3 02 	sts	0x02D3, r28	; 0x8002d3 <task6>
			task8 = task9 = false;
    2198:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <task9>
    219c:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <task8>
			/*uart0_puts("going throwing zone 3\r\n");*/
			uart3_putc('j');
    21a0:	8a e6       	ldi	r24, 0x6A	; 106
    21a2:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
			GoldenRackGiven = true;
    21a6:	c0 93 e3 02 	sts	0x02E3, r28	; 0x8002e3 <GoldenRackGiven>
			ShuttleCockArmGone = true;
    21aa:	c0 93 e2 02 	sts	0x02E2, r28	; 0x8002e2 <ShuttleCockArmGone>
			ShuttleCockGiven = true;
    21ae:	c0 93 e4 02 	sts	0x02E4, r28	; 0x8002e4 <ShuttleCockGiven>
			GoThrowingZone3 = true;
    21b2:	c0 93 de 02 	sts	0x02DE, r28	; 0x8002de <GoThrowingZone3>
			robotState = moving;
    21b6:	87 e0       	ldi	r24, 0x07	; 7
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    21be:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
			GoThrowingZone2 = false;
    21c2:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <GoThrowingZone2>
    21c6:	0c c0       	rjmp	.+24     	; 0x21e0 <_Z14updateZoneflagv+0x17e>
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
    21c8:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    21cc:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    21d0:	06 97       	sbiw	r24, 0x06	; 6
    21d2:	31 f4       	brne	.+12     	; 0x21e0 <_Z14updateZoneflagv+0x17e>
    21d4:	a3 cf       	rjmp	.-186    	; 0x211c <_Z14updateZoneflagv+0xba>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL6)) &&  (where == inLZ1 || where == inLZ2) ){
    21d6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    21da:	86 fd       	sbrc	r24, 6
    21dc:	5e cf       	rjmp	.-324    	; 0x209a <_Z14updateZoneflagv+0x38>
    21de:	73 cf       	rjmp	.-282    	; 0x20c6 <_Z14updateZoneflagv+0x64>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    21e0:	cf 91       	pop	r28
    21e2:	08 95       	ret

000021e4 <_Z18gorockthegamefieldv>:

char receiveAck;
/////////////////////////

void gorockthegamefield(void)
{
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
	
	//light up led's//
	if((RACK_STATUSPORT & (1<<RACK_STATUSPIN))){
    21e8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    21ec:	82 ff       	sbrs	r24, 2
    21ee:	06 c0       	rjmp	.+12     	; 0x21fc <_Z18gorockthegamefieldv+0x18>
		PORTK |= (1<<PK1);
    21f0:	e8 e0       	ldi	r30, 0x08	; 8
    21f2:	f1 e0       	ldi	r31, 0x01	; 1
    21f4:	80 81       	ld	r24, Z
    21f6:	82 60       	ori	r24, 0x02	; 2
    21f8:	80 83       	st	Z, r24
    21fa:	05 c0       	rjmp	.+10     	; 0x2206 <__stack+0x7>
	}
	else{
		PORTK &= ~(1<<PK1);
    21fc:	e8 e0       	ldi	r30, 0x08	; 8
    21fe:	f1 e0       	ldi	r31, 0x01	; 1
    2200:	80 81       	ld	r24, Z
    2202:	8d 7f       	andi	r24, 0xFD	; 253
    2204:	80 83       	st	Z, r24
	}
	
	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
    2206:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    220a:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    220e:	05 97       	sbiw	r24, 0x05	; 5
    2210:	39 f0       	breq	.+14     	; 0x2220 <__stack+0x21>
    2212:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2216:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    221a:	06 97       	sbiw	r24, 0x06	; 6
    221c:	09 f0       	breq	.+2      	; 0x2220 <__stack+0x21>
    221e:	4b c0       	rjmp	.+150    	; 0x22b6 <__stack+0xb7>
    2220:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2224:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2228:	08 97       	sbiw	r24, 0x08	; 8
    222a:	09 f0       	breq	.+2      	; 0x222e <__stack+0x2f>
    222c:	44 c0       	rjmp	.+136    	; 0x22b6 <__stack+0xb7>
    222e:	6a c4       	rjmp	.+2260   	; 0x2b04 <__stack+0x905>
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    2230:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <task5>
    2234:	81 11       	cpse	r24, r1
    2236:	09 c0       	rjmp	.+18     	; 0x224a <__stack+0x4b>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
    2238:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    223c:	84 ff       	sbrs	r24, 4
    223e:	75 c4       	rjmp	.+2282   	; 0x2b2a <__stack+0x92b>
    2240:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <alwaysTZ1>
    2244:	81 11       	cpse	r24, r1
    2246:	71 c4       	rjmp	.+2274   	; 0x2b2a <__stack+0x92b>
    2248:	62 c4       	rjmp	.+2244   	; 0x2b0e <__stack+0x90f>
				GoThrowingZone1 = true;
				task3 = task4 = false;
				updateZoneflag();
			}	
		}
 		else if(task6 && task7 ){
    224a:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <task6>
    224e:	88 23       	and	r24, r24
    2250:	81 f1       	breq	.+96     	; 0x22b2 <__stack+0xb3>
    2252:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <task7>
    2256:	88 23       	and	r24, r24
    2258:	61 f1       	breq	.+88     	; 0x22b2 <__stack+0xb3>
			 //if manual robot is not ahead and not always throw from throwing zone 2
			 //or just goto throwing zone 3 from loading zone 2		
 			if( ((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !alwaysTZ2) || LZ2ForTZ3){
    225a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    225e:	84 ff       	sbrs	r24, 4
    2260:	04 c0       	rjmp	.+8      	; 0x226a <__stack+0x6b>
    2262:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <alwaysTZ2>
    2266:	88 23       	and	r24, r24
    2268:	21 f0       	breq	.+8      	; 0x2272 <__stack+0x73>
    226a:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <LZ2ForTZ3>
    226e:	88 23       	and	r24, r24
    2270:	59 f0       	breq	.+22     	; 0x2288 <__stack+0x89>
			    /*uart0_puts("no manual in front\r\n");*/
 				where = inLZ2;
    2272:	86 e0       	ldi	r24, 0x06	; 6
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
    227a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
 				ManualInFrontOfLZ2 = false;
    227e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
 				updateZoneflag();
    2282:	ef de       	rcall	.-546    	; 0x2062 <_Z14updateZoneflagv>
 				Hold_Position();
    2284:	c0 de       	rcall	.-640    	; 0x2006 <_Z13Hold_Positionv>
    2286:	17 c0       	rjmp	.+46     	; 0x22b6 <__stack+0xb7>
    2288:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 			}
			//if there is manual robot ahead of automatic robot && robot is not going 
			//..directly to throwing zone 3 
 			else if (!(ZONE_STATUSPORT & (1<< ZONE_STATUSPIN)) && !LZ2ForTZ3){
    228c:	84 fd       	sbrc	r24, 4
    228e:	56 c4       	rjmp	.+2220   	; 0x2b3c <__stack+0x93d>
    2290:	81 e0       	ldi	r24, 0x01	; 1
				/*uart0_puts("manual infront \r\n");*/
				ManualInFrontOfLZ2 = true;
    2292:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
    2296:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <xJunctionMeetFromTZ2>
 				xJunctionMeetFromTZ2 = false;
				updateZoneflag();
    229a:	e3 de       	rcall	.-570    	; 0x2062 <_Z14updateZoneflagv>
    229c:	b4 de       	rcall	.-664    	; 0x2006 <_Z13Hold_Positionv>
				Hold_Position();
    229e:	0b c0       	rjmp	.+22     	; 0x22b6 <__stack+0xb7>
    22a0:	81 e0       	ldi	r24, 0x01	; 1
 			}
			//if always throw from throwing zone 2
			//automatic robot must force to know there is manual robot ahead.
			else if(alwaysTZ2){
				/*uart0_puts("always tz2 \r\n");*/
				ManualInFrontOfLZ2 = true;
    22a2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
				updateZoneflag();
    22a6:	dd de       	rcall	.-582    	; 0x2062 <_Z14updateZoneflagv>
				Hold_Position();
    22a8:	ae de       	rcall	.-676    	; 0x2006 <_Z13Hold_Positionv>
			}
			//otherwise updatezone flag
 			else{
 				updateZoneflag();
    22aa:	05 c0       	rjmp	.+10     	; 0x22b6 <__stack+0xb7>
    22ac:	da de       	rcall	.-588    	; 0x2062 <_Z14updateZoneflagv>
 				Hold_Position();
    22ae:	ab de       	rcall	.-682    	; 0x2006 <_Z13Hold_Positionv>
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <__stack+0xb7>
    22b2:	d7 de       	rcall	.-594    	; 0x2062 <_Z14updateZoneflagv>
 			}
 		}
		/*if the robot is in loading zone 1 or loading zone 2  otherwise */
		else{
			updateZoneflag();
    22b4:	a8 de       	rcall	.-688    	; 0x2006 <_Z13Hold_Positionv>
    22b6:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <task1>
			Hold_Position();
    22ba:	81 11       	cpse	r24, r1
		}
	}
	
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
    22bc:	f1 c5       	rjmp	.+3042   	; 0x2ea0 <__stack+0xca1>
    22be:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <where>
    22c2:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <where+0x1>
    22c6:	23 2b       	or	r18, r19
    22c8:	09 f0       	breq	.+2      	; 0x22cc <__stack+0xcd>
    22ca:	e4 c5       	rjmp	.+3016   	; 0x2e94 <__stack+0xc95>
    22cc:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <normalGame>
    22d0:	91 11       	cpse	r25, r1
    22d2:	39 c4       	rjmp	.+2162   	; 0x2b46 <__stack+0x947>
    22d4:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <alwaysTZ1>
    22d8:	91 11       	cpse	r25, r1
    22da:	35 c4       	rjmp	.+2154   	; 0x2b46 <__stack+0x947>
    22dc:	db c5       	rjmp	.+2998   	; 0x2e94 <__stack+0xc95>
    22de:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    22e2:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
		inline void resetCount(){count_encoder = 0;};
    22e6:	78 94       	sei
    22e8:	e8 e6       	ldi	r30, 0x68	; 104
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    22ec:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE0);
    22ee:	81 60       	ori	r24, 0x01	; 1
    22f0:	80 83       	st	Z, r24
    22f2:	eb e6       	ldi	r30, 0x6B	; 107
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
	PCMSK0 |= (1<<PCINT4);
    22f8:	80 61       	ori	r24, 0x10	; 16
    22fa:	80 83       	st	Z, r24
    22fc:	30 c1       	rjmp	.+608    	; 0x255e <__stack+0x35f>
    22fe:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <directlyTZ3>
    2302:	21 11       	cpse	r18, r1
			linetrackerXjunctionWatch();
			//uart0_puts("int on");
		}
		//uart0_puts("\r\n");
	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    2304:	08 c0       	rjmp	.+16     	; 0x2316 <__stack+0x117>
    2306:	20 91 c2 04 	lds	r18, 0x04C2	; 0x8004c2 <LZ2ForTZ3>
    230a:	21 11       	cpse	r18, r1
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <__stack+0x117>
    230e:	20 91 c1 04 	lds	r18, 0x04C1	; 0x8004c1 <alwaysTZ2>
    2312:	22 23       	and	r18, r18
    2314:	69 f1       	breq	.+90     	; 0x2370 <__stack+0x171>
    2316:	81 11       	cpse	r24, r1
    2318:	2e c0       	rjmp	.+92     	; 0x2376 <__stack+0x177>
    231a:	48 ec       	ldi	r20, 0xC8	; 200
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	62 e0       	ldi	r22, 0x02	; 2
		movx((Throwingzone2.x-100),Front,STARTZONEtoCORNER);
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	8c e2       	ldi	r24, 0x2C	; 44
    2324:	9a e1       	ldi	r25, 0x1A	; 26
    2326:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_Z4movxiij>
    232a:	87 e0       	ldi	r24, 0x07	; 7
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		robotState = moving;
    2332:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2336:	86 ec       	ldi	r24, 0xC6	; 198
    2338:	92 e0       	ldi	r25, 0x02	; 2
    233a:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
		if(abs(encoderX.getdistance()) >= 6600){
    233e:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    2342:	9b 01       	movw	r18, r22
    2344:	77 23       	and	r23, r23
    2346:	24 f4       	brge	.+8      	; 0x2350 <__stack+0x151>
    2348:	22 27       	eor	r18, r18
    234a:	33 27       	eor	r19, r19
    234c:	26 1b       	sub	r18, r22
    234e:	37 0b       	sbc	r19, r23
    2350:	28 3c       	cpi	r18, 0xC8	; 200
    2352:	39 41       	sbci	r19, 0x19	; 25
    2354:	0c f4       	brge	.+2      	; 0x2358 <__stack+0x159>
    2356:	03 c1       	rjmp	.+518    	; 0x255e <__stack+0x35f>
    2358:	78 94       	sei
    235a:	e8 e6       	ldi	r30, 0x68	; 104
    235c:	f0 e0       	ldi	r31, 0x00	; 0
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    235e:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE0);
    2360:	81 60       	ori	r24, 0x01	; 1
    2362:	80 83       	st	Z, r24
    2364:	eb e6       	ldi	r30, 0x6B	; 107
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
	PCMSK0 |= (1<<PCINT4);
    236a:	80 61       	ori	r24, 0x10	; 16
    236c:	80 83       	st	Z, r24
    236e:	f7 c0       	rjmp	.+494    	; 0x255e <__stack+0x35f>
    2370:	88 23       	and	r24, r24
    2372:	09 f4       	brne	.+2      	; 0x2376 <__stack+0x177>
    2374:	81 c0       	rjmp	.+258    	; 0x2478 <__stack+0x279>
			//uart0_puts("interrupt on\t");
			linetrackerXjunctionWatch();
		}
	}
	///move from corner to loading zone1 if task1 is completed and task2 not completed
	else if(task1 && !task2){	
    2376:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <task2>
    237a:	81 11       	cpse	r24, r1
    237c:	3e c0       	rjmp	.+124    	; 0x23fa <__stack+0x1fb>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
		where = inFirstloadingCorner;
    2386:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    238a:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <startingAtFront>
    238e:	ed e6       	ldi	r30, 0x6D	; 109
		startingAtFront = false;
    2390:	f3 e0       	ldi	r31, 0x03	; 3
    2392:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e0       	ldi	r26, 0x00	; 0
    2398:	b0 e4       	ldi	r27, 0x40	; 64
    239a:	85 8b       	std	Z+21, r24	; 0x15
    239c:	96 8b       	std	Z+22, r25	; 0x16
    239e:	a7 8b       	std	Z+23, r26	; 0x17
    23a0:	b0 8f       	std	Z+24, r27	; 0x18
    23a2:	11 8e       	std	Z+25, r1	; 0x19
    23a4:	12 8e       	std	Z+26, r1	; 0x1a
    23a6:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    23a8:	14 8e       	std	Z+28, r1	; 0x1c
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    23b0:	b1 e4       	ldi	r27, 0x41	; 65
    23b2:	85 8f       	std	Z+29, r24	; 0x1d
    23b4:	96 8f       	std	Z+30, r25	; 0x1e
    23b6:	a7 8f       	std	Z+31, r26	; 0x1f
    23b8:	b0 a3       	std	Z+32, r27	; 0x20
    23ba:	8c e6       	ldi	r24, 0x6C	; 108
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_Z10uart0_putsPKc>
		compass.setPid(2.0,0,30);
		uart0_puts("moving aheead \r\n");
    23c2:	87 e0       	ldi	r24, 0x07	; 7
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		robotState = moving;
    23ca:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    23ce:	eb e6       	ldi	r30, 0x6B	; 107
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    23d4:	8f 7e       	andi	r24, 0xEF	; 239
    23d6:	80 83       	st	Z, r24
    23d8:	78 94       	sei
    23da:	e8 e6       	ldi	r30, 0x68	; 104
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    23de:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    23e0:	84 60       	ori	r24, 0x04	; 4
    23e2:	80 83       	st	Z, r24
    23e4:	ed e6       	ldi	r30, 0x6D	; 109
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
	PCMSK2 |= (1<<PCINT23);
    23e8:	80 81       	ld	r24, Z
    23ea:	80 68       	ori	r24, 0x80	; 128
    23ec:	80 83       	st	Z, r24
    23ee:	4c e3       	ldi	r20, 0x3C	; 60
    23f0:	62 e0       	ldi	r22, 0x02	; 2
		linetrackerXjunctionWatchOff();
		linetrackerYjunctionWatch();
		//movYForwardSlow(CORNERtoLZ1);
		Move_Yaxis_Slow(1000, Front, CORNERtoLZ1);
    23f2:	88 ee       	ldi	r24, 0xE8	; 232
    23f4:	93 e0       	ldi	r25, 0x03	; 3
    23f6:	87 dd       	rcall	.-1266   	; 0x1f06 <_Z15Move_Yaxis_Slowjhh>
    23f8:	b2 c0       	rjmp	.+356    	; 0x255e <__stack+0x35f>
    23fa:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <where>
    23fe:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <where+0x1>
		//movYForwardSlow(CORNERtoLZ1);
	}
	/*if task2 is completed and robot just reached loading zone 1*/
	else if(task1 && task2 && where == inFirstloadingCorner && (robotState == moving) && (normalGame||alwaysTZ1)){
    2402:	21 30       	cpi	r18, 0x01	; 1
    2404:	31 05       	cpc	r19, r1
    2406:	09 f0       	breq	.+2      	; 0x240a <__stack+0x20b>
    2408:	3c c5       	rjmp	.+2680   	; 0x2e82 <__stack+0xc83>
    240a:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <robotState>
    240e:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <robotState+0x1>
    2412:	27 30       	cpi	r18, 0x07	; 7
    2414:	31 05       	cpc	r19, r1
    2416:	09 f0       	breq	.+2      	; 0x241a <__stack+0x21b>
    2418:	34 c5       	rjmp	.+2664   	; 0x2e82 <__stack+0xc83>
    241a:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <normalGame>
    241e:	81 11       	cpse	r24, r1
    2420:	05 c0       	rjmp	.+10     	; 0x242c <__stack+0x22d>
    2422:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <alwaysTZ1>
    2426:	88 23       	and	r24, r24
    2428:	09 f4       	brne	.+2      	; 0x242c <__stack+0x22d>
    242a:	2b c5       	rjmp	.+2646   	; 0x2e82 <__stack+0xc83>
    242c:	85 e0       	ldi	r24, 0x05	; 5
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
		where = inLZ1;
    2434:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2438:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z10getYawGY88v>
    243c:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <compass+0xf>
		compass.SETPOINT = getYawGY88();
    2440:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <compass+0xe>
    2444:	88 e6       	ldi	r24, 0x68	; 104
    2446:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
		uart3_putc('h');
    244a:	88 e0       	ldi	r24, 0x08	; 8
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		//uart0_puts("in loading zone 1\r\n");
		//compass.setPid(2.0,0,30);
		robotState = notmoving;
    2452:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2456:	ed e6       	ldi	r30, 0x6D	; 109
    2458:	f0 e0       	ldi	r31, 0x00	; 0
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    245a:	80 81       	ld	r24, Z
    245c:	8f 77       	andi	r24, 0x7F	; 127
    245e:	80 83       	st	Z, r24
    2460:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
		linetrackerYjunctionWatchOff();
		BrakeMotor();
    2464:	d0 dd       	rcall	.-1120   	; 0x2006 <_Z13Hold_Positionv>
    2466:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
		Hold_Position();
    246a:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    246e:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2472:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2476:	73 c0       	rjmp	.+230    	; 0x255e <__stack+0x35f>
    2478:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <where>
    247c:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <where+0x1>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    2480:	21 30       	cpi	r18, 0x01	; 1
    2482:	31 05       	cpc	r19, r1
    2484:	09 f0       	breq	.+2      	; 0x2488 <__stack+0x289>
    2486:	6b c0       	rjmp	.+214    	; 0x255e <__stack+0x35f>
    2488:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <task2>
    248c:	88 23       	and	r24, r24
    248e:	09 f4       	brne	.+2      	; 0x2492 <__stack+0x293>
    2490:	66 c0       	rjmp	.+204    	; 0x255e <__stack+0x35f>
    2492:	91 11       	cpse	r25, r1
    2494:	0d c0       	rjmp	.+26     	; 0x24b0 <__stack+0x2b1>
    2496:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <directlyTZ3>
    249a:	81 11       	cpse	r24, r1
    249c:	09 c0       	rjmp	.+18     	; 0x24b0 <__stack+0x2b1>
    249e:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <LZ2ForTZ3>
    24a2:	81 11       	cpse	r24, r1
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <__stack+0x2b1>
    24a6:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <alwaysTZ2>
    24aa:	88 23       	and	r24, r24
    24ac:	09 f4       	brne	.+2      	; 0x24b0 <__stack+0x2b1>
    24ae:	57 c0       	rjmp	.+174    	; 0x255e <__stack+0x35f>
    24b0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    24b4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    24b8:	07 97       	sbiw	r24, 0x07	; 7
    24ba:	09 f0       	breq	.+2      	; 0x24be <__stack+0x2bf>
    24bc:	50 c0       	rjmp	.+160    	; 0x255e <__stack+0x35f>
    24be:	79 c3       	rjmp	.+1778   	; 0x2bb2 <__stack+0x9b3>
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <task5>
		robotState = notmoving;
		BrakeMotor();
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
			task1 = task2 = task3 = task4 = task5 = true;
    24c6:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <task4>
    24ca:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <task3>
    24ce:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <task2>
    24d2:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <task1>
    24d6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
    24da:	41 c0       	rjmp	.+130    	; 0x255e <__stack+0x35f>
			ManualInFrontOfLZ2 = true;
    24dc:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <directlyTZ3>
    24e0:	88 23       	and	r24, r24
		}
		else if(directlyTZ3){
    24e2:	b1 f0       	breq	.+44     	; 0x2510 <__stack+0x311>
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <task7>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    24ea:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <task6>
    24ee:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <task5>
    24f2:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <task4>
    24f6:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <task3>
    24fa:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <task2>
    24fe:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <task1>
    2502:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <ShuttleCockArmGone>
    2506:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ShuttleCockGiven>
			ShuttleCockArmGone = true;
    250a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <GoThrowingZone3>
			ShuttleCockGiven = true;
    250e:	31 c0       	rjmp	.+98     	; 0x2572 <__stack+0x373>
			GoThrowingZone3 = true;
    2510:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <LZ2ForTZ3>
    2514:	88 23       	and	r24, r24
		}
		else if(LZ2ForTZ3){
    2516:	91 f0       	breq	.+36     	; 0x253c <__stack+0x33d>
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <task7>
			task1 = task2 = task3 = task4 = task5 = task6 = task7 = true;
    251e:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <task6>
    2522:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <task5>
    2526:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <task4>
    252a:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <task3>
    252e:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <task2>
    2532:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <task1>
    2536:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ManualInFrontOfLZ2>
    253a:	11 c0       	rjmp	.+34     	; 0x255e <__stack+0x35f>
			ManualInFrontOfLZ2 = false;
    253c:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <alwaysTZ2>
    2540:	88 23       	and	r24, r24
		}
		else if(alwaysTZ2){
    2542:	69 f0       	breq	.+26     	; 0x255e <__stack+0x35f>
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <task5>
			task1 = task2 = task3 = task4 = task5 = true;
    254a:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <task4>
    254e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <task3>
    2552:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <task2>
    2556:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <task1>
    255a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ManualInFrontOfLZ2>
    255e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <ShuttleCockGiven>
			ManualInFrontOfLZ2 = true;
    2562:	88 23       	and	r24, r24
		}
	}
	/*if Shuttlecock is given*/
	if(ShuttleCockGiven && ShuttleCockArmGone)
    2564:	09 f4       	brne	.+2      	; 0x2568 <__stack+0x369>
    2566:	a9 c4       	rjmp	.+2386   	; 0x2eba <__stack+0xcbb>
    2568:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <ShuttleCockArmGone>
    256c:	88 23       	and	r24, r24
    256e:	09 f4       	brne	.+2      	; 0x2572 <__stack+0x373>
    2570:	a4 c4       	rjmp	.+2376   	; 0x2eba <__stack+0xcbb>
    2572:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <GoThrowingZone1>
    2576:	88 23       	and	r24, r24
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
    2578:	09 f4       	brne	.+2      	; 0x257c <__stack+0x37d>
    257a:	79 c3       	rjmp	.+1778   	; 0x2c6e <__stack+0xa6f>
    257c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <task3>
    2580:	81 11       	cpse	r24, r1
    2582:	13 c0       	rjmp	.+38     	; 0x25aa <__stack+0x3ab>
    2584:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2588:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    258c:	05 97       	sbiw	r24, 0x05	; 5
    258e:	f1 f4       	brne	.+60     	; 0x25cc <__stack+0x3cd>
    2590:	35 c3       	rjmp	.+1642   	; 0x2bfc <__stack+0x9fd>
    2592:	78 94       	sei
    2594:	e8 e6       	ldi	r30, 0x68	; 104
    2596:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2598:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    259a:	84 60       	ori	r24, 0x04	; 4
    259c:	80 83       	st	Z, r24
    259e:	ed e6       	ldi	r30, 0x6D	; 109
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    25a4:	80 68       	ori	r24, 0x80	; 128
    25a6:	80 83       	st	Z, r24
    25a8:	11 c0       	rjmp	.+34     	; 0x25cc <__stack+0x3cd>
    25aa:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <task4>
    25ae:	81 11       	cpse	r24, r1
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    25b0:	0d c0       	rjmp	.+26     	; 0x25cc <__stack+0x3cd>
    25b2:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    25b6:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    25ba:	05 97       	sbiw	r24, 0x05	; 5
    25bc:	39 f4       	brne	.+14     	; 0x25cc <__stack+0x3cd>
    25be:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    25c2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    25c6:	07 97       	sbiw	r24, 0x07	; 7
    25c8:	09 f4       	brne	.+2      	; 0x25cc <__stack+0x3cd>
    25ca:	57 c3       	rjmp	.+1710   	; 0x2c7a <__stack+0xa7b>
    25cc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    25d0:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
				robotState = notmoving;
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
    25d4:	02 97       	sbiw	r24, 0x02	; 2
    25d6:	d9 f4       	brne	.+54     	; 0x260e <__stack+0x40f>
    25d8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    25dc:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    25e0:	08 97       	sbiw	r24, 0x08	; 8
    25e2:	a9 f4       	brne	.+42     	; 0x260e <__stack+0x40f>
    25e4:	66 c3       	rjmp	.+1740   	; 0x2cb2 <__stack+0xab3>
    25e6:	81 e3       	ldi	r24, 0x31	; 49
    25e8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
			//	uart0_puts("Throwing \r\n");
				Hold_Position();

				if(_b_Transmit_once)	//Stable_Robot() && 
				{	
					uart3_putc('1');
    25ec:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <_b_Transmit_once>
    25f0:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z10uart3_getcv>
					//uart3_puts("Job Done\r\n\n");
					_b_Transmit_once = false;
    25f4:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <receiveAck>
				}
				
				receiveAck = uart3_getc();
    25f8:	87 36       	cpi	r24, 0x67	; 103
    25fa:	49 f4       	brne	.+18     	; 0x260e <__stack+0x40f>
    25fc:	81 e0       	ldi	r24, 0x01	; 1
				if(receiveAck == 'g'){
    25fe:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <backtoLZ1>
					//uart0_puts("received ack\r\n");
					backtoLZ1 = true;
    2602:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <GoThrowingZone1>
    2606:	80 e2       	ldi	r24, 0x20	; 32
					GoThrowingZone1 = false;
    2608:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <receiveAck>
					receiveAck = ' ';
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <__stack+0x419>
    260e:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <backtoLZ1>
    2612:	88 23       	and	r24, r24
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ1 && task3 && !task4){
    2614:	09 f4       	brne	.+2      	; 0x2618 <__stack+0x419>
    2616:	49 c0       	rjmp	.+146    	; 0x26aa <__stack+0x4ab>
    2618:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <task3>
    261c:	88 23       	and	r24, r24
    261e:	09 f4       	brne	.+2      	; 0x2622 <__stack+0x423>
    2620:	44 c0       	rjmp	.+136    	; 0x26aa <__stack+0x4ab>
    2622:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <task4>
    2626:	81 11       	cpse	r24, r1
    2628:	45 c0       	rjmp	.+138    	; 0x26b4 <__stack+0x4b5>
    262a:	ed e6       	ldi	r30, 0x6D	; 109
    262c:	f3 e0       	ldi	r31, 0x03	; 3
    262e:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a0 e0       	ldi	r26, 0x00	; 0
    2634:	b0 e4       	ldi	r27, 0x40	; 64
    2636:	85 8b       	std	Z+21, r24	; 0x15
    2638:	96 8b       	std	Z+22, r25	; 0x16
    263a:	a7 8b       	std	Z+23, r26	; 0x17
    263c:	b0 8f       	std	Z+24, r27	; 0x18
    263e:	11 8e       	std	Z+25, r1	; 0x19
    2640:	12 8e       	std	Z+26, r1	; 0x1a
    2642:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    2644:	14 8e       	std	Z+28, r1	; 0x1c
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    264c:	b1 e4       	ldi	r27, 0x41	; 65
    264e:	85 8f       	std	Z+29, r24	; 0x1d
    2650:	96 8f       	std	Z+30, r25	; 0x1e
    2652:	a7 8f       	std	Z+31, r26	; 0x1f
    2654:	b0 a3       	std	Z+32, r27	; 0x20
    2656:	44 e6       	ldi	r20, 0x64	; 100
    2658:	50 e0       	ldi	r21, 0x00	; 0
				compass.setPid(2.0,0,30);
				//uart0_puts("Returning from tz1 \t");
				Move_Yaxis(Throwingzone1.y+25, Back, LZ1toTZ1);
    265a:	63 e0       	ldi	r22, 0x03	; 3
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	87 eb       	ldi	r24, 0xB7	; 183
    2660:	97 e0       	ldi	r25, 0x07	; 7
    2662:	e9 da       	rcall	.-2606   	; 0x1c36 <_Z10Move_Yaxisiij>
    2664:	87 e0       	ldi	r24, 0x07	; 7
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				//movy(Throwingzone1.y, Back,TZ1toLZ1);
				robotState = moving;
    266c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2670:	8e eb       	ldi	r24, 0xBE	; 190
    2672:	92 e0       	ldi	r25, 0x02	; 2
    2674:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				if(abs(encoderY.getdistance()) >= 1200){
    2678:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    267c:	9b 01       	movw	r18, r22
    267e:	77 23       	and	r23, r23
    2680:	24 f4       	brge	.+8      	; 0x268a <__stack+0x48b>
    2682:	22 27       	eor	r18, r18
    2684:	33 27       	eor	r19, r19
    2686:	26 1b       	sub	r18, r22
    2688:	37 0b       	sbc	r19, r23
    268a:	20 3b       	cpi	r18, 0xB0	; 176
    268c:	34 40       	sbci	r19, 0x04	; 4
    268e:	0c f4       	brge	.+2      	; 0x2692 <__stack+0x493>
    2690:	75 c0       	rjmp	.+234    	; 0x277c <__stack+0x57d>
    2692:	78 94       	sei
    2694:	e8 e6       	ldi	r30, 0x68	; 104
    2696:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2698:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    269a:	84 60       	ori	r24, 0x04	; 4
    269c:	80 83       	st	Z, r24
    269e:	ed e6       	ldi	r30, 0x6D	; 109
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    26a4:	80 68       	ori	r24, 0x80	; 128
    26a6:	80 83       	st	Z, r24
    26a8:	69 c0       	rjmp	.+210    	; 0x277c <__stack+0x57d>
    26aa:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <task4>
    26ae:	88 23       	and	r24, r24
				//uart0_puts("\r\n");
			
			}
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <__stack+0x4b5>
    26b2:	28 c3       	rjmp	.+1616   	; 0x2d04 <__stack+0xb05>
    26b4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    26b8:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    26bc:	07 97       	sbiw	r24, 0x07	; 7
    26be:	09 f0       	breq	.+2      	; 0x26c2 <__stack+0x4c3>
    26c0:	21 c3       	rjmp	.+1602   	; 0x2d04 <__stack+0xb05>
    26c2:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    26c6:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    26ca:	02 97       	sbiw	r24, 0x02	; 2
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <__stack+0x4d1>
    26ce:	1a c3       	rjmp	.+1588   	; 0x2d04 <__stack+0xb05>
    26d0:	f7 c2       	rjmp	.+1518   	; 0x2cc0 <__stack+0xac1>
    26d2:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <task5>
    26d6:	81 11       	cpse	r24, r1
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    26d8:	44 c0       	rjmp	.+136    	; 0x2762 <__stack+0x563>
    26da:	ed e6       	ldi	r30, 0x6D	; 109
    26dc:	f3 e0       	ldi	r31, 0x03	; 3
    26de:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a0 e0       	ldi	r26, 0x00	; 0
    26e4:	b0 e4       	ldi	r27, 0x40	; 64
    26e6:	85 8b       	std	Z+21, r24	; 0x15
    26e8:	96 8b       	std	Z+22, r25	; 0x16
    26ea:	a7 8b       	std	Z+23, r26	; 0x17
    26ec:	b0 8f       	std	Z+24, r27	; 0x18
    26ee:	11 8e       	std	Z+25, r1	; 0x19
    26f0:	12 8e       	std	Z+26, r1	; 0x1a
    26f2:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    26f4:	14 8e       	std	Z+28, r1	; 0x1c
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    26fc:	b1 e4       	ldi	r27, 0x41	; 65
    26fe:	85 8f       	std	Z+29, r24	; 0x1d
    2700:	96 8f       	std	Z+30, r25	; 0x1e
    2702:	a7 8f       	std	Z+31, r26	; 0x1f
    2704:	b0 a3       	std	Z+32, r27	; 0x20
    2706:	44 e6       	ldi	r20, 0x64	; 100
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	62 e0       	ldi	r22, 0x02	; 2
				//uart0_puts("heading loading zone 2\t");
				compass.setPid(2.0,0,30);
				movx(2100,Front,LZ1toLZ2);
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	84 e3       	ldi	r24, 0x34	; 52
    2710:	98 e0       	ldi	r25, 0x08	; 8
    2712:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_Z4movxiij>
    2716:	87 e0       	ldi	r24, 0x07	; 7
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				robotState = moving;
    271e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2722:	86 ec       	ldi	r24, 0xC6	; 198
    2724:	92 e0       	ldi	r25, 0x02	; 2
    2726:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				if(abs(encoderX.getdistance()) >= 1900){
    272a:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    272e:	9b 01       	movw	r18, r22
    2730:	77 23       	and	r23, r23
    2732:	24 f4       	brge	.+8      	; 0x273c <__stack+0x53d>
    2734:	22 27       	eor	r18, r18
    2736:	33 27       	eor	r19, r19
    2738:	26 1b       	sub	r18, r22
    273a:	37 0b       	sbc	r19, r23
    273c:	2c 36       	cpi	r18, 0x6C	; 108
    273e:	37 40       	sbci	r19, 0x07	; 7
    2740:	ec f0       	brlt	.+58     	; 0x277c <__stack+0x57d>
    2742:	78 94       	sei
    2744:	e8 e6       	ldi	r30, 0x68	; 104
    2746:	f0 e0       	ldi	r31, 0x00	; 0
	checkRobotMotion();
	
}

inline void linetrackerXjunctionWatch(void){
	sei();
    2748:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE0);
    274a:	81 60       	ori	r24, 0x01	; 1
    274c:	80 83       	st	Z, r24
    274e:	eb e6       	ldi	r30, 0x6B	; 107
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
	PCMSK0 |= (1<<PCINT4);
    2754:	80 61       	ori	r24, 0x10	; 16
    2756:	80 83       	st	Z, r24
    2758:	11 c0       	rjmp	.+34     	; 0x277c <__stack+0x57d>
    275a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <task5>
    275e:	88 23       	and	r24, r24
				}
				//uart0_puts("\r\n");
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
    2760:	69 f0       	breq	.+26     	; 0x277c <__stack+0x57d>
    2762:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2766:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    276a:	07 97       	sbiw	r24, 0x07	; 7
    276c:	39 f4       	brne	.+14     	; 0x277c <__stack+0x57d>
    276e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2772:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    2776:	05 97       	sbiw	r24, 0x05	; 5
    2778:	09 f4       	brne	.+2      	; 0x277c <__stack+0x57d>
    277a:	c9 c2       	rjmp	.+1426   	; 0x2d0e <__stack+0xb0f>
    277c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <GoThrowingZone2>
    2780:	88 23       	and	r24, r24
			}
			
			
			/*if there is manual robot ahead of automatic robot && golden rack is not given and shuttlecock
			is given*/
			if(GoThrowingZone2 && !task6 ){
    2782:	09 f4       	brne	.+2      	; 0x2786 <__stack+0x587>
    2784:	47 c0       	rjmp	.+142    	; 0x2814 <__stack+0x615>
    2786:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <task6>
    278a:	81 11       	cpse	r24, r1
    278c:	47 c0       	rjmp	.+142    	; 0x281c <__stack+0x61d>
    278e:	8d e7       	ldi	r24, 0x7D	; 125
    2790:	92 e0       	ldi	r25, 0x02	; 2
    2792:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_Z10uart0_putsPKc>
				uart0_puts("going tz2 \t");
    2796:	ed e6       	ldi	r30, 0x6D	; 109
    2798:	f3 e0       	ldi	r31, 0x03	; 3
    279a:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e0       	ldi	r26, 0x00	; 0
    27a0:	b0 e4       	ldi	r27, 0x40	; 64
    27a2:	85 8b       	std	Z+21, r24	; 0x15
    27a4:	96 8b       	std	Z+22, r25	; 0x16
    27a6:	a7 8b       	std	Z+23, r26	; 0x17
    27a8:	b0 8f       	std	Z+24, r27	; 0x18
    27aa:	11 8e       	std	Z+25, r1	; 0x19
    27ac:	12 8e       	std	Z+26, r1	; 0x1a
    27ae:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    27b0:	14 8e       	std	Z+28, r1	; 0x1c
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    27b8:	b1 e4       	ldi	r27, 0x41	; 65
    27ba:	85 8f       	std	Z+29, r24	; 0x1d
    27bc:	96 8f       	std	Z+30, r25	; 0x1e
    27be:	a7 8f       	std	Z+31, r26	; 0x1f
    27c0:	b0 a3       	std	Z+32, r27	; 0x20
    27c2:	87 e0       	ldi	r24, 0x07	; 7
    27c4:	90 e0       	ldi	r25, 0x00	; 0
				compass.setPid(2.0,0,30);
				robotState = moving;
    27c6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    27ca:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    27ce:	44 e6       	ldi	r20, 0x64	; 100
    27d0:	50 e0       	ldi	r21, 0x00	; 0
				Move_Yaxis(Throwingzone2.y+50, Front, LZ2toTZ2);
    27d2:	62 e0       	ldi	r22, 0x02	; 2
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	80 ed       	ldi	r24, 0xD0	; 208
    27d8:	97 e0       	ldi	r25, 0x07	; 7
    27da:	2d da       	rcall	.-2982   	; 0x1c36 <_Z10Move_Yaxisiij>
    27dc:	8e eb       	ldi	r24, 0xBE	; 190
    27de:	92 e0       	ldi	r25, 0x02	; 2
    27e0:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				//movy(Throwingzone2.y, Front,LZ2toTZ2);
			
				if(abs(encoderY.getdistance()) >=1200){
    27e4:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    27e8:	9b 01       	movw	r18, r22
    27ea:	77 23       	and	r23, r23
    27ec:	24 f4       	brge	.+8      	; 0x27f6 <__stack+0x5f7>
    27ee:	22 27       	eor	r18, r18
    27f0:	33 27       	eor	r19, r19
    27f2:	26 1b       	sub	r18, r22
    27f4:	37 0b       	sbc	r19, r23
    27f6:	20 3b       	cpi	r18, 0xB0	; 176
    27f8:	34 40       	sbci	r19, 0x04	; 4
    27fa:	0c f1       	brlt	.+66     	; 0x283e <__stack+0x63f>
    27fc:	78 94       	sei
    27fe:	e8 e6       	ldi	r30, 0x68	; 104
    2800:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2802:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    2804:	84 60       	ori	r24, 0x04	; 4
    2806:	80 83       	st	Z, r24
    2808:	ed e6       	ldi	r30, 0x6D	; 109
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    280e:	80 68       	ori	r24, 0x80	; 128
    2810:	80 83       	st	Z, r24
    2812:	15 c0       	rjmp	.+42     	; 0x283e <__stack+0x63f>
    2814:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <task6>
    2818:	88 23       	and	r24, r24
				}
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
    281a:	89 f0       	breq	.+34     	; 0x283e <__stack+0x63f>
    281c:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <task7>
    2820:	81 11       	cpse	r24, r1
    2822:	0d c0       	rjmp	.+26     	; 0x283e <__stack+0x63f>
    2824:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2828:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    282c:	06 97       	sbiw	r24, 0x06	; 6
    282e:	39 f4       	brne	.+14     	; 0x283e <__stack+0x63f>
    2830:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2834:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2838:	07 97       	sbiw	r24, 0x07	; 7
    283a:	09 f4       	brne	.+2      	; 0x283e <__stack+0x63f>
    283c:	8a c2       	rjmp	.+1300   	; 0x2d52 <__stack+0xb53>
    283e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2842:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
				//uart3_putc('2');
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
    2846:	03 97       	sbiw	r24, 0x03	; 3
    2848:	19 f5       	brne	.+70     	; 0x2890 <__stack+0x691>
    284a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    284e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2852:	08 97       	sbiw	r24, 0x08	; 8
    2854:	e9 f4       	brne	.+58     	; 0x2890 <__stack+0x691>
    2856:	99 c2       	rjmp	.+1330   	; 0x2d8a <__stack+0xb8b>
    2858:	82 e3       	ldi	r24, 0x32	; 50
    285a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
				velocity_robot[0] =0;
				velocity_robot[1]=0;
				Hold_Position();
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
				{
					uart3_putc('2');
    285e:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
    2862:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2866:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    286a:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    286e:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <_b_Transmit_once>
    2872:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z10uart3_getcv>
					encoderX.resetCount();
					encoderY.resetCount();
					_b_Transmit_once = false;
    2876:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <receiveAck>
				}
				
				receiveAck = uart3_getc();
    287a:	87 36       	cpi	r24, 0x67	; 103
    287c:	49 f4       	brne	.+18     	; 0x2890 <__stack+0x691>
    287e:	81 e0       	ldi	r24, 0x01	; 1
				if(receiveAck == 'g'){
    2880:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <backtoLZ2>
					backtoLZ2 = true;
    2884:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <GoThrowingZone3>
    2888:	80 e2       	ldi	r24, 0x20	; 32
					GoThrowingZone3 = false;
    288a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <receiveAck>
					receiveAck = ' ';
    288e:	05 c0       	rjmp	.+10     	; 0x289a <__stack+0x69b>
    2890:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <backtoLZ2>
    2894:	88 23       	and	r24, r24
				}
			}
			///if acknowledge received from throwing mechanism after throwing then back to loading zone 2
			if(backtoLZ2 && task6 && !task7){
    2896:	09 f4       	brne	.+2      	; 0x289a <__stack+0x69b>
    2898:	48 c0       	rjmp	.+144    	; 0x292a <__stack+0x72b>
    289a:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <task6>
    289e:	88 23       	and	r24, r24
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <__stack+0x6a5>
    28a2:	43 c0       	rjmp	.+134    	; 0x292a <__stack+0x72b>
    28a4:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <task7>
    28a8:	81 11       	cpse	r24, r1
    28aa:	43 c0       	rjmp	.+134    	; 0x2932 <__stack+0x733>
    28ac:	ed e6       	ldi	r30, 0x6D	; 109
    28ae:	f3 e0       	ldi	r31, 0x03	; 3
    28b0:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a0 e0       	ldi	r26, 0x00	; 0
    28b6:	b0 e4       	ldi	r27, 0x40	; 64
    28b8:	85 8b       	std	Z+21, r24	; 0x15
    28ba:	96 8b       	std	Z+22, r25	; 0x16
    28bc:	a7 8b       	std	Z+23, r26	; 0x17
    28be:	b0 8f       	std	Z+24, r27	; 0x18
    28c0:	11 8e       	std	Z+25, r1	; 0x19
    28c2:	12 8e       	std	Z+26, r1	; 0x1a
    28c4:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    28c6:	14 8e       	std	Z+28, r1	; 0x1c
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    28ce:	b1 e4       	ldi	r27, 0x41	; 65
    28d0:	85 8f       	std	Z+29, r24	; 0x1d
    28d2:	96 8f       	std	Z+30, r25	; 0x1e
    28d4:	a7 8f       	std	Z+31, r26	; 0x1f
    28d6:	b0 a3       	std	Z+32, r27	; 0x20
    28d8:	44 e6       	ldi	r20, 0x64	; 100
    28da:	50 e0       	ldi	r21, 0x00	; 0
					//if(abs(encoderX.getdistance()) >= 400){
						//linetrackerXjunctionWatch();
					//}
				//}
				//else{
					Move_Yaxis(Throwingzone2.y-25, Back, LZ2toTZ2);
    28dc:	63 e0       	ldi	r22, 0x03	; 3
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	85 e8       	ldi	r24, 0x85	; 133
    28e2:	97 e0       	ldi	r25, 0x07	; 7
    28e4:	a8 d9       	rcall	.-3248   	; 0x1c36 <_Z10Move_Yaxisiij>
    28e6:	87 e0       	ldi	r24, 0x07	; 7
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
					//movy(Throwingzone2.y,Back,TZ2toLZ2);
					robotState = moving;
    28ee:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    28f2:	8e eb       	ldi	r24, 0xBE	; 190
    28f4:	92 e0       	ldi	r25, 0x02	; 2
    28f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
			
					if(abs(encoderY.getdistance()) >= 1200){
    28fa:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    28fe:	9b 01       	movw	r18, r22
    2900:	77 23       	and	r23, r23
    2902:	24 f4       	brge	.+8      	; 0x290c <__stack+0x70d>
    2904:	22 27       	eor	r18, r18
    2906:	33 27       	eor	r19, r19
    2908:	26 1b       	sub	r18, r22
    290a:	37 0b       	sbc	r19, r23
    290c:	20 3b       	cpi	r18, 0xB0	; 176
    290e:	34 40       	sbci	r19, 0x04	; 4
    2910:	ec f0       	brlt	.+58     	; 0x294c <__stack+0x74d>
    2912:	78 94       	sei
    2914:	e8 e6       	ldi	r30, 0x68	; 104
    2916:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2918:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    291a:	84 60       	ori	r24, 0x04	; 4
    291c:	80 83       	st	Z, r24
    291e:	ed e6       	ldi	r30, 0x6D	; 109
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    2924:	80 68       	ori	r24, 0x80	; 128
    2926:	80 83       	st	Z, r24
    2928:	11 c0       	rjmp	.+34     	; 0x294c <__stack+0x74d>
    292a:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <task7>
    292e:	88 23       	and	r24, r24
				//uart0_puts("\r\n");
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
    2930:	69 f0       	breq	.+26     	; 0x294c <__stack+0x74d>
    2932:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2936:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    293a:	07 97       	sbiw	r24, 0x07	; 7
    293c:	39 f4       	brne	.+14     	; 0x294c <__stack+0x74d>
    293e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2942:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    2946:	03 97       	sbiw	r24, 0x03	; 3
    2948:	09 f4       	brne	.+2      	; 0x294c <__stack+0x74d>
    294a:	2c c2       	rjmp	.+1112   	; 0x2da4 <__stack+0xba5>
    294c:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <GoThrowingZone3>
    2950:	88 23       	and	r24, r24
				ShuttleCockArmGone = false;
				backtoLZ2 = false;
			}
			
			/*if golden rack is given to automatic robot and says goto throwingzone 1*/
			if(GoThrowingZone3 && !task8){
    2952:	09 f4       	brne	.+2      	; 0x2956 <__stack+0x757>
    2954:	50 c0       	rjmp	.+160    	; 0x29f6 <__stack+0x7f7>
    2956:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <task8>
    295a:	81 11       	cpse	r24, r1
    295c:	50 c0       	rjmp	.+160    	; 0x29fe <__stack+0x7ff>
    295e:	cd e6       	ldi	r28, 0x6D	; 109
    2960:	d3 e0       	ldi	r29, 0x03	; 3
    2962:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e4       	ldi	r27, 0x40	; 64
    296a:	8d 8b       	std	Y+21, r24	; 0x15
    296c:	9e 8b       	std	Y+22, r25	; 0x16
    296e:	af 8b       	std	Y+23, r26	; 0x17
    2970:	b8 8f       	std	Y+24, r27	; 0x18
    2972:	19 8e       	std	Y+25, r1	; 0x19
    2974:	1a 8e       	std	Y+26, r1	; 0x1a
    2976:	1b 8e       	std	Y+27, r1	; 0x1b
		ki = i;
    2978:	1c 8e       	std	Y+28, r1	; 0x1c
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    2980:	b1 e4       	ldi	r27, 0x41	; 65
    2982:	8d 8f       	std	Y+29, r24	; 0x1d
    2984:	9e 8f       	std	Y+30, r25	; 0x1e
    2986:	af 8f       	std	Y+31, r26	; 0x1f
    2988:	b8 a3       	std	Y+32, r27	; 0x20
    298a:	89 e8       	ldi	r24, 0x89	; 137
    298c:	92 e0       	ldi	r25, 0x02	; 2
				compass.setPid(2.0,0,30);//2.0
				uart0_puts("going tz3 \t");
    298e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_Z10uart0_putsPKc>
    2992:	85 eb       	ldi	r24, 0xB5	; 181
    2994:	90 e0       	ldi	r25, 0x00	; 0
				compass.SETPOINT = 181;
    2996:	9f 87       	std	Y+15, r25	; 0x0f
    2998:	8e 87       	std	Y+14, r24	; 0x0e
    299a:	4a ea       	ldi	r20, 0xAA	; 170
    299c:	50 e0       	ldi	r21, 0x00	; 0
				Move_Yaxis(Throwingzone3.y-25, Front, LZ2toTZ3);
    299e:	62 e0       	ldi	r22, 0x02	; 2
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	8d ec       	ldi	r24, 0xCD	; 205
    29a4:	94 e1       	ldi	r25, 0x14	; 20
    29a6:	47 d9       	rcall	.-3442   	; 0x1c36 <_Z10Move_Yaxisiij>
    29a8:	87 e0       	ldi	r24, 0x07	; 7
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				//movy(5300,Front,LZ2toTZ3);
				robotState = moving;
    29b0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    29b4:	8e eb       	ldi	r24, 0xBE	; 190
    29b6:	92 e0       	ldi	r25, 0x02	; 2
    29b8:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				if(abs(encoderY.getdistance()) >= 4000){
    29bc:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    29c0:	9b 01       	movw	r18, r22
    29c2:	77 23       	and	r23, r23
    29c4:	24 f4       	brge	.+8      	; 0x29ce <__stack+0x7cf>
    29c6:	22 27       	eor	r18, r18
    29c8:	33 27       	eor	r19, r19
    29ca:	26 1b       	sub	r18, r22
    29cc:	37 0b       	sbc	r19, r23
    29ce:	20 3a       	cpi	r18, 0xA0	; 160
    29d0:	3f 40       	sbci	r19, 0x0F	; 15
    29d2:	0c f4       	brge	.+2      	; 0x29d6 <__stack+0x7d7>
    29d4:	3d c0       	rjmp	.+122    	; 0x2a50 <__stack+0x851>
    29d6:	78 94       	sei
    29d8:	e8 e6       	ldi	r30, 0x68	; 104
    29da:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    29dc:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    29de:	84 60       	ori	r24, 0x04	; 4
    29e0:	80 83       	st	Z, r24
    29e2:	ed e6       	ldi	r30, 0x6D	; 109
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    29e8:	80 68       	ori	r24, 0x80	; 128
    29ea:	80 83       	st	Z, r24
    29ec:	85 e9       	ldi	r24, 0x95	; 149
    29ee:	92 e0       	ldi	r25, 0x02	; 2
    29f0:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <_Z10uart0_putsPKc>
					linetrackerYjunctionWatch();	
					uart0_puts("interrupt on");
    29f4:	2d c0       	rjmp	.+90     	; 0x2a50 <__stack+0x851>
    29f6:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <task8>
    29fa:	88 23       	and	r24, r24
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
    29fc:	49 f1       	breq	.+82     	; 0x2a50 <__stack+0x851>
    29fe:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2a02:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    2a06:	06 97       	sbiw	r24, 0x06	; 6
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <__stack+0x80d>
    2a0a:	4f c2       	rjmp	.+1182   	; 0x2eaa <__stack+0xcab>
    2a0c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2a10:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2a14:	07 97       	sbiw	r24, 0x07	; 7
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <__stack+0x81b>
    2a18:	48 c2       	rjmp	.+1168   	; 0x2eaa <__stack+0xcab>
    2a1a:	e7 c1       	rjmp	.+974    	; 0x2dea <__stack+0xbeb>
    2a1c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2a20:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2a24:	08 97       	sbiw	r24, 0x08	; 8
    2a26:	a1 f4       	brne	.+40     	; 0x2a50 <__stack+0x851>
    2a28:	fe c1       	rjmp	.+1020   	; 0x2e26 <__stack+0xc27>
    2a2a:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_b_Transmit_once>
    2a2e:	81 11       	cpse	r24, r1
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2a30:	00 c2       	rjmp	.+1024   	; 0x2e32 <__stack+0xc33>
    2a32:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_Z10uart3_getcv>
    2a36:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <receiveAck>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
					_b_Transmit_once = false;
				}
				receiveAck = uart3_getc();
    2a3a:	87 36       	cpi	r24, 0x67	; 103
    2a3c:	49 f4       	brne	.+18     	; 0x2a50 <__stack+0x851>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
				if(receiveAck == 'g'){
    2a40:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <backtoLZ2>
					backtoLZ2 = true;
    2a44:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <GoThrowingZone3>
    2a48:	80 e2       	ldi	r24, 0x20	; 32
					GoThrowingZone3 = false;
    2a4a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <receiveAck>
					receiveAck = ' ';
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <__stack+0x85b>
    2a50:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <backtoLZ2>
    2a54:	88 23       	and	r24, r24
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ2 && task8 && !task9){
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <__stack+0x85b>
    2a58:	41 c0       	rjmp	.+130    	; 0x2adc <__stack+0x8dd>
    2a5a:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <task8>
    2a5e:	88 23       	and	r24, r24
    2a60:	e9 f1       	breq	.+122    	; 0x2adc <__stack+0x8dd>
    2a62:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <task9>
    2a66:	81 11       	cpse	r24, r1
    2a68:	3e c0       	rjmp	.+124    	; 0x2ae6 <__stack+0x8e7>
    2a6a:	ed e6       	ldi	r30, 0x6D	; 109
    2a6c:	f3 e0       	ldi	r31, 0x03	; 3
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e0       	ldi	r26, 0x00	; 0
    2a74:	b0 e4       	ldi	r27, 0x40	; 64
    2a76:	85 8b       	std	Z+21, r24	; 0x15
    2a78:	96 8b       	std	Z+22, r25	; 0x16
    2a7a:	a7 8b       	std	Z+23, r26	; 0x17
    2a7c:	b0 8f       	std	Z+24, r27	; 0x18
    2a7e:	11 8e       	std	Z+25, r1	; 0x19
    2a80:	12 8e       	std	Z+26, r1	; 0x1a
    2a82:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    2a84:	14 8e       	std	Z+28, r1	; 0x1c
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    2a8c:	b1 e4       	ldi	r27, 0x41	; 65
    2a8e:	85 8f       	std	Z+29, r24	; 0x1d
    2a90:	96 8f       	std	Z+30, r25	; 0x1e
    2a92:	a7 8f       	std	Z+31, r26	; 0x1f
    2a94:	b0 a3       	std	Z+32, r27	; 0x20
    2a96:	87 e0       	ldi	r24, 0x07	; 7
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				////uart0_puts("back to lz2\t");
				compass.setPid(2.0,0,30);//2.0
				
					//movy(5300,Back,LZ2toTZ3);
					robotState = moving;
    2a9e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2aa2:	8e eb       	ldi	r24, 0xBE	; 190
    2aa4:	92 e0       	ldi	r25, 0x02	; 2
    2aa6:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
					if(abs(encoderY.getdistance()) >= 4000){
    2aaa:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    2aae:	9b 01       	movw	r18, r22
    2ab0:	77 23       	and	r23, r23
    2ab2:	24 f4       	brge	.+8      	; 0x2abc <__stack+0x8bd>
    2ab4:	22 27       	eor	r18, r18
    2ab6:	33 27       	eor	r19, r19
    2ab8:	26 1b       	sub	r18, r22
    2aba:	37 0b       	sbc	r19, r23
    2abc:	20 3a       	cpi	r18, 0xA0	; 160
    2abe:	3f 40       	sbci	r19, 0x0F	; 15
    2ac0:	0c f4       	brge	.+2      	; 0x2ac4 <__stack+0x8c5>
    2ac2:	fb c1       	rjmp	.+1014   	; 0x2eba <__stack+0xcbb>
    2ac4:	78 94       	sei
    2ac6:	e8 e6       	ldi	r30, 0x68	; 104
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    2aca:	80 81       	ld	r24, Z
	PCICR |= (1<<PCIE2);
    2acc:	84 60       	ori	r24, 0x04	; 4
    2ace:	80 83       	st	Z, r24
    2ad0:	ed e6       	ldi	r30, 0x6D	; 109
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
	PCMSK2 |= (1<<PCINT23);
    2ad6:	80 68       	ori	r24, 0x80	; 128
    2ad8:	80 83       	st	Z, r24
    2ada:	ef c1       	rjmp	.+990    	; 0x2eba <__stack+0xcbb>
    2adc:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <task9>
    2ae0:	88 23       	and	r24, r24
					}
				////uart0_puts("\r\n");
			}
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6 <__stack+0x8e7>
    2ae4:	ea c1       	rjmp	.+980    	; 0x2eba <__stack+0xcbb>
    2ae6:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    2aea:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    2aee:	07 97       	sbiw	r24, 0x07	; 7
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <__stack+0x8f5>
    2af2:	e3 c1       	rjmp	.+966    	; 0x2eba <__stack+0xcbb>
    2af4:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2af8:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
    2afc:	04 97       	sbiw	r24, 0x04	; 4
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <__stack+0x903>
    2b00:	dc c1       	rjmp	.+952    	; 0x2eba <__stack+0xcbb>
    2b02:	9d c1       	rjmp	.+826    	; 0x2e3e <__stack+0xc3f>
    2b04:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <task4>
    2b08:	81 11       	cpse	r24, r1
	}
	
	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    2b0a:	92 cb       	rjmp	.-2268   	; 0x2230 <__stack+0x31>
    2b0c:	9e cb       	rjmp	.-2244   	; 0x224a <__stack+0x4b>
    2b0e:	85 e0       	ldi	r24, 0x05	; 5
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN)) && !alwaysTZ1){
				/*go directly to loading zone 2 and manual robot is waiting there*/
				where = inLZ1;
    2b16:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <gotoLZ2>
				gotoLZ2 = true;
    2b20:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ShuttleCockGiven>
				ShuttleCockGiven = true;	
    2b24:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <ShuttleCockArmGone>
				ShuttleCockArmGone = true;
    2b28:	c6 cb       	rjmp	.-2164   	; 0x22b6 <__stack+0xb7>
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <GoThrowingZone1>
			
			/*if there is manual robot infront of automatic robot*/
			
			else{
				/*if there is manual robot ahead of automatic robot then goto throwing zone1*/
				GoThrowingZone1 = true;
    2b30:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <task4>
				task3 = task4 = false;
    2b34:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <task3>
    2b38:	94 da       	rcall	.-2776   	; 0x2062 <_Z14updateZoneflagv>
    2b3a:	bd cb       	rjmp	.-2182   	; 0x22b6 <__stack+0xb7>
				updateZoneflag();
    2b3c:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <alwaysTZ2>
    2b40:	81 11       	cpse	r24, r1
				updateZoneflag();
				Hold_Position();
 			}
			//if always throw from throwing zone 2
			//automatic robot must force to know there is manual robot ahead.
			else if(alwaysTZ2){
    2b42:	ae cb       	rjmp	.-2212   	; 0x22a0 <__stack+0xa1>
    2b44:	b3 cb       	rjmp	.-2202   	; 0x22ac <__stack+0xad>
    2b46:	ed e6       	ldi	r30, 0x6D	; 109
    2b48:	f3 e0       	ldi	r31, 0x03	; 3
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 e0       	ldi	r26, 0x00	; 0
    2b50:	b0 e4       	ldi	r27, 0x40	; 64
    2b52:	85 8b       	std	Z+21, r24	; 0x15
    2b54:	96 8b       	std	Z+22, r25	; 0x16
    2b56:	a7 8b       	std	Z+23, r26	; 0x17
    2b58:	b0 8f       	std	Z+24, r27	; 0x18
    2b5a:	11 8e       	std	Z+25, r1	; 0x19
    2b5c:	12 8e       	std	Z+26, r1	; 0x1a
    2b5e:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    2b60:	14 8e       	std	Z+28, r1	; 0x1c
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    2b68:	b1 e4       	ldi	r27, 0x41	; 65
    2b6a:	85 8f       	std	Z+29, r24	; 0x1d
    2b6c:	96 8f       	std	Z+30, r25	; 0x1e
    2b6e:	a7 8f       	std	Z+31, r26	; 0x1f
    2b70:	b0 a3       	std	Z+32, r27	; 0x20
    2b72:	48 ec       	ldi	r20, 0xC8	; 200
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	62 e0       	ldi	r22, 0x02	; 2
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point && (normalGame||alwaysTZ1)){	
		compass.setPid(2.0,0,30);
		//uart0_puts("hello\r\n");
		movx(Throwingzone1.x,Front,STARTZONEtoCORNER);
    2b78:	70 e0       	ldi	r23, 0x00	; 0
    2b7a:	88 ef       	ldi	r24, 0xF8	; 248
    2b7c:	91 e1       	ldi	r25, 0x11	; 17
    2b7e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_Z4movxiij>
    2b82:	87 e0       	ldi	r24, 0x07	; 7
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		//movDegree(8);
		robotState = moving;
    2b8a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2b8e:	86 ec       	ldi	r24, 0xC6	; 198
    2b90:	92 e0       	ldi	r25, 0x02	; 2
    2b92:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
		//uart0_puts("going ahead \t");
		if(abs(encoderX.getdistance()) >= 4400){
    2b96:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    2b9a:	9b 01       	movw	r18, r22
    2b9c:	77 23       	and	r23, r23
    2b9e:	24 f4       	brge	.+8      	; 0x2ba8 <__stack+0x9a9>
    2ba0:	22 27       	eor	r18, r18
    2ba2:	33 27       	eor	r19, r19
    2ba4:	26 1b       	sub	r18, r22
    2ba6:	37 0b       	sbc	r19, r23
    2ba8:	20 33       	cpi	r18, 0x30	; 48
    2baa:	31 41       	sbci	r19, 0x11	; 17
    2bac:	0c f0       	brlt	.+2      	; 0x2bb0 <__stack+0x9b1>
    2bae:	97 cb       	rjmp	.-2258   	; 0x22de <__stack+0xdf>
    2bb0:	d6 cc       	rjmp	.-1620   	; 0x255e <__stack+0x35f>
    2bb2:	ed e6       	ldi	r30, 0x6D	; 109
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2bb8:	8f 77       	andi	r24, 0x7F	; 127
    2bba:	80 83       	st	Z, r24
    2bbc:	88 e6       	ldi	r24, 0x68	; 104
    2bbe:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
		linetrackerYjunctionWatchOff();
		uart3_putc('h');
    2bc2:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <startingAtFront>
    2bc6:	86 e0       	ldi	r24, 0x06	; 6
		startingAtFront = false;
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
		where = inLZ2;
    2bce:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2bd2:	88 e0       	ldi	r24, 0x08	; 8
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
		robotState = notmoving;
    2bda:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2bde:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2be2:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
		BrakeMotor();
    2be6:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2bea:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2bee:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2bf2:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <directlyLZ2>
    2bf6:	81 11       	cpse	r24, r1
		encoderX.resetCount();
		encoderY.resetCount();
		if(directlyLZ2){
    2bf8:	63 cc       	rjmp	.-1850   	; 0x24c0 <__stack+0x2c1>
    2bfa:	70 cc       	rjmp	.-1824   	; 0x24dc <__stack+0x2dd>
    2bfc:	87 e0       	ldi	r24, 0x07	; 7
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
	if(ShuttleCockGiven && ShuttleCockArmGone)
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
				robotState = moving;
    2c04:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2c08:	ed e6       	ldi	r30, 0x6D	; 109
    2c0a:	f3 e0       	ldi	r31, 0x03	; 3
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a0 e0       	ldi	r26, 0x00	; 0
    2c12:	b0 e4       	ldi	r27, 0x40	; 64
    2c14:	85 8b       	std	Z+21, r24	; 0x15
    2c16:	96 8b       	std	Z+22, r25	; 0x16
    2c18:	a7 8b       	std	Z+23, r26	; 0x17
    2c1a:	b0 8f       	std	Z+24, r27	; 0x18
    2c1c:	11 8e       	std	Z+25, r1	; 0x19
    2c1e:	12 8e       	std	Z+26, r1	; 0x1a
    2c20:	13 8e       	std	Z+27, r1	; 0x1b
		ki = i;
    2c22:	14 8e       	std	Z+28, r1	; 0x1c
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	a0 ef       	ldi	r26, 0xF0	; 240
		kd = d;
    2c2a:	b1 e4       	ldi	r27, 0x41	; 65
    2c2c:	85 8f       	std	Z+29, r24	; 0x1d
    2c2e:	96 8f       	std	Z+30, r25	; 0x1e
    2c30:	a7 8f       	std	Z+31, r26	; 0x1f
    2c32:	b0 a3       	std	Z+32, r27	; 0x20
    2c34:	44 e6       	ldi	r20, 0x64	; 100
    2c36:	50 e0       	ldi	r21, 0x00	; 0
				compass.setPid(2.0,0,30);
				Move_Yaxis(Throwingzone1.y+50,Front,LZ1toTZ1);
    2c38:	62 e0       	ldi	r22, 0x02	; 2
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	80 ed       	ldi	r24, 0xD0	; 208
    2c3e:	97 e0       	ldi	r25, 0x07	; 7
    2c40:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_Z10Move_Yaxisiij>
    2c44:	82 ea       	ldi	r24, 0xA2	; 162
    2c46:	92 e0       	ldi	r25, 0x02	; 2
				//movy(Throwingzone1.y,Front,LZ1toTZ1);
				uart0_puts("going tz1\t");
    2c48:	cb d7       	rcall	.+3990   	; 0x3be0 <_Z10uart0_putsPKc>
    2c4a:	8e eb       	ldi	r24, 0xBE	; 190
    2c4c:	92 e0       	ldi	r25, 0x02	; 2
    2c4e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7encoder11getdistanceEv>
				if(abs(encoderY.getdistance()) >= 1600){
    2c52:	0e 94 a7 20 	call	0x414e	; 0x414e <__fixsfsi>
    2c56:	9b 01       	movw	r18, r22
    2c58:	77 23       	and	r23, r23
    2c5a:	24 f4       	brge	.+8      	; 0x2c64 <__stack+0xa65>
    2c5c:	22 27       	eor	r18, r18
    2c5e:	33 27       	eor	r19, r19
    2c60:	26 1b       	sub	r18, r22
    2c62:	37 0b       	sbc	r19, r23
    2c64:	20 34       	cpi	r18, 0x40	; 64
    2c66:	36 40       	sbci	r19, 0x06	; 6
    2c68:	0c f0       	brlt	.+2      	; 0x2c6c <__stack+0xa6d>
    2c6a:	93 cc       	rjmp	.-1754   	; 0x2592 <__stack+0x393>
    2c6c:	af cc       	rjmp	.-1698   	; 0x25cc <__stack+0x3cd>
    2c6e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <task3>
    2c72:	88 23       	and	r24, r24
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <__stack+0xa79>
    2c76:	aa cc       	rjmp	.-1708   	; 0x25cc <__stack+0x3cd>
    2c78:	98 cc       	rjmp	.-1744   	; 0x25aa <__stack+0x3ab>
    2c7a:	ed e6       	ldi	r30, 0x6D	; 109
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2c80:	8f 77       	andi	r24, 0x7F	; 127
    2c82:	80 83       	st	Z, r24
    2c84:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2c88:	82 e0       	ldi	r24, 0x02	; 2
				linetrackerYjunctionWatchOff();
				//uart0_puts("reached throwing zone 1\r\n");
				BrakeMotor();
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
				//uart3_putc('1');
				where = inTZ1;
    2c90:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2c94:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
    2c98:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2c9c:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2ca0:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2ca4:	88 e0       	ldi	r24, 0x08	; 8
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2ca8:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2cac:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2cb0:	8d cc       	rjmp	.-1766   	; 0x25cc <__stack+0x3cd>
    2cb2:	a9 d9       	rcall	.-3246   	; 0x2006 <_Z13Hold_Positionv>
    2cb4:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_b_Transmit_once>
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
			//	uart0_puts("Throwing \r\n");
				Hold_Position();
    2cb8:	88 23       	and	r24, r24

				if(_b_Transmit_once)	//Stable_Robot() && 
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <__stack+0xabf>
    2cbc:	99 cc       	rjmp	.-1742   	; 0x25f0 <__stack+0x3f1>
    2cbe:	93 cc       	rjmp	.-1754   	; 0x25e6 <__stack+0x3e7>
    2cc0:	ed e6       	ldi	r30, 0x6D	; 109
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 77       	andi	r24, 0x7F	; 127
    2cc8:	80 83       	st	Z, r24
    2cca:	85 e0       	ldi	r24, 0x05	; 5
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
				//uart0_puts("REached loading zone 1\r\n");
				linetrackerYjunctionWatchOff();
				where = inLZ1;
    2cd2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2cd6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2cda:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
				BrakeMotor();
    2cde:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2ce2:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2ce6:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2cea:	88 e0       	ldi	r24, 0x08	; 8
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2cf2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2cf6:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <ShuttleCockGiven>
    2cfa:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <ShuttleCockArmGone>
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2cfe:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <backtoLZ1>
				ShuttleCockArmGone = false;
    2d02:	3c cd       	rjmp	.-1416   	; 0x277c <__stack+0x57d>
				backtoLZ1 = false;
    2d04:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <gotoLZ2>
    2d08:	81 11       	cpse	r24, r1
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    2d0a:	e3 cc       	rjmp	.-1594   	; 0x26d2 <__stack+0x4d3>
    2d0c:	26 cd       	rjmp	.-1460   	; 0x275a <__stack+0x55b>
    2d0e:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <gotoLZ2>
    2d12:	eb e6       	ldi	r30, 0x6B	; 107
			
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
				//uart0_puts("reached loading zone 2\r\n");
				gotoLZ2 = false;
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2d18:	8f 7e       	andi	r24, 0xEF	; 239
    2d1a:	80 83       	st	Z, r24
    2d1c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2d20:	86 e0       	ldi	r24, 0x06	; 6
				linetrackerXjunctionWatchOff();
				BrakeMotor();
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
				where = inLZ2;
    2d28:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2d2c:	88 e0       	ldi	r24, 0x08	; 8
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				robotState = notmoving;
    2d34:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2d38:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
    2d3c:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2d40:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2d44:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2d48:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <ShuttleCockGiven>
    2d4c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <ShuttleCockArmGone>
				encoderX.resetCount();
				encoderY.resetCount();
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2d50:	15 cd       	rjmp	.-1494   	; 0x277c <__stack+0x57d>
				ShuttleCockArmGone = false;
    2d52:	83 e0       	ldi	r24, 0x03	; 3
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
				//uart0_puts("Reached tz2 \r\n");
				where = inTZ2;
    2d5a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2d5e:	ed e6       	ldi	r30, 0x6D	; 109
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT23);
    2d64:	8f 77       	andi	r24, 0x7F	; 127
    2d66:	80 83       	st	Z, r24
    2d68:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
    2d6c:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2d70:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2d74:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2d78:	88 e0       	ldi	r24, 0x08	; 8
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
				linetrackerYjunctionWatchOff();
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2d7c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2d80:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2d84:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
				BrakeMotor();
    2d88:	5a cd       	rjmp	.-1356   	; 0x283e <__stack+0x63f>
    2d8a:	e5 ef       	ldi	r30, 0xF5	; 245
			if(where == inTZ2 && robotState == notmoving){
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				velocity_robot[0] =0;
    2d8c:	f3 e0       	ldi	r31, 0x03	; 3
    2d8e:	11 82       	std	Z+1, r1	; 0x01
    2d90:	10 82       	st	Z, r1
    2d92:	13 82       	std	Z+3, r1	; 0x03
				velocity_robot[1]=0;
    2d94:	12 82       	std	Z+2, r1	; 0x02
    2d96:	37 d9       	rcall	.-3474   	; 0x2006 <_Z13Hold_Positionv>
				Hold_Position();
    2d98:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <_b_Transmit_once>
				if(/*check_stable_robot &&Goto_Fence_And_Detect() &&*/ _b_Transmit_once)	//Stable_Robot() &&
    2d9c:	88 23       	and	r24, r24
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <__stack+0xba3>
    2da0:	68 cd       	rjmp	.-1328   	; 0x2872 <__stack+0x673>
    2da2:	5a cd       	rjmp	.-1356   	; 0x2858 <__stack+0x659>
    2da4:	30 d9       	rcall	.-3488   	; 0x2006 <_Z13Hold_Positionv>
    2da6:	ed e6       	ldi	r30, 0x6D	; 109
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
				Hold_Position();
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	8f 77       	andi	r24, 0x7F	; 127
    2dae:	80 83       	st	Z, r24
    2db0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2db4:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
				//uart0_puts("reached loading zone 2 \r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2db8:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2dbc:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2dc0:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2dc4:	86 e0       	ldi	r24, 0x06	; 6
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2dcc:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2dd0:	88 e0       	ldi	r24, 0x08	; 8
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				robotState = notmoving;
    2dd8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2ddc:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <ShuttleCockGiven>
    2de0:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <ShuttleCockArmGone>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2de4:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <backtoLZ2>
				ShuttleCockArmGone = false;
    2de8:	b1 cd       	rjmp	.-1182   	; 0x294c <__stack+0x74d>
				backtoLZ2 = false;
    2dea:	ed e6       	ldi	r30, 0x6D	; 109
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	8f 77       	andi	r24, 0x7F	; 127
    2df2:	80 83       	st	Z, r24
    2df4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2df8:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
				//uart0_puts("reached tz3\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2dfc:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2e00:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2e04:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2e08:	88 e0       	ldi	r24, 0x08	; 8
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    2e0c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    2e10:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2e14:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <GoThrowingZone3>
				GoThrowingZone3 = false;
    2e18:	84 e0       	ldi	r24, 0x04	; 4
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
				where = inTZ3;
    2e1c:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
    2e20:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2e24:	15 ce       	rjmp	.-982    	; 0x2a50 <__stack+0x851>
    2e26:	ef d8       	rcall	.-3618   	; 0x2006 <_Z13Hold_Positionv>
    2e28:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_Z21Goto_Fence_And_Detectv>
				//velocity_robot[0] = velocity_robot[1] = velocity_robot[2] = 0;
// 				if (!check_stable_robot)
// 				{
// 					check_stable_robot = Stable_Robot();
// 				}
				Hold_Position();
    2e2c:	81 11       	cpse	r24, r1
				if(Goto_Fence_And_Detect() && _b_Transmit_once )	//Stable_Robot() && 
    2e2e:	fd cd       	rjmp	.-1030   	; 0x2a2a <__stack+0x82b>
    2e30:	00 ce       	rjmp	.-1024   	; 0x2a32 <__stack+0x833>
    2e32:	83 e3       	ldi	r24, 0x33	; 51
    2e34:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <_Z10uart3_putch>
				{	
					//uart0_puts("below \r\n");
					uart3_putc('3');
    2e38:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <_b_Transmit_once>
    2e3c:	fa cd       	rjmp	.-1036   	; 0x2a32 <__stack+0x833>
					_b_Transmit_once = false;
    2e3e:	ed e6       	ldi	r30, 0x6D	; 109
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	8f 77       	andi	r24, 0x7F	; 127
    2e46:	80 83       	st	Z, r24
    2e48:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2e4c:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
				////uart0_puts("reached loading zone 2\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    2e50:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2e54:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2e58:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
    2e5c:	86 e0       	ldi	r24, 0x06	; 6
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <where+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    2e64:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <where>
    2e68:	88 e0       	ldi	r24, 0x08	; 8
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				robotState = notmoving;
    2e70:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    2e74:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <ShuttleCockGiven>
    2e78:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <ShuttleCockArmGone>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    2e7c:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <backtoLZ2>
				ShuttleCockArmGone = false;
    2e80:	1c c0       	rjmp	.+56     	; 0x2eba <__stack+0xcbb>
				backtoLZ2 = false;
    2e82:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <where>
    2e86:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <where+0x1>
		BrakeMotor();
		Hold_Position();
		encoderX.resetCount();
		encoderY.resetCount();
	}
	else if(where == inFirstloadingCorner && task2 && (directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && robotState == moving){
    2e8a:	21 30       	cpi	r18, 0x01	; 1
    2e8c:	31 05       	cpc	r19, r1
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <__stack+0xc93>
    2e90:	66 cb       	rjmp	.-2356   	; 0x255e <__stack+0x35f>
    2e92:	ff ca       	rjmp	.-2562   	; 0x2492 <__stack+0x293>
    2e94:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <directlyLZ2>
    2e98:	99 23       	and	r25, r25
			linetrackerXjunctionWatch();
			//uart0_puts("int on");
		}
		//uart0_puts("\r\n");
	}
	else if((directlyLZ2 || directlyTZ3 || LZ2ForTZ3 || alwaysTZ2) && !task1){
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <__stack+0xc9f>
    2e9c:	30 ca       	rjmp	.-2976   	; 0x22fe <__stack+0xff>
    2e9e:	3d ca       	rjmp	.-2950   	; 0x231a <__stack+0x11b>
    2ea0:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <directlyLZ2>
    2ea4:	91 11       	cpse	r25, r1
    2ea6:	67 ca       	rjmp	.-2866   	; 0x2376 <__stack+0x177>
    2ea8:	2a ca       	rjmp	.-2988   	; 0x22fe <__stack+0xff>
    2eaa:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <where>
    2eae:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <where+0x1>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    2eb2:	04 97       	sbiw	r24, 0x04	; 4
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <__stack+0xcb9>
    2eb6:	cc cd       	rjmp	.-1128   	; 0x2a50 <__stack+0x851>
    2eb8:	b1 cd       	rjmp	.-1182   	; 0x2a1c <__stack+0x81d>
    2eba:	df 91       	pop	r29
    2ebc:	cf 91       	pop	r28
    2ebe:	08 95       	ret

00002ec0 <__vector_9>:
//  	 	if(task7)	uart0_puts("7 \t");
//  	 	else        uart0_puts("0 \t");
//  		if(task8)	uart0_puts("8 \n");
//  		else        uart0_puts("0 \n");

}
    2ec0:	1f 92       	push	r1
    2ec2:	0f 92       	push	r0
    2ec4:	0f b6       	in	r0, 0x3f	; 63
}


/*When Junction on Linetracker X is detected*/
ISR(PCINT0_vect)		
{
    2ec6:	0f 92       	push	r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	0b b6       	in	r0, 0x3b	; 59
    2ecc:	0f 92       	push	r0
    2ece:	2f 93       	push	r18
    2ed0:	3f 93       	push	r19
    2ed2:	4f 93       	push	r20
    2ed4:	5f 93       	push	r21
    2ed6:	6f 93       	push	r22
    2ed8:	7f 93       	push	r23
    2eda:	8f 93       	push	r24
    2edc:	9f 93       	push	r25
    2ede:	af 93       	push	r26
    2ee0:	bf 93       	push	r27
    2ee2:	ef 93       	push	r30
    2ee4:	ff 93       	push	r31
	if(!task1){
    2ee6:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <task1>
    2eea:	81 11       	cpse	r24, r1
    2eec:	06 c0       	rjmp	.+12     	; 0x2efa <__vector_9+0x3a>
		task1 = true;
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <task1>
		//reached to corner of loading zone1
		FlagChangeSetpointCompass = true;
    2ef4:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <FlagChangeSetpointCompass>
    2ef8:	22 c0       	rjmp	.+68     	; 0x2f3e <__vector_9+0x7e>
	}
	else if(!task5){
    2efa:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <task5>
    2efe:	81 11       	cpse	r24, r1
    2f00:	08 c0       	rjmp	.+16     	; 0x2f12 <__vector_9+0x52>
		task5 = true;			//reached loading zone 2 from loading zone 1
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <task5>
		FlagChangeSetpointCompass = true;
    2f08:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <FlagChangeSetpointCompass>
		BrakeMotor();
    2f0c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2f10:	16 c0       	rjmp	.+44     	; 0x2f3e <__vector_9+0x7e>
	}
	else if(!xJunctionMeetFromTZ2){
    2f12:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <xJunctionMeetFromTZ2>
    2f16:	81 11       	cpse	r24, r1
    2f18:	12 c0       	rjmp	.+36     	; 0x2f3e <__vector_9+0x7e>
		xJunctionMeetFromTZ2 = true;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <xJunctionMeetFromTZ2>
		BrakeMotor();
    2f20:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT23);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    2f24:	eb e6       	ldi	r30, 0x6B	; 107
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	8f 7e       	andi	r24, 0xEF	; 239
    2f2c:	80 83       	st	Z, r24
    2f2e:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
    2f32:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
    2f36:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    2f3a:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
		linetrackerXjunctionWatchOff();
		encoderX.resetCount();
		encoderY.resetCount();
	}
}
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	7f 91       	pop	r23
    2f4c:	6f 91       	pop	r22
    2f4e:	5f 91       	pop	r21
    2f50:	4f 91       	pop	r20
    2f52:	3f 91       	pop	r19
    2f54:	2f 91       	pop	r18
    2f56:	0f 90       	pop	r0
    2f58:	0b be       	out	0x3b, r0	; 59
    2f5a:	0f 90       	pop	r0
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	0f 90       	pop	r0
    2f60:	1f 90       	pop	r1
    2f62:	18 95       	reti

00002f64 <__vector_11>:


/*When Junction on Linetracker Y is detected*/
ISR(PCINT2_vect)
{
    2f64:	1f 92       	push	r1
    2f66:	0f 92       	push	r0
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	0f 92       	push	r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	0b b6       	in	r0, 0x3b	; 59
    2f70:	0f 92       	push	r0
    2f72:	2f 93       	push	r18
    2f74:	3f 93       	push	r19
    2f76:	4f 93       	push	r20
    2f78:	5f 93       	push	r21
    2f7a:	6f 93       	push	r22
    2f7c:	7f 93       	push	r23
    2f7e:	8f 93       	push	r24
    2f80:	9f 93       	push	r25
    2f82:	af 93       	push	r26
    2f84:	bf 93       	push	r27
    2f86:	ef 93       	push	r30
    2f88:	ff 93       	push	r31
	if(!task2){
    2f8a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <task2>
    2f8e:	81 11       	cpse	r24, r1
    2f90:	06 c0       	rjmp	.+12     	; 0x2f9e <__vector_11+0x3a>
		task2 = true;		//reached to loading zone 1
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <task2>
		BrakeMotor();
    2f98:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2f9c:	41 c0       	rjmp	.+130    	; 0x3020 <__vector_11+0xbc>
	}
	else if(!task3){
    2f9e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <task3>
    2fa2:	81 11       	cpse	r24, r1
    2fa4:	08 c0       	rjmp	.+16     	; 0x2fb6 <__vector_11+0x52>
		_b_Transmit_once = true;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_b_Transmit_once>
		task3 = true;		//reached throwing zone 1
    2fac:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <task3>
		BrakeMotor();
    2fb0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2fb4:	35 c0       	rjmp	.+106    	; 0x3020 <__vector_11+0xbc>
	}
		
	else if(!task4){
    2fb6:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <task4>
    2fba:	81 11       	cpse	r24, r1
    2fbc:	06 c0       	rjmp	.+12     	; 0x2fca <__vector_11+0x66>
		task4 = true;		//reached loading zone 1 from throwing zone 1
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <task4>
		 BrakeMotor();
    2fc4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2fc8:	2b c0       	rjmp	.+86     	; 0x3020 <__vector_11+0xbc>
	}
	else if(!task6){
    2fca:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <task6>
    2fce:	81 11       	cpse	r24, r1
    2fd0:	08 c0       	rjmp	.+16     	; 0x2fe2 <__vector_11+0x7e>
		_b_Transmit_once = true;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_b_Transmit_once>
		task6 = true;		//reached throwing zone 2
    2fd8:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <task6>
		BrakeMotor();
    2fdc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2fe0:	1f c0       	rjmp	.+62     	; 0x3020 <__vector_11+0xbc>
	}
		
	else if(!task7){
    2fe2:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <task7>
    2fe6:	81 11       	cpse	r24, r1
    2fe8:	06 c0       	rjmp	.+12     	; 0x2ff6 <__vector_11+0x92>
		task7 = true;		//reached loading zone 2 from throwing zone 2
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <task7>
		BrakeMotor();
    2ff0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    2ff4:	15 c0       	rjmp	.+42     	; 0x3020 <__vector_11+0xbc>
	}
	else if(!task8){
    2ff6:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <task8>
    2ffa:	81 11       	cpse	r24, r1
    2ffc:	08 c0       	rjmp	.+16     	; 0x300e <__vector_11+0xaa>
		_b_Transmit_once = true;
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <_b_Transmit_once>
		task8 = true;		//reached throwing zone 3
    3004:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <task8>
		BrakeMotor();
    3008:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
    300c:	09 c0       	rjmp	.+18     	; 0x3020 <__vector_11+0xbc>
	}
	else if(!task9){
    300e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <task9>
    3012:	81 11       	cpse	r24, r1
    3014:	05 c0       	rjmp	.+10     	; 0x3020 <__vector_11+0xbc>
		task9 = true;		//reached loading zone 2 from throwing zone 3
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <task9>
		BrakeMotor();
    301c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z10BrakeMotorv>
	}
}
    3020:	ff 91       	pop	r31
    3022:	ef 91       	pop	r30
    3024:	bf 91       	pop	r27
    3026:	af 91       	pop	r26
    3028:	9f 91       	pop	r25
    302a:	8f 91       	pop	r24
    302c:	7f 91       	pop	r23
    302e:	6f 91       	pop	r22
    3030:	5f 91       	pop	r21
    3032:	4f 91       	pop	r20
    3034:	3f 91       	pop	r19
    3036:	2f 91       	pop	r18
    3038:	0f 90       	pop	r0
    303a:	0b be       	out	0x3b, r0	; 59
    303c:	0f 90       	pop	r0
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	0f 90       	pop	r0
    3042:	1f 90       	pop	r1
    3044:	18 95       	reti

00003046 <main>:
////////////////////////////////////////////

int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
	INPUT(SHUTTLECOCKPIN);
    3046:	aa e0       	ldi	r26, 0x0A	; 10
    3048:	b1 e0       	ldi	r27, 0x01	; 1
    304a:	8c 91       	ld	r24, X
    304c:	8f 7b       	andi	r24, 0xBF	; 191
    304e:	8c 93       	st	X, r24
	INPUT(ZONEPIN);
    3050:	8c 91       	ld	r24, X
    3052:	8f 7e       	andi	r24, 0xEF	; 239
    3054:	8c 93       	st	X, r24
 	SET(SHUTTLECOCKPIN);
    3056:	eb e0       	ldi	r30, 0x0B	; 11
    3058:	f1 e0       	ldi	r31, 0x01	; 1
    305a:	80 81       	ld	r24, Z
    305c:	80 64       	ori	r24, 0x40	; 64
    305e:	80 83       	st	Z, r24
 	SET(ZONEPIN);
    3060:	80 81       	ld	r24, Z
    3062:	80 61       	ori	r24, 0x10	; 16
    3064:	80 83       	st	Z, r24
	///////PULL DOWN RACK PIN 
	INPUT(RACKPIN);
    3066:	8c 91       	ld	r24, X
    3068:	8b 7f       	andi	r24, 0xFB	; 251
    306a:	8c 93       	st	X, r24
	CLEAR(RACKPIN);
    306c:	80 81       	ld	r24, Z
    306e:	8b 7f       	andi	r24, 0xFB	; 251
    3070:	80 83       	st	Z, r24
	
	///Turn internal pullup for limit switch pin
	INPUT(RIGHT_LIMIT_SW);
    3072:	e1 e0       	ldi	r30, 0x01	; 1
    3074:	f1 e0       	ldi	r31, 0x01	; 1
    3076:	80 81       	ld	r24, Z
    3078:	87 7f       	andi	r24, 0xF7	; 247
    307a:	80 83       	st	Z, r24
	INPUT(LEFT_LIMIT_SW);
    307c:	6b 98       	cbi	0x0d, 3	; 13
	SET(RIGHT_LIMIT_SW);
    307e:	e2 e0       	ldi	r30, 0x02	; 2
    3080:	f1 e0       	ldi	r31, 0x01	; 1
    3082:	80 81       	ld	r24, Z
    3084:	88 60       	ori	r24, 0x08	; 8
    3086:	80 83       	st	Z, r24
	SET(LEFT_LIMIT_SW);
    3088:	73 9a       	sbi	0x0e, 3	; 14
	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
	DDRK |= (1<<PK0);
    308a:	e7 e0       	ldi	r30, 0x07	; 7
    308c:	f1 e0       	ldi	r31, 0x01	; 1
    308e:	80 81       	ld	r24, Z
    3090:	81 60       	ori	r24, 0x01	; 1
    3092:	80 83       	st	Z, r24
	DDRK |= (1<<PK1);
    3094:	80 81       	ld	r24, Z
    3096:	82 60       	ori	r24, 0x02	; 2
    3098:	80 83       	st	Z, r24
	DDRK |= (1<<PK2);
    309a:	80 81       	ld	r24, Z
    309c:	84 60       	ori	r24, 0x04	; 4
    309e:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK0); 
    30a0:	e8 e0       	ldi	r30, 0x08	; 8
    30a2:	f1 e0       	ldi	r31, 0x01	; 1
    30a4:	80 81       	ld	r24, Z
    30a6:	8e 7f       	andi	r24, 0xFE	; 254
    30a8:	80 83       	st	Z, r24
	/// INITIALIZE ALL THE UART
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    30aa:	87 e6       	ldi	r24, 0x67	; 103
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	6a d5       	rcall	.+2772   	; 0x3b84 <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
    30b0:	89 e1       	ldi	r24, 0x19	; 25
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	3e d6       	rcall	.+3196   	; 0x3d32 <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(38400,F_CPU));
    30b6:	89 e1       	ldi	r24, 0x19	; 25
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	ca d6       	rcall	.+3476   	; 0x3e50 <_Z10uart3_initj>
	//INITIALIZE EVERYTHING ELSE

	initializeAll();
    30bc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z13initializeAllv>
	
	char rcvdata = 't';
	sei();
    30c0:	78 94       	sei
    30c2:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    30c6:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
	
	encoderY.resetCount();
	
    while (1) 
    {			
   		gorockthegamefield();
    30ca:	8c d8       	rcall	.-3816   	; 0x21e4 <_Z18gorockthegamefieldv>
    	calculatevel();
    30cc:	0e 94 12 08 	call	0x1024	; 0x1024 <_Z12calculatevelv>
    30d0:	fc cf       	rjmp	.-8      	; 0x30ca <main+0x84>

000030d2 <_GLOBAL__sub_I_compassPID>:
#include "hmccompass.h"
#include "MPU6050.h"
#include "General-function.h"


static MPU6050 mpu;
    30d2:	87 e3       	ldi	r24, 0x37	; 55
    30d4:	94 e0       	ldi	r25, 0x04	; 4
    30d6:	3d d0       	rcall	.+122    	; 0x3152 <_ZN7MPU6050C1Ev>
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    30d8:	ef ea       	ldi	r30, 0xAF	; 175
    30da:	f3 e0       	ldi	r31, 0x03	; 3
    30dc:	10 86       	std	Z+8, r1	; 0x08
    30de:	11 86       	std	Z+9, r1	; 0x09
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	80 8b       	std	Z+16, r24	; 0x10
    30e4:	ee e8       	ldi	r30, 0x8E	; 142
    30e6:	f3 e0       	ldi	r31, 0x03	; 3
    30e8:	10 86       	std	Z+8, r1	; 0x08
    30ea:	11 86       	std	Z+9, r1	; 0x09
    30ec:	80 8b       	std	Z+16, r24	; 0x10
    30ee:	ed e6       	ldi	r30, 0x6D	; 109
    30f0:	f3 e0       	ldi	r31, 0x03	; 3
    30f2:	10 86       	std	Z+8, r1	; 0x08
    30f4:	11 86       	std	Z+9, r1	; 0x09
    30f6:	80 8b       	std	Z+16, r24	; 0x10
    30f8:	ec e4       	ldi	r30, 0x4C	; 76
    30fa:	f3 e0       	ldi	r31, 0x03	; 3
    30fc:	10 86       	std	Z+8, r1	; 0x08
    30fe:	11 86       	std	Z+9, r1	; 0x09
    3100:	80 8b       	std	Z+16, r24	; 0x10
    3102:	eb e2       	ldi	r30, 0x2B	; 43
    3104:	f3 e0       	ldi	r31, 0x03	; 3
    3106:	10 86       	std	Z+8, r1	; 0x08
    3108:	11 86       	std	Z+9, r1	; 0x09
    310a:	80 8b       	std	Z+16, r24	; 0x10
    310c:	e6 e0       	ldi	r30, 0x06	; 6
    310e:	f3 e0       	ldi	r31, 0x03	; 3
    3110:	10 86       	std	Z+8, r1	; 0x08
    3112:	11 86       	std	Z+9, r1	; 0x09
    3114:	80 8b       	std	Z+16, r24	; 0x10
    3116:	e5 ee       	ldi	r30, 0xE5	; 229
    3118:	f2 e0       	ldi	r31, 0x02	; 2
    311a:	10 86       	std	Z+8, r1	; 0x08
    311c:	11 86       	std	Z+9, r1	; 0x09
    311e:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    3120:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <encoderX+0x1>
    3124:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <encoderX>
			Init_encoder_interrupt();
    3128:	86 ec       	ldi	r24, 0xC6	; 198
    312a:	92 e0       	ldi	r25, 0x02	; 2
    312c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    3130:	86 ec       	ldi	r24, 0xC6	; 198
    3132:	92 e0       	ldi	r25, 0x02	; 2
    3134:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    3138:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <__data_end+0x1>
    313c:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <__data_end>
			Init_encoder_interrupt();
    3140:	8e eb       	ldi	r24, 0xBE	; 190
    3142:	92 e0       	ldi	r25, 0x02	; 2
    3144:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    3148:	8e eb       	ldi	r24, 0xBE	; 190
    314a:	92 e0       	ldi	r25, 0x02	; 2
    314c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_ZN7encoder10Init_timerEv>
    3150:	08 95       	ret

00003152 <_ZN7MPU6050C1Ev>:

// Get current threshold value
uint8_t MPU6050::getThreshold(void)
{
	return actualThreshold;
}
    3152:	fc 01       	movw	r30, r24
    3154:	14 ae       	std	Z+60, r1	; 0x3c
    3156:	15 ae       	std	Z+61, r1	; 0x3d
    3158:	16 ae       	std	Z+62, r1	; 0x3e
    315a:	17 ae       	std	Z+63, r1	; 0x3f
    315c:	dc 01       	movw	r26, r24
    315e:	a0 5c       	subi	r26, 0xC0	; 192
    3160:	bf 4f       	sbci	r27, 0xFF	; 255
    3162:	1d 92       	st	X+, r1
    3164:	1d 92       	st	X+, r1
    3166:	1d 92       	st	X+, r1
    3168:	1c 92       	st	X, r1
    316a:	13 97       	sbiw	r26, 0x03	; 3
    316c:	14 96       	adiw	r26, 0x04	; 4
    316e:	1d 92       	st	X+, r1
    3170:	1d 92       	st	X+, r1
    3172:	1d 92       	st	X+, r1
    3174:	1c 92       	st	X, r1
    3176:	13 97       	sbiw	r26, 0x03	; 3
    3178:	d4 96       	adiw	r26, 0x34	; 52
    317a:	1c 92       	st	X, r1
    317c:	d0 97       	sbiw	r26, 0x30	; 48
    317e:	1d 92       	st	X+, r1
    3180:	1d 92       	st	X+, r1
    3182:	1d 92       	st	X+, r1
    3184:	1c 92       	st	X, r1
    3186:	13 97       	sbiw	r26, 0x03	; 3
    3188:	14 96       	adiw	r26, 0x04	; 4
    318a:	1d 92       	st	X+, r1
    318c:	1d 92       	st	X+, r1
    318e:	1d 92       	st	X+, r1
    3190:	1c 92       	st	X, r1
    3192:	13 97       	sbiw	r26, 0x03	; 3
    3194:	14 96       	adiw	r26, 0x04	; 4
    3196:	1d 92       	st	X+, r1
    3198:	1d 92       	st	X+, r1
    319a:	1d 92       	st	X+, r1
    319c:	1c 92       	st	X, r1
    319e:	13 97       	sbiw	r26, 0x03	; 3
    31a0:	10 aa       	std	Z+48, r1	; 0x30
    31a2:	11 aa       	std	Z+49, r1	; 0x31
    31a4:	12 aa       	std	Z+50, r1	; 0x32
    31a6:	13 aa       	std	Z+51, r1	; 0x33
    31a8:	14 aa       	std	Z+52, r1	; 0x34
    31aa:	15 aa       	std	Z+53, r1	; 0x35
    31ac:	16 aa       	std	Z+54, r1	; 0x36
    31ae:	17 aa       	std	Z+55, r1	; 0x37
    31b0:	10 ae       	std	Z+56, r1	; 0x38
    31b2:	11 ae       	std	Z+57, r1	; 0x39
    31b4:	12 ae       	std	Z+58, r1	; 0x3a
    31b6:	13 ae       	std	Z+59, r1	; 0x3b
    31b8:	94 96       	adiw	r26, 0x24	; 36
    31ba:	1d 92       	st	X+, r1
    31bc:	1d 92       	st	X+, r1
    31be:	1d 92       	st	X+, r1
    31c0:	1c 92       	st	X, r1
    31c2:	13 97       	sbiw	r26, 0x03	; 3
    31c4:	18 97       	sbiw	r26, 0x08	; 8
    31c6:	4f e3       	ldi	r20, 0x3F	; 63
    31c8:	5e e1       	ldi	r21, 0x1E	; 30
    31ca:	6a ef       	ldi	r22, 0xFA	; 250
    31cc:	7b e3       	ldi	r23, 0x3B	; 59
    31ce:	4d 93       	st	X+, r20
    31d0:	5d 93       	st	X+, r21
    31d2:	6d 93       	st	X+, r22
    31d4:	7c 93       	st	X, r23
    31d6:	13 97       	sbiw	r26, 0x03	; 3
    31d8:	e0 59       	subi	r30, 0x90	; 144
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 e4       	ldi	r24, 0x40	; 64
    31de:	9a ed       	ldi	r25, 0xDA	; 218
    31e0:	af e7       	ldi	r26, 0x7F	; 127
    31e2:	b8 e3       	ldi	r27, 0x38	; 56
    31e4:	80 83       	st	Z, r24
    31e6:	91 83       	std	Z+1, r25	; 0x01
    31e8:	a2 83       	std	Z+2, r26	; 0x02
    31ea:	b3 83       	std	Z+3, r27	; 0x03
    31ec:	08 95       	ret

000031ee <_ZN7MPU60504InitEv>:
    31ee:	2f ef       	ldi	r18, 0xFF	; 255
    31f0:	82 e5       	ldi	r24, 0x52	; 82
    31f2:	97 e0       	ldi	r25, 0x07	; 7
    31f4:	21 50       	subi	r18, 0x01	; 1
    31f6:	80 40       	sbci	r24, 0x00	; 0
    31f8:	90 40       	sbci	r25, 0x00	; 0
    31fa:	e1 f7       	brne	.-8      	; 0x31f4 <_ZN7MPU60504InitEv+0x6>
    31fc:	00 c0       	rjmp	.+0      	; 0x31fe <_ZN7MPU60504InitEv+0x10>
    31fe:	00 00       	nop
    3200:	80 ed       	ldi	r24, 0xD0	; 208
    3202:	ce d3       	rcall	.+1948   	; 0x39a0 <_Z9i2c_starth>
    3204:	8b e6       	ldi	r24, 0x6B	; 107
    3206:	39 d4       	rcall	.+2162   	; 0x3a7a <_Z9i2c_writeh>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	37 d4       	rcall	.+2158   	; 0x3a7a <_Z9i2c_writeh>
    320c:	f2 d3       	rcall	.+2020   	; 0x39f2 <_Z8i2c_stopv>
    320e:	80 ed       	ldi	r24, 0xD0	; 208
    3210:	c7 d3       	rcall	.+1934   	; 0x39a0 <_Z9i2c_starth>
    3212:	89 e1       	ldi	r24, 0x19	; 25
    3214:	32 d4       	rcall	.+2148   	; 0x3a7a <_Z9i2c_writeh>
    3216:	89 e1       	ldi	r24, 0x19	; 25
    3218:	30 d4       	rcall	.+2144   	; 0x3a7a <_Z9i2c_writeh>
    321a:	eb d3       	rcall	.+2006   	; 0x39f2 <_Z8i2c_stopv>
    321c:	80 ed       	ldi	r24, 0xD0	; 208
    321e:	c0 d3       	rcall	.+1920   	; 0x39a0 <_Z9i2c_starth>
    3220:	8a e1       	ldi	r24, 0x1A	; 26
    3222:	2b d4       	rcall	.+2134   	; 0x3a7a <_Z9i2c_writeh>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	29 d4       	rcall	.+2130   	; 0x3a7a <_Z9i2c_writeh>
    3228:	e4 d3       	rcall	.+1992   	; 0x39f2 <_Z8i2c_stopv>
    322a:	80 ed       	ldi	r24, 0xD0	; 208
    322c:	b9 d3       	rcall	.+1906   	; 0x39a0 <_Z9i2c_starth>
    322e:	8b e1       	ldi	r24, 0x1B	; 27
    3230:	24 d4       	rcall	.+2120   	; 0x3a7a <_Z9i2c_writeh>
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	22 d4       	rcall	.+2116   	; 0x3a7a <_Z9i2c_writeh>
    3236:	dd d3       	rcall	.+1978   	; 0x39f2 <_Z8i2c_stopv>
    3238:	80 ed       	ldi	r24, 0xD0	; 208
    323a:	b2 d3       	rcall	.+1892   	; 0x39a0 <_Z9i2c_starth>
    323c:	88 e3       	ldi	r24, 0x38	; 56
    323e:	1d d4       	rcall	.+2106   	; 0x3a7a <_Z9i2c_writeh>
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	1b d4       	rcall	.+2102   	; 0x3a7a <_Z9i2c_writeh>
    3244:	d6 d3       	rcall	.+1964   	; 0x39f2 <_Z8i2c_stopv>
    3246:	80 ed       	ldi	r24, 0xD0	; 208
    3248:	ab d3       	rcall	.+1878   	; 0x39a0 <_Z9i2c_starth>
    324a:	8c e1       	ldi	r24, 0x1C	; 28
    324c:	16 d4       	rcall	.+2092   	; 0x3a7a <_Z9i2c_writeh>
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	14 d4       	rcall	.+2088   	; 0x3a7a <_Z9i2c_writeh>
    3252:	cf c3       	rjmp	.+1950   	; 0x39f2 <_Z8i2c_stopv>
    3254:	08 95       	ret

00003256 <_ZN7MPU605017startReadLocationEh>:
    3256:	cf 93       	push	r28
    3258:	c6 2f       	mov	r28, r22
    325a:	80 ed       	ldi	r24, 0xD0	; 208
    325c:	d3 d3       	rcall	.+1958   	; 0x3a04 <_Z14i2c_start_waith>
    325e:	8c 2f       	mov	r24, r28
    3260:	0c d4       	rcall	.+2072   	; 0x3a7a <_Z9i2c_writeh>
    3262:	81 ed       	ldi	r24, 0xD1	; 209
    3264:	c4 d3       	rcall	.+1928   	; 0x39ee <_Z13i2c_rep_starth>
    3266:	cf 91       	pop	r28
    3268:	08 95       	ret

0000326a <_ZN7MPU605012readRawAccelEv>:
    326a:	af 92       	push	r10
    326c:	bf 92       	push	r11
    326e:	cf 92       	push	r12
    3270:	df 92       	push	r13
    3272:	ef 92       	push	r14
    3274:	ff 92       	push	r15
    3276:	0f 93       	push	r16
    3278:	1f 93       	push	r17
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	8c 01       	movw	r16, r24
    3280:	eb 01       	movw	r28, r22
    3282:	6b e3       	ldi	r22, 0x3B	; 59
    3284:	ce 01       	movw	r24, r28
    3286:	e7 df       	rcall	.-50     	; 0x3256 <_ZN7MPU605017startReadLocationEh>
    3288:	0a d4       	rcall	.+2068   	; 0x3a9e <_Z11i2c_readAckv>
    328a:	a8 2e       	mov	r10, r24
    328c:	08 d4       	rcall	.+2064   	; 0x3a9e <_Z11i2c_readAckv>
    328e:	b8 2e       	mov	r11, r24
    3290:	06 d4       	rcall	.+2060   	; 0x3a9e <_Z11i2c_readAckv>
    3292:	c8 2e       	mov	r12, r24
    3294:	04 d4       	rcall	.+2056   	; 0x3a9e <_Z11i2c_readAckv>
    3296:	e8 2e       	mov	r14, r24
    3298:	02 d4       	rcall	.+2052   	; 0x3a9e <_Z11i2c_readAckv>
    329a:	d8 2e       	mov	r13, r24
    329c:	0b d4       	rcall	.+2070   	; 0x3ab4 <_Z11i2c_readNakv>
    329e:	f8 2e       	mov	r15, r24
    32a0:	6b 2d       	mov	r22, r11
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	7a 29       	or	r23, r10
    32a6:	07 2e       	mov	r0, r23
    32a8:	00 0c       	add	r0, r0
    32aa:	88 0b       	sbc	r24, r24
    32ac:	99 0b       	sbc	r25, r25
    32ae:	82 d7       	rcall	.+3844   	; 0x41b4 <__floatsisf>
    32b0:	fe 01       	movw	r30, r28
    32b2:	e8 5b       	subi	r30, 0xB8	; 184
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	20 81       	ld	r18, Z
    32b8:	31 81       	ldd	r19, Z+1	; 0x01
    32ba:	42 81       	ldd	r20, Z+2	; 0x02
    32bc:	53 81       	ldd	r21, Z+3	; 0x03
    32be:	11 d6       	rcall	.+3106   	; 0x3ee2 <__subsf3>
    32c0:	68 83       	st	Y, r22
    32c2:	79 83       	std	Y+1, r23	; 0x01
    32c4:	8a 83       	std	Y+2, r24	; 0x02
    32c6:	9b 83       	std	Y+3, r25	; 0x03
    32c8:	6e 2d       	mov	r22, r14
    32ca:	70 e0       	ldi	r23, 0x00	; 0
    32cc:	7c 29       	or	r23, r12
    32ce:	07 2e       	mov	r0, r23
    32d0:	00 0c       	add	r0, r0
    32d2:	88 0b       	sbc	r24, r24
    32d4:	99 0b       	sbc	r25, r25
    32d6:	6e d7       	rcall	.+3804   	; 0x41b4 <__floatsisf>
    32d8:	fe 01       	movw	r30, r28
    32da:	e4 5b       	subi	r30, 0xB4	; 180
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	20 81       	ld	r18, Z
    32e0:	31 81       	ldd	r19, Z+1	; 0x01
    32e2:	42 81       	ldd	r20, Z+2	; 0x02
    32e4:	53 81       	ldd	r21, Z+3	; 0x03
    32e6:	fd d5       	rcall	.+3066   	; 0x3ee2 <__subsf3>
    32e8:	6c 83       	std	Y+4, r22	; 0x04
    32ea:	7d 83       	std	Y+5, r23	; 0x05
    32ec:	8e 83       	std	Y+6, r24	; 0x06
    32ee:	9f 83       	std	Y+7, r25	; 0x07
    32f0:	6f 2d       	mov	r22, r15
    32f2:	70 e0       	ldi	r23, 0x00	; 0
    32f4:	7d 29       	or	r23, r13
    32f6:	07 2e       	mov	r0, r23
    32f8:	00 0c       	add	r0, r0
    32fa:	88 0b       	sbc	r24, r24
    32fc:	99 0b       	sbc	r25, r25
    32fe:	5a d7       	rcall	.+3764   	; 0x41b4 <__floatsisf>
    3300:	68 87       	std	Y+8, r22	; 0x08
    3302:	79 87       	std	Y+9, r23	; 0x09
    3304:	8a 87       	std	Y+10, r24	; 0x0a
    3306:	9b 87       	std	Y+11, r25	; 0x0b
    3308:	74 d3       	rcall	.+1768   	; 0x39f2 <_Z8i2c_stopv>
    330a:	8c e0       	ldi	r24, 0x0C	; 12
    330c:	fe 01       	movw	r30, r28
    330e:	d8 01       	movw	r26, r16
    3310:	01 90       	ld	r0, Z+
    3312:	0d 92       	st	X+, r0
    3314:	8a 95       	dec	r24
    3316:	e1 f7       	brne	.-8      	; 0x3310 <_ZN7MPU605012readRawAccelEv+0xa6>
    3318:	c8 01       	movw	r24, r16
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	1f 91       	pop	r17
    3320:	0f 91       	pop	r16
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	df 90       	pop	r13
    3328:	cf 90       	pop	r12
    332a:	bf 90       	pop	r11
    332c:	af 90       	pop	r10
    332e:	08 95       	ret

00003330 <_ZN7MPU605018readNormalizeAccelEv>:
    3330:	af 92       	push	r10
    3332:	bf 92       	push	r11
    3334:	cf 92       	push	r12
    3336:	df 92       	push	r13
    3338:	ef 92       	push	r14
    333a:	ff 92       	push	r15
    333c:	0f 93       	push	r16
    333e:	1f 93       	push	r17
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	2c 97       	sbiw	r28, 0x0c	; 12
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	5c 01       	movw	r10, r24
    3356:	8b 01       	movw	r16, r22
    3358:	ce 01       	movw	r24, r28
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	86 df       	rcall	.-244    	; 0x326a <_ZN7MPU605012readRawAccelEv>
    335e:	f8 01       	movw	r30, r16
    3360:	e0 59       	subi	r30, 0x90	; 144
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	c0 80       	ld	r12, Z
    3366:	d1 80       	ldd	r13, Z+1	; 0x01
    3368:	e2 80       	ldd	r14, Z+2	; 0x02
    336a:	f3 80       	ldd	r15, Z+3	; 0x03
    336c:	a7 01       	movw	r20, r14
    336e:	96 01       	movw	r18, r12
    3370:	f8 01       	movw	r30, r16
    3372:	60 81       	ld	r22, Z
    3374:	71 81       	ldd	r23, Z+1	; 0x01
    3376:	82 81       	ldd	r24, Z+2	; 0x02
    3378:	93 81       	ldd	r25, Z+3	; 0x03
    337a:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    337e:	f8 01       	movw	r30, r16
    3380:	60 8f       	std	Z+24, r22	; 0x18
    3382:	71 8f       	std	Z+25, r23	; 0x19
    3384:	82 8f       	std	Z+26, r24	; 0x1a
    3386:	93 8f       	std	Z+27, r25	; 0x1b
    3388:	a7 01       	movw	r20, r14
    338a:	96 01       	movw	r18, r12
    338c:	64 81       	ldd	r22, Z+4	; 0x04
    338e:	75 81       	ldd	r23, Z+5	; 0x05
    3390:	86 81       	ldd	r24, Z+6	; 0x06
    3392:	97 81       	ldd	r25, Z+7	; 0x07
    3394:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    3398:	f8 01       	movw	r30, r16
    339a:	64 8f       	std	Z+28, r22	; 0x1c
    339c:	75 8f       	std	Z+29, r23	; 0x1d
    339e:	86 8f       	std	Z+30, r24	; 0x1e
    33a0:	97 8f       	std	Z+31, r25	; 0x1f
    33a2:	a7 01       	movw	r20, r14
    33a4:	96 01       	movw	r18, r12
    33a6:	60 85       	ldd	r22, Z+8	; 0x08
    33a8:	71 85       	ldd	r23, Z+9	; 0x09
    33aa:	82 85       	ldd	r24, Z+10	; 0x0a
    33ac:	93 85       	ldd	r25, Z+11	; 0x0b
    33ae:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__mulsf3>
    33b2:	f8 01       	movw	r30, r16
    33b4:	60 a3       	std	Z+32, r22	; 0x20
    33b6:	71 a3       	std	Z+33, r23	; 0x21
    33b8:	82 a3       	std	Z+34, r24	; 0x22
    33ba:	93 a3       	std	Z+35, r25	; 0x23
    33bc:	8c e0       	ldi	r24, 0x0C	; 12
    33be:	78 96       	adiw	r30, 0x18	; 24
    33c0:	d5 01       	movw	r26, r10
    33c2:	01 90       	ld	r0, Z+
    33c4:	0d 92       	st	X+, r0
    33c6:	8a 95       	dec	r24
    33c8:	e1 f7       	brne	.-8      	; 0x33c2 <_ZN7MPU605018readNormalizeAccelEv+0x92>
    33ca:	c5 01       	movw	r24, r10
    33cc:	2c 96       	adiw	r28, 0x0c	; 12
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	1f 91       	pop	r17
    33de:	0f 91       	pop	r16
    33e0:	ff 90       	pop	r15
    33e2:	ef 90       	pop	r14
    33e4:	df 90       	pop	r13
    33e6:	cf 90       	pop	r12
    33e8:	bf 90       	pop	r11
    33ea:	af 90       	pop	r10
    33ec:	08 95       	ret

000033ee <_ZN7MPU605011readRawGyroEv>:
    33ee:	ff 92       	push	r15
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
    33f6:	df 93       	push	r29
    33f8:	8c 01       	movw	r16, r24
    33fa:	eb 01       	movw	r28, r22
    33fc:	63 e4       	ldi	r22, 0x43	; 67
    33fe:	ce 01       	movw	r24, r28
    3400:	2a df       	rcall	.-428    	; 0x3256 <_ZN7MPU605017startReadLocationEh>
    3402:	4d d3       	rcall	.+1690   	; 0x3a9e <_Z11i2c_readAckv>
    3404:	f8 2e       	mov	r15, r24
    3406:	4b d3       	rcall	.+1686   	; 0x3a9e <_Z11i2c_readAckv>
    3408:	6f 2d       	mov	r22, r15
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	76 2f       	mov	r23, r22
    340e:	66 27       	eor	r22, r22
    3410:	68 2b       	or	r22, r24
    3412:	07 2e       	mov	r0, r23
    3414:	00 0c       	add	r0, r0
    3416:	88 0b       	sbc	r24, r24
    3418:	99 0b       	sbc	r25, r25
    341a:	cc d6       	rcall	.+3480   	; 0x41b4 <__floatsisf>
    341c:	6c 87       	std	Y+12, r22	; 0x0c
    341e:	7d 87       	std	Y+13, r23	; 0x0d
    3420:	8e 87       	std	Y+14, r24	; 0x0e
    3422:	9f 87       	std	Y+15, r25	; 0x0f
    3424:	3c d3       	rcall	.+1656   	; 0x3a9e <_Z11i2c_readAckv>
    3426:	f8 2e       	mov	r15, r24
    3428:	3a d3       	rcall	.+1652   	; 0x3a9e <_Z11i2c_readAckv>
    342a:	6f 2d       	mov	r22, r15
    342c:	70 e0       	ldi	r23, 0x00	; 0
    342e:	76 2f       	mov	r23, r22
    3430:	66 27       	eor	r22, r22
    3432:	68 2b       	or	r22, r24
    3434:	07 2e       	mov	r0, r23
    3436:	00 0c       	add	r0, r0
    3438:	88 0b       	sbc	r24, r24
    343a:	99 0b       	sbc	r25, r25
    343c:	bb d6       	rcall	.+3446   	; 0x41b4 <__floatsisf>
    343e:	68 8b       	std	Y+16, r22	; 0x10
    3440:	79 8b       	std	Y+17, r23	; 0x11
    3442:	8a 8b       	std	Y+18, r24	; 0x12
    3444:	9b 8b       	std	Y+19, r25	; 0x13
    3446:	2b d3       	rcall	.+1622   	; 0x3a9e <_Z11i2c_readAckv>
    3448:	f8 2e       	mov	r15, r24
    344a:	34 d3       	rcall	.+1640   	; 0x3ab4 <_Z11i2c_readNakv>
    344c:	6f 2d       	mov	r22, r15
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	76 2f       	mov	r23, r22
    3452:	66 27       	eor	r22, r22
    3454:	68 2b       	or	r22, r24
    3456:	07 2e       	mov	r0, r23
    3458:	00 0c       	add	r0, r0
    345a:	88 0b       	sbc	r24, r24
    345c:	99 0b       	sbc	r25, r25
    345e:	aa d6       	rcall	.+3412   	; 0x41b4 <__floatsisf>
    3460:	6c 8b       	std	Y+20, r22	; 0x14
    3462:	7d 8b       	std	Y+21, r23	; 0x15
    3464:	8e 8b       	std	Y+22, r24	; 0x16
    3466:	9f 8b       	std	Y+23, r25	; 0x17
    3468:	c4 d2       	rcall	.+1416   	; 0x39f2 <_Z8i2c_stopv>
    346a:	8c e0       	ldi	r24, 0x0C	; 12
    346c:	fe 01       	movw	r30, r28
    346e:	3c 96       	adiw	r30, 0x0c	; 12
    3470:	d8 01       	movw	r26, r16
    3472:	01 90       	ld	r0, Z+
    3474:	0d 92       	st	X+, r0
    3476:	8a 95       	dec	r24
    3478:	e1 f7       	brne	.-8      	; 0x3472 <_ZN7MPU605011readRawGyroEv+0x84>
    347a:	c8 01       	movw	r24, r16
    347c:	df 91       	pop	r29
    347e:	cf 91       	pop	r28
    3480:	1f 91       	pop	r17
    3482:	0f 91       	pop	r16
    3484:	ff 90       	pop	r15
    3486:	08 95       	ret

00003488 <_ZN7MPU605012setThresholdEh>:

// Set treshold value
void MPU6050::setThreshold(uint8_t multiple)
{
    3488:	cf 92       	push	r12
    348a:	df 92       	push	r13
    348c:	ef 92       	push	r14
    348e:	ff 92       	push	r15
    3490:	1f 93       	push	r17
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	ec 01       	movw	r28, r24
    3498:	16 2f       	mov	r17, r22
	if (multiple > 0)
    349a:	66 23       	and	r22, r22
    349c:	09 f4       	brne	.+2      	; 0x34a0 <_ZN7MPU605012setThresholdEh+0x18>
    349e:	3b c0       	rjmp	.+118    	; 0x3516 <_ZN7MPU605012setThresholdEh+0x8e>
	{
		// If not calibrated, need calibrate
		if (!useCalibrate)
    34a0:	fc 01       	movw	r30, r24
    34a2:	e8 58       	subi	r30, 0x88	; 136
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	80 81       	ld	r24, Z
    34a8:	81 11       	cpse	r24, r1
    34aa:	03 c0       	rjmp	.+6      	; 0x34b2 <_ZN7MPU605012setThresholdEh+0x2a>
		{
			calibrateGyro();
    34ac:	62 e3       	ldi	r22, 0x32	; 50
    34ae:	ce 01       	movw	r24, r28
    34b0:	51 d0       	rcall	.+162    	; 0x3554 <_ZN7MPU605013calibrateGyroEh>
		}

		// Calculate threshold vectors
		tg.XAxis = th.XAxis * multiple;
    34b2:	61 2f       	mov	r22, r17
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	7c d6       	rcall	.+3320   	; 0x41b4 <__floatsisf>
    34bc:	6b 01       	movw	r12, r22
    34be:	7c 01       	movw	r14, r24
    34c0:	9b 01       	movw	r18, r22
    34c2:	ac 01       	movw	r20, r24
    34c4:	fe 01       	movw	r30, r28
    34c6:	ec 5a       	subi	r30, 0xAC	; 172
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	60 81       	ld	r22, Z
    34cc:	71 81       	ldd	r23, Z+1	; 0x01
    34ce:	82 81       	ldd	r24, Z+2	; 0x02
    34d0:	93 81       	ldd	r25, Z+3	; 0x03
    34d2:	89 d7       	rcall	.+3858   	; 0x43e6 <__mulsf3>
    34d4:	68 ab       	std	Y+48, r22	; 0x30
    34d6:	79 ab       	std	Y+49, r23	; 0x31
    34d8:	8a ab       	std	Y+50, r24	; 0x32
    34da:	9b ab       	std	Y+51, r25	; 0x33
		tg.YAxis = th.YAxis * multiple;
    34dc:	a7 01       	movw	r20, r14
    34de:	96 01       	movw	r18, r12
    34e0:	fe 01       	movw	r30, r28
    34e2:	e8 5a       	subi	r30, 0xA8	; 168
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	60 81       	ld	r22, Z
    34e8:	71 81       	ldd	r23, Z+1	; 0x01
    34ea:	82 81       	ldd	r24, Z+2	; 0x02
    34ec:	93 81       	ldd	r25, Z+3	; 0x03
    34ee:	7b d7       	rcall	.+3830   	; 0x43e6 <__mulsf3>
    34f0:	6c ab       	std	Y+52, r22	; 0x34
    34f2:	7d ab       	std	Y+53, r23	; 0x35
    34f4:	8e ab       	std	Y+54, r24	; 0x36
    34f6:	9f ab       	std	Y+55, r25	; 0x37
		tg.ZAxis = th.ZAxis * multiple;
    34f8:	a7 01       	movw	r20, r14
    34fa:	96 01       	movw	r18, r12
    34fc:	fe 01       	movw	r30, r28
    34fe:	e4 5a       	subi	r30, 0xA4	; 164
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	60 81       	ld	r22, Z
    3504:	71 81       	ldd	r23, Z+1	; 0x01
    3506:	82 81       	ldd	r24, Z+2	; 0x02
    3508:	93 81       	ldd	r25, Z+3	; 0x03
    350a:	6d d7       	rcall	.+3802   	; 0x43e6 <__mulsf3>
    350c:	68 af       	std	Y+56, r22	; 0x38
    350e:	79 af       	std	Y+57, r23	; 0x39
    3510:	8a af       	std	Y+58, r24	; 0x3a
    3512:	9b af       	std	Y+59, r25	; 0x3b
    3514:	0c c0       	rjmp	.+24     	; 0x352e <_ZN7MPU605012setThresholdEh+0xa6>
	} else
	{
		// No threshold
		tg.XAxis = 0;
    3516:	18 aa       	std	Y+48, r1	; 0x30
    3518:	19 aa       	std	Y+49, r1	; 0x31
    351a:	1a aa       	std	Y+50, r1	; 0x32
    351c:	1b aa       	std	Y+51, r1	; 0x33
		tg.YAxis = 0;
    351e:	1c aa       	std	Y+52, r1	; 0x34
    3520:	1d aa       	std	Y+53, r1	; 0x35
    3522:	1e aa       	std	Y+54, r1	; 0x36
    3524:	1f aa       	std	Y+55, r1	; 0x37
		tg.ZAxis = 0;
    3526:	18 ae       	std	Y+56, r1	; 0x38
    3528:	19 ae       	std	Y+57, r1	; 0x39
    352a:	1a ae       	std	Y+58, r1	; 0x3a
    352c:	1b ae       	std	Y+59, r1	; 0x3b
	}

	// Remember old threshold value
	actualThreshold = multiple;
    352e:	cc 58       	subi	r28, 0x8C	; 140
    3530:	df 4f       	sbci	r29, 0xFF	; 255
    3532:	61 2f       	mov	r22, r17
    3534:	70 e0       	ldi	r23, 0x00	; 0
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	3a d6       	rcall	.+3188   	; 0x41b0 <__floatunsisf>
    353c:	68 83       	st	Y, r22
    353e:	79 83       	std	Y+1, r23	; 0x01
    3540:	8a 83       	std	Y+2, r24	; 0x02
    3542:	9b 83       	std	Y+3, r25	; 0x03
}
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	1f 91       	pop	r17
    354a:	ff 90       	pop	r15
    354c:	ef 90       	pop	r14
    354e:	df 90       	pop	r13
    3550:	cf 90       	pop	r12
    3552:	08 95       	ret

00003554 <_ZN7MPU605013calibrateGyroEh>:
	offsetAccelero.XAxis = sumX / samples;
	offsetAccelero.YAxis = sumY / samples;
}

void MPU6050::calibrateGyro(uint8_t samples)
{
    3554:	2f 92       	push	r2
    3556:	3f 92       	push	r3
    3558:	4f 92       	push	r4
    355a:	5f 92       	push	r5
    355c:	6f 92       	push	r6
    355e:	7f 92       	push	r7
    3560:	8f 92       	push	r8
    3562:	9f 92       	push	r9
    3564:	af 92       	push	r10
    3566:	bf 92       	push	r11
    3568:	cf 92       	push	r12
    356a:	df 92       	push	r13
    356c:	ef 92       	push	r14
    356e:	ff 92       	push	r15
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	a4 97       	sbiw	r28, 0x24	; 36
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
    3588:	1c 01       	movw	r2, r24
    358a:	06 2f       	mov	r16, r22
	// Set calibrate
	useCalibrate = true;
    358c:	fc 01       	movw	r30, r24
    358e:	e8 58       	subi	r30, 0x88	; 136
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	80 83       	st	Z, r24
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    3596:	66 23       	and	r22, r22
    3598:	09 f4       	brne	.+2      	; 0x359c <_ZN7MPU605013calibrateGyroEh+0x48>
    359a:	87 c0       	rjmp	.+270    	; 0x36aa <_ZN7MPU605013calibrateGyroEh+0x156>
    359c:	10 e0       	ldi	r17, 0x00	; 0
    359e:	19 8e       	std	Y+25, r1	; 0x19
    35a0:	1a 8e       	std	Y+26, r1	; 0x1a
    35a2:	1b 8e       	std	Y+27, r1	; 0x1b
    35a4:	1c 8e       	std	Y+28, r1	; 0x1c
    35a6:	1d 8a       	std	Y+21, r1	; 0x15
    35a8:	1e 8a       	std	Y+22, r1	; 0x16
    35aa:	1f 8a       	std	Y+23, r1	; 0x17
    35ac:	18 8e       	std	Y+24, r1	; 0x18
    35ae:	1d 86       	std	Y+13, r1	; 0x0d
    35b0:	1e 86       	std	Y+14, r1	; 0x0e
    35b2:	1f 86       	std	Y+15, r1	; 0x0f
    35b4:	18 8a       	std	Y+16, r1	; 0x10
    35b6:	19 a2       	std	Y+33, r1	; 0x21
    35b8:	1a a2       	std	Y+34, r1	; 0x22
    35ba:	1b a2       	std	Y+35, r1	; 0x23
    35bc:	1c a2       	std	Y+36, r1	; 0x24
    35be:	1d 8e       	std	Y+29, r1	; 0x1d
    35c0:	1e 8e       	std	Y+30, r1	; 0x1e
    35c2:	1f 8e       	std	Y+31, r1	; 0x1f
    35c4:	18 a2       	std	Y+32, r1	; 0x20
    35c6:	19 8a       	std	Y+17, r1	; 0x11
    35c8:	1a 8a       	std	Y+18, r1	; 0x12
    35ca:	1b 8a       	std	Y+19, r1	; 0x13
    35cc:	1c 8a       	std	Y+20, r1	; 0x14
	{
		readRawGyro();
    35ce:	b1 01       	movw	r22, r2
    35d0:	ce 01       	movw	r24, r28
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	0c df       	rcall	.-488    	; 0x33ee <_ZN7MPU605011readRawGyroEv>
		sumX += rg.XAxis;
    35d6:	f1 01       	movw	r30, r2
    35d8:	44 84       	ldd	r4, Z+12	; 0x0c
    35da:	55 84       	ldd	r5, Z+13	; 0x0d
    35dc:	66 84       	ldd	r6, Z+14	; 0x0e
    35de:	77 84       	ldd	r7, Z+15	; 0x0f
    35e0:	a3 01       	movw	r20, r6
    35e2:	92 01       	movw	r18, r4
    35e4:	69 89       	ldd	r22, Y+17	; 0x11
    35e6:	7a 89       	ldd	r23, Y+18	; 0x12
    35e8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ea:	9c 89       	ldd	r25, Y+20	; 0x14
    35ec:	7b d4       	rcall	.+2294   	; 0x3ee4 <__addsf3>
    35ee:	69 8b       	std	Y+17, r22	; 0x11
    35f0:	7a 8b       	std	Y+18, r23	; 0x12
    35f2:	8b 8b       	std	Y+19, r24	; 0x13
    35f4:	9c 8b       	std	Y+20, r25	; 0x14
		sumY += rg.YAxis;
    35f6:	f1 01       	movw	r30, r2
    35f8:	80 88       	ldd	r8, Z+16	; 0x10
    35fa:	91 88       	ldd	r9, Z+17	; 0x11
    35fc:	a2 88       	ldd	r10, Z+18	; 0x12
    35fe:	b3 88       	ldd	r11, Z+19	; 0x13
    3600:	a5 01       	movw	r20, r10
    3602:	94 01       	movw	r18, r8
    3604:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3606:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3608:	8f 8d       	ldd	r24, Y+31	; 0x1f
    360a:	98 a1       	ldd	r25, Y+32	; 0x20
    360c:	6b d4       	rcall	.+2262   	; 0x3ee4 <__addsf3>
    360e:	6d 8f       	std	Y+29, r22	; 0x1d
    3610:	7e 8f       	std	Y+30, r23	; 0x1e
    3612:	8f 8f       	std	Y+31, r24	; 0x1f
    3614:	98 a3       	std	Y+32, r25	; 0x20
		sumZ += rg.ZAxis;
    3616:	f1 01       	movw	r30, r2
    3618:	c4 88       	ldd	r12, Z+20	; 0x14
    361a:	d5 88       	ldd	r13, Z+21	; 0x15
    361c:	e6 88       	ldd	r14, Z+22	; 0x16
    361e:	f7 88       	ldd	r15, Z+23	; 0x17
    3620:	a7 01       	movw	r20, r14
    3622:	96 01       	movw	r18, r12
    3624:	69 a1       	ldd	r22, Y+33	; 0x21
    3626:	7a a1       	ldd	r23, Y+34	; 0x22
    3628:	8b a1       	ldd	r24, Y+35	; 0x23
    362a:	9c a1       	ldd	r25, Y+36	; 0x24
    362c:	5b d4       	rcall	.+2230   	; 0x3ee4 <__addsf3>
    362e:	69 a3       	std	Y+33, r22	; 0x21
    3630:	7a a3       	std	Y+34, r23	; 0x22
    3632:	8b a3       	std	Y+35, r24	; 0x23
    3634:	9c a3       	std	Y+36, r25	; 0x24

		sigmaX += rg.XAxis * rg.XAxis;
    3636:	a3 01       	movw	r20, r6
    3638:	92 01       	movw	r18, r4
    363a:	c3 01       	movw	r24, r6
    363c:	b2 01       	movw	r22, r4
    363e:	d3 d6       	rcall	.+3494   	; 0x43e6 <__mulsf3>
    3640:	9b 01       	movw	r18, r22
    3642:	ac 01       	movw	r20, r24
    3644:	6d 85       	ldd	r22, Y+13	; 0x0d
    3646:	7e 85       	ldd	r23, Y+14	; 0x0e
    3648:	8f 85       	ldd	r24, Y+15	; 0x0f
    364a:	98 89       	ldd	r25, Y+16	; 0x10
    364c:	4b d4       	rcall	.+2198   	; 0x3ee4 <__addsf3>
    364e:	6d 87       	std	Y+13, r22	; 0x0d
    3650:	7e 87       	std	Y+14, r23	; 0x0e
    3652:	8f 87       	std	Y+15, r24	; 0x0f
    3654:	98 8b       	std	Y+16, r25	; 0x10
		sigmaY += rg.YAxis * rg.YAxis;
    3656:	a5 01       	movw	r20, r10
    3658:	94 01       	movw	r18, r8
    365a:	c5 01       	movw	r24, r10
    365c:	b4 01       	movw	r22, r8
    365e:	c3 d6       	rcall	.+3462   	; 0x43e6 <__mulsf3>
    3660:	9b 01       	movw	r18, r22
    3662:	ac 01       	movw	r20, r24
    3664:	6d 89       	ldd	r22, Y+21	; 0x15
    3666:	7e 89       	ldd	r23, Y+22	; 0x16
    3668:	8f 89       	ldd	r24, Y+23	; 0x17
    366a:	98 8d       	ldd	r25, Y+24	; 0x18
    366c:	3b d4       	rcall	.+2166   	; 0x3ee4 <__addsf3>
    366e:	6d 8b       	std	Y+21, r22	; 0x15
    3670:	7e 8b       	std	Y+22, r23	; 0x16
    3672:	8f 8b       	std	Y+23, r24	; 0x17
    3674:	98 8f       	std	Y+24, r25	; 0x18
		sigmaZ += rg.ZAxis * rg.ZAxis;
    3676:	a7 01       	movw	r20, r14
    3678:	96 01       	movw	r18, r12
    367a:	c7 01       	movw	r24, r14
    367c:	b6 01       	movw	r22, r12
    367e:	b3 d6       	rcall	.+3430   	; 0x43e6 <__mulsf3>
    3680:	9b 01       	movw	r18, r22
    3682:	ac 01       	movw	r20, r24
    3684:	69 8d       	ldd	r22, Y+25	; 0x19
    3686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    368a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    368c:	2b d4       	rcall	.+2134   	; 0x3ee4 <__addsf3>
    368e:	69 8f       	std	Y+25, r22	; 0x19
    3690:	7a 8f       	std	Y+26, r23	; 0x1a
    3692:	8b 8f       	std	Y+27, r24	; 0x1b
    3694:	9c 8f       	std	Y+28, r25	; 0x1c
    3696:	8f e1       	ldi	r24, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3698:	9e e4       	ldi	r25, 0x4E	; 78
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <_ZN7MPU605013calibrateGyroEh+0x146>
    369e:	00 c0       	rjmp	.+0      	; 0x36a0 <_ZN7MPU605013calibrateGyroEh+0x14c>
    36a0:	00 00       	nop
    36a2:	1f 5f       	subi	r17, 0xFF	; 255
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;

	// Read n-samples
	for (uint8_t i = 0; i < samples; ++i)
    36a4:	01 13       	cpse	r16, r17
    36a6:	93 cf       	rjmp	.-218    	; 0x35ce <_ZN7MPU605013calibrateGyroEh+0x7a>
    36a8:	18 c0       	rjmp	.+48     	; 0x36da <_ZN7MPU605013calibrateGyroEh+0x186>
    36aa:	19 8e       	std	Y+25, r1	; 0x19
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
	float sigmaZ = 0;
    36ac:	1a 8e       	std	Y+26, r1	; 0x1a
    36ae:	1b 8e       	std	Y+27, r1	; 0x1b
    36b0:	1c 8e       	std	Y+28, r1	; 0x1c
    36b2:	1d 8a       	std	Y+21, r1	; 0x15
	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
	float sigmaY = 0;
    36b4:	1e 8a       	std	Y+22, r1	; 0x16
    36b6:	1f 8a       	std	Y+23, r1	; 0x17
    36b8:	18 8e       	std	Y+24, r1	; 0x18
    36ba:	1d 86       	std	Y+13, r1	; 0x0d

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
	float sigmaX = 0;
    36bc:	1e 86       	std	Y+14, r1	; 0x0e
    36be:	1f 86       	std	Y+15, r1	; 0x0f
    36c0:	18 8a       	std	Y+16, r1	; 0x10
    36c2:	19 a2       	std	Y+33, r1	; 0x21
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
	float sumZ = 0;
    36c4:	1a a2       	std	Y+34, r1	; 0x22
    36c6:	1b a2       	std	Y+35, r1	; 0x23
    36c8:	1c a2       	std	Y+36, r1	; 0x24
    36ca:	1d 8e       	std	Y+29, r1	; 0x1d
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
	float sumY = 0;
    36cc:	1e 8e       	std	Y+30, r1	; 0x1e
    36ce:	1f 8e       	std	Y+31, r1	; 0x1f
    36d0:	18 a2       	std	Y+32, r1	; 0x20
{
	// Set calibrate
	useCalibrate = true;

	// Reset values
	float sumX = 0;
    36d2:	19 8a       	std	Y+17, r1	; 0x11
    36d4:	1a 8a       	std	Y+18, r1	; 0x12
    36d6:	1b 8a       	std	Y+19, r1	; 0x13
    36d8:	1c 8a       	std	Y+20, r1	; 0x14

		_delay_ms(5);
	}

	// Calculate delta vectors
	dg.XAxis = sumX / samples;
    36da:	60 2f       	mov	r22, r16
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	68 d5       	rcall	.+2768   	; 0x41b4 <__floatsisf>
    36e4:	4b 01       	movw	r8, r22
    36e6:	5c 01       	movw	r10, r24
    36e8:	9b 01       	movw	r18, r22
    36ea:	ac 01       	movw	r20, r24
    36ec:	69 89       	ldd	r22, Y+17	; 0x11
    36ee:	7a 89       	ldd	r23, Y+18	; 0x12
    36f0:	8b 89       	ldd	r24, Y+19	; 0x13
    36f2:	9c 89       	ldd	r25, Y+20	; 0x14
    36f4:	c4 d4       	rcall	.+2440   	; 0x407e <__divsf3>
    36f6:	6b 01       	movw	r12, r22
    36f8:	7c 01       	movw	r14, r24
    36fa:	f1 01       	movw	r30, r2
    36fc:	64 af       	std	Z+60, r22	; 0x3c
    36fe:	75 af       	std	Z+61, r23	; 0x3d
    3700:	86 af       	std	Z+62, r24	; 0x3e
    3702:	97 af       	std	Z+63, r25	; 0x3f
	dg.YAxis = sumY / samples;
    3704:	a5 01       	movw	r20, r10
    3706:	94 01       	movw	r18, r8
    3708:	6d 8d       	ldd	r22, Y+29	; 0x1d
    370a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    370c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    370e:	98 a1       	ldd	r25, Y+32	; 0x20
    3710:	b6 d4       	rcall	.+2412   	; 0x407e <__divsf3>
    3712:	2b 01       	movw	r4, r22
    3714:	3c 01       	movw	r6, r24
    3716:	f1 01       	movw	r30, r2
    3718:	e0 5c       	subi	r30, 0xC0	; 192
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	60 83       	st	Z, r22
    371e:	71 83       	std	Z+1, r23	; 0x01
    3720:	82 83       	std	Z+2, r24	; 0x02
    3722:	93 83       	std	Z+3, r25	; 0x03
	dg.ZAxis = sumZ / samples;
    3724:	a5 01       	movw	r20, r10
    3726:	94 01       	movw	r18, r8
    3728:	69 a1       	ldd	r22, Y+33	; 0x21
    372a:	7a a1       	ldd	r23, Y+34	; 0x22
    372c:	8b a1       	ldd	r24, Y+35	; 0x23
    372e:	9c a1       	ldd	r25, Y+36	; 0x24
    3730:	a6 d4       	rcall	.+2380   	; 0x407e <__divsf3>
    3732:	4b 01       	movw	r8, r22
    3734:	5c 01       	movw	r10, r24
    3736:	f1 01       	movw	r30, r2
    3738:	ec 5b       	subi	r30, 0xBC	; 188
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	60 83       	st	Z, r22
    373e:	71 83       	std	Z+1, r23	; 0x01
    3740:	82 83       	std	Z+2, r24	; 0x02
    3742:	93 83       	std	Z+3, r25	; 0x03

	// Calculate threshold vectors
	th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	48 e4       	ldi	r20, 0x48	; 72
    374a:	52 e4       	ldi	r21, 0x42	; 66
    374c:	6d 85       	ldd	r22, Y+13	; 0x0d
    374e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3750:	8f 85       	ldd	r24, Y+15	; 0x0f
    3752:	98 89       	ldd	r25, Y+16	; 0x10
    3754:	94 d4       	rcall	.+2344   	; 0x407e <__divsf3>
    3756:	69 8b       	std	Y+17, r22	; 0x11
    3758:	7a 8b       	std	Y+18, r23	; 0x12
    375a:	8b 8b       	std	Y+19, r24	; 0x13
    375c:	9c 8b       	std	Y+20, r25	; 0x14
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	48 e4       	ldi	r20, 0x48	; 72
    3764:	52 e4       	ldi	r21, 0x42	; 66
    3766:	6d 85       	ldd	r22, Y+13	; 0x0d
    3768:	7e 85       	ldd	r23, Y+14	; 0x0e
    376a:	8f 85       	ldd	r24, Y+15	; 0x0f
    376c:	98 89       	ldd	r25, Y+16	; 0x10
    376e:	87 d4       	rcall	.+2318   	; 0x407e <__divsf3>
    3770:	6d 87       	std	Y+13, r22	; 0x0d
    3772:	7e 87       	std	Y+14, r23	; 0x0e
    3774:	8f 87       	std	Y+15, r24	; 0x0f
    3776:	98 8b       	std	Y+16, r25	; 0x10
    3778:	a7 01       	movw	r20, r14
    377a:	96 01       	movw	r18, r12
    377c:	c7 01       	movw	r24, r14
    377e:	b6 01       	movw	r22, r12
    3780:	32 d6       	rcall	.+3172   	; 0x43e6 <__mulsf3>
    3782:	9b 01       	movw	r18, r22
    3784:	ac 01       	movw	r20, r24
    3786:	6d 85       	ldd	r22, Y+13	; 0x0d
    3788:	7e 85       	ldd	r23, Y+14	; 0x0e
    378a:	8f 85       	ldd	r24, Y+15	; 0x0f
    378c:	98 89       	ldd	r25, Y+16	; 0x10
    378e:	a9 d3       	rcall	.+1874   	; 0x3ee2 <__subsf3>
    3790:	97 d6       	rcall	.+3374   	; 0x44c0 <sqrt>
    3792:	f1 01       	movw	r30, r2
    3794:	ec 5a       	subi	r30, 0xAC	; 172
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 83       	st	Z, r22
    379a:	71 83       	std	Z+1, r23	; 0x01
    379c:	82 83       	std	Z+2, r24	; 0x02
    379e:	93 83       	std	Z+3, r25	; 0x03
	th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	48 e4       	ldi	r20, 0x48	; 72
    37a6:	52 e4       	ldi	r21, 0x42	; 66
    37a8:	6d 89       	ldd	r22, Y+21	; 0x15
    37aa:	7e 89       	ldd	r23, Y+22	; 0x16
    37ac:	8f 89       	ldd	r24, Y+23	; 0x17
    37ae:	98 8d       	ldd	r25, Y+24	; 0x18
    37b0:	66 d4       	rcall	.+2252   	; 0x407e <__divsf3>
    37b2:	6b 01       	movw	r12, r22
    37b4:	7c 01       	movw	r14, r24
    37b6:	a3 01       	movw	r20, r6
    37b8:	92 01       	movw	r18, r4
    37ba:	c3 01       	movw	r24, r6
    37bc:	b2 01       	movw	r22, r4
    37be:	13 d6       	rcall	.+3110   	; 0x43e6 <__mulsf3>
    37c0:	9b 01       	movw	r18, r22
    37c2:	ac 01       	movw	r20, r24
    37c4:	c7 01       	movw	r24, r14
    37c6:	b6 01       	movw	r22, r12
    37c8:	8c d3       	rcall	.+1816   	; 0x3ee2 <__subsf3>
    37ca:	7a d6       	rcall	.+3316   	; 0x44c0 <sqrt>
    37cc:	f1 01       	movw	r30, r2
    37ce:	e8 5a       	subi	r30, 0xA8	; 168
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	60 83       	st	Z, r22
    37d4:	71 83       	std	Z+1, r23	; 0x01
    37d6:	82 83       	std	Z+2, r24	; 0x02
    37d8:	93 83       	std	Z+3, r25	; 0x03
	th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	48 e4       	ldi	r20, 0x48	; 72
    37e0:	52 e4       	ldi	r21, 0x42	; 66
    37e2:	69 8d       	ldd	r22, Y+25	; 0x19
    37e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37ea:	49 d4       	rcall	.+2194   	; 0x407e <__divsf3>
    37ec:	6b 01       	movw	r12, r22
    37ee:	7c 01       	movw	r14, r24
    37f0:	a5 01       	movw	r20, r10
    37f2:	94 01       	movw	r18, r8
    37f4:	c5 01       	movw	r24, r10
    37f6:	b4 01       	movw	r22, r8
    37f8:	f6 d5       	rcall	.+3052   	; 0x43e6 <__mulsf3>
    37fa:	9b 01       	movw	r18, r22
    37fc:	ac 01       	movw	r20, r24
    37fe:	c7 01       	movw	r24, r14
    3800:	b6 01       	movw	r22, r12
    3802:	6f d3       	rcall	.+1758   	; 0x3ee2 <__subsf3>
    3804:	5d d6       	rcall	.+3258   	; 0x44c0 <sqrt>
    3806:	f1 01       	movw	r30, r2
    3808:	e4 5a       	subi	r30, 0xA4	; 164
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	60 83       	st	Z, r22
    380e:	71 83       	std	Z+1, r23	; 0x01
    3810:	82 83       	std	Z+2, r24	; 0x02
    3812:	93 83       	std	Z+3, r25	; 0x03
    3814:	78 96       	adiw	r30, 0x18	; 24

	// If already set threshold, recalculate threshold vectors
	if (actualThreshold > 0)
    3816:	c0 80       	ld	r12, Z
    3818:	d1 80       	ldd	r13, Z+1	; 0x01
    381a:	e2 80       	ldd	r14, Z+2	; 0x02
    381c:	f3 80       	ldd	r15, Z+3	; 0x03
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	a9 01       	movw	r20, r18
    3824:	c7 01       	movw	r24, r14
    3826:	b6 01       	movw	r22, r12
    3828:	d3 d5       	rcall	.+2982   	; 0x43d0 <__gesf2>
    382a:	18 16       	cp	r1, r24
    382c:	2c f4       	brge	.+10     	; 0x3838 <_ZN7MPU605013calibrateGyroEh+0x2e4>
    382e:	c7 01       	movw	r24, r14
    3830:	b6 01       	movw	r22, r12
	{
		setThreshold(actualThreshold);
    3832:	92 d4       	rcall	.+2340   	; 0x4158 <__fixunssfsi>
    3834:	c1 01       	movw	r24, r2
    3836:	28 de       	rcall	.-944    	; 0x3488 <_ZN7MPU605012setThresholdEh>
    3838:	a4 96       	adiw	r28, 0x24	; 36
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
	}
}
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	df 91       	pop	r29
    3846:	cf 91       	pop	r28
    3848:	1f 91       	pop	r17
    384a:	0f 91       	pop	r16
    384c:	ff 90       	pop	r15
    384e:	ef 90       	pop	r14
    3850:	df 90       	pop	r13
    3852:	cf 90       	pop	r12
    3854:	bf 90       	pop	r11
    3856:	af 90       	pop	r10
    3858:	9f 90       	pop	r9
    385a:	8f 90       	pop	r8
    385c:	7f 90       	pop	r7
    385e:	6f 90       	pop	r6
    3860:	5f 90       	pop	r5
    3862:	4f 90       	pop	r4
    3864:	3f 90       	pop	r3
    3866:	2f 90       	pop	r2
    3868:	08 95       	ret

0000386a <_ZN7MPU60508rateGyroEv>:
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17

	// Remember old threshold value
	actualThreshold = multiple;
}

void MPU6050::rateGyro(){
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	2c 97       	sbiw	r28, 0x0c	; 12
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	de bf       	out	0x3e, r29	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	8c 01       	movw	r16, r24
	readRawGyro();
    3888:	bc 01       	movw	r22, r24
    388a:	ce 01       	movw	r24, r28
    388c:	01 96       	adiw	r24, 0x01	; 1
    388e:	af dd       	rcall	.-1186   	; 0x33ee <_ZN7MPU605011readRawGyroEv>
	gyroRateX = (rg.XAxis)/131;
    3890:	78 01       	movw	r14, r16
    3892:	80 e6       	ldi	r24, 0x60	; 96
    3894:	e8 0e       	add	r14, r24
    3896:	f1 1c       	adc	r15, r1
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	43 e0       	ldi	r20, 0x03	; 3
    389e:	53 e4       	ldi	r21, 0x43	; 67
    38a0:	f8 01       	movw	r30, r16
    38a2:	64 85       	ldd	r22, Z+12	; 0x0c
    38a4:	75 85       	ldd	r23, Z+13	; 0x0d
    38a6:	86 85       	ldd	r24, Z+14	; 0x0e
    38a8:	97 85       	ldd	r25, Z+15	; 0x0f
    38aa:	e9 d3       	rcall	.+2002   	; 0x407e <__divsf3>
    38ac:	f7 01       	movw	r30, r14
    38ae:	60 83       	st	Z, r22
    38b0:	71 83       	std	Z+1, r23	; 0x01
    38b2:	82 83       	std	Z+2, r24	; 0x02
    38b4:	93 83       	std	Z+3, r25	; 0x03
	gyroRateY = (rg.YAxis)/131;
    38b6:	78 01       	movw	r14, r16
    38b8:	f4 e6       	ldi	r31, 0x64	; 100
    38ba:	ef 0e       	add	r14, r31
    38bc:	f1 1c       	adc	r15, r1
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	43 e0       	ldi	r20, 0x03	; 3
    38c4:	53 e4       	ldi	r21, 0x43	; 67
    38c6:	f8 01       	movw	r30, r16
    38c8:	60 89       	ldd	r22, Z+16	; 0x10
    38ca:	71 89       	ldd	r23, Z+17	; 0x11
    38cc:	82 89       	ldd	r24, Z+18	; 0x12
    38ce:	93 89       	ldd	r25, Z+19	; 0x13
    38d0:	d6 d3       	rcall	.+1964   	; 0x407e <__divsf3>
    38d2:	f7 01       	movw	r30, r14
    38d4:	60 83       	st	Z, r22
    38d6:	71 83       	std	Z+1, r23	; 0x01
    38d8:	82 83       	std	Z+2, r24	; 0x02
    38da:	93 83       	std	Z+3, r25	; 0x03
	gyroRateZ = (rg.ZAxis)/131;
    38dc:	78 01       	movw	r14, r16
    38de:	f8 e6       	ldi	r31, 0x68	; 104
    38e0:	ef 0e       	add	r14, r31
    38e2:	f1 1c       	adc	r15, r1
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	43 e0       	ldi	r20, 0x03	; 3
    38ea:	53 e4       	ldi	r21, 0x43	; 67
    38ec:	f8 01       	movw	r30, r16
    38ee:	64 89       	ldd	r22, Z+20	; 0x14
    38f0:	75 89       	ldd	r23, Z+21	; 0x15
    38f2:	86 89       	ldd	r24, Z+22	; 0x16
    38f4:	97 89       	ldd	r25, Z+23	; 0x17
    38f6:	c3 d3       	rcall	.+1926   	; 0x407e <__divsf3>
    38f8:	f7 01       	movw	r30, r14
    38fa:	60 83       	st	Z, r22
    38fc:	71 83       	std	Z+1, r23	; 0x01
    38fe:	82 83       	std	Z+2, r24	; 0x02
    3900:	93 83       	std	Z+3, r25	; 0x03
}
    3902:	2c 96       	adiw	r28, 0x0c	; 12
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	1f 91       	pop	r17
    3914:	0f 91       	pop	r16
    3916:	ff 90       	pop	r15
    3918:	ef 90       	pop	r14
    391a:	08 95       	ret

0000391c <_ZN7MPU605012getGyroRateXEv>:

float MPU6050::getGyroRateX(){
	return gyroRateX;
    391c:	80 5a       	subi	r24, 0xA0	; 160
    391e:	9f 4f       	sbci	r25, 0xFF	; 255
    3920:	fc 01       	movw	r30, r24
    3922:	60 81       	ld	r22, Z
    3924:	71 81       	ldd	r23, Z+1	; 0x01
    3926:	82 81       	ldd	r24, Z+2	; 0x02
    3928:	93 81       	ldd	r25, Z+3	; 0x03
}
    392a:	08 95       	ret

0000392c <_ZN7MPU605012getGyroRateYEv>:
float MPU6050::getGyroRateY(){
	return gyroRateY;
    392c:	8c 59       	subi	r24, 0x9C	; 156
    392e:	9f 4f       	sbci	r25, 0xFF	; 255
    3930:	fc 01       	movw	r30, r24
    3932:	60 81       	ld	r22, Z
    3934:	71 81       	ldd	r23, Z+1	; 0x01
    3936:	82 81       	ldd	r24, Z+2	; 0x02
    3938:	93 81       	ldd	r25, Z+3	; 0x03
}
    393a:	08 95       	ret

0000393c <_ZN7MPU605012getGyroRateZEv>:
float MPU6050::getGyroRateZ(){
	return gyroRateZ;
    393c:	88 59       	subi	r24, 0x98	; 152
    393e:	9f 4f       	sbci	r25, 0xFF	; 255
    3940:	fc 01       	movw	r30, r24
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	08 95       	ret

0000394c <_Z16checkRobotMotionv>:
 bool normalGame			= false;

 
void checkRobotMotion(){
	//Wait while main switch is not clicked//
 	while(READ(M_MAIN_SWITCH));
    394c:	78 99       	sbic	0x0f, 0	; 15
    394e:	fe cf       	rjmp	.-4      	; 0x394c <_Z16checkRobotMotionv>
 	////after main switch is clicked check the state of retry conditions//
 	if(!READ(M_DIRECTLY_LZ2))			{directlyLZ2 = true;}
    3950:	79 99       	sbic	0x0f, 1	; 15
    3952:	04 c0       	rjmp	.+8      	; 0x395c <_Z16checkRobotMotionv+0x10>
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <directlyLZ2>
    395a:	08 95       	ret
 	else if(!READ(M_DIRECTLY_TZ3))		{directlyTZ3 = true;}
    395c:	7a 99       	sbic	0x0f, 2	; 15
    395e:	04 c0       	rjmp	.+8      	; 0x3968 <_Z16checkRobotMotionv+0x1c>
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <directlyTZ3>
    3966:	08 95       	ret
 	else if(!READ(M_LZ2FORTZ3))			{LZ2ForTZ3   = true;}
    3968:	7b 99       	sbic	0x0f, 3	; 15
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <_Z16checkRobotMotionv+0x28>
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <LZ2ForTZ3>
    3972:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ2))			{alwaysTZ2   = true;}
    3974:	7c 99       	sbic	0x0f, 4	; 15
    3976:	04 c0       	rjmp	.+8      	; 0x3980 <_Z16checkRobotMotionv+0x34>
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <alwaysTZ2>
    397e:	08 95       	ret
 	else if(!READ(M_ALWAYSTZ1))			{alwaysTZ1   = true;}
    3980:	7d 99       	sbic	0x0f, 5	; 15
    3982:	04 c0       	rjmp	.+8      	; 0x398c <_Z16checkRobotMotionv+0x40>
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <alwaysTZ1>
    398a:	08 95       	ret
 	else								{normalGame = true;}
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <normalGame>
    3992:	08 95       	ret

00003994 <_Z8i2c_initv>:
uint8_t i2c_write_array(uint8_t *data, uint8_t count){
	while(count--){
		if(i2c_write(*data++) != 0)		return count;
	}
	return 0;
}
    3994:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3998:	88 e4       	ldi	r24, 0x48	; 72
    399a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    399e:	08 95       	ret

000039a0 <_Z9i2c_starth>:
    39a0:	94 ea       	ldi	r25, 0xA4	; 164
    39a2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39a6:	ec eb       	ldi	r30, 0xBC	; 188
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	90 81       	ld	r25, Z
    39ac:	99 23       	and	r25, r25
    39ae:	ec f7       	brge	.-6      	; 0x39aa <_Z9i2c_starth+0xa>
    39b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    39b4:	98 7f       	andi	r25, 0xF8	; 248
    39b6:	98 30       	cpi	r25, 0x08	; 8
    39b8:	11 f0       	breq	.+4      	; 0x39be <_Z9i2c_starth+0x1e>
    39ba:	90 31       	cpi	r25, 0x10	; 16
    39bc:	a1 f4       	brne	.+40     	; 0x39e6 <_Z9i2c_starth+0x46>
    39be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    39c2:	84 e8       	ldi	r24, 0x84	; 132
    39c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39c8:	ec eb       	ldi	r30, 0xBC	; 188
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	88 23       	and	r24, r24
    39d0:	ec f7       	brge	.-6      	; 0x39cc <_Z9i2c_starth+0x2c>
    39d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    39d6:	98 7f       	andi	r25, 0xF8	; 248
    39d8:	98 31       	cpi	r25, 0x18	; 24
    39da:	39 f0       	breq	.+14     	; 0x39ea <_Z9i2c_starth+0x4a>
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	90 34       	cpi	r25, 0x40	; 64
    39e0:	29 f4       	brne	.+10     	; 0x39ec <_Z9i2c_starth+0x4c>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	08 95       	ret
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	08 95       	ret
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	08 95       	ret

000039ee <_Z13i2c_rep_starth>:
    39ee:	d8 cf       	rjmp	.-80     	; 0x39a0 <_Z9i2c_starth>
    39f0:	08 95       	ret

000039f2 <_Z8i2c_stopv>:
    39f2:	84 e9       	ldi	r24, 0x94	; 148
    39f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    39f8:	ec eb       	ldi	r30, 0xBC	; 188
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	84 fd       	sbrc	r24, 4
    3a00:	fd cf       	rjmp	.-6      	; 0x39fc <_Z8i2c_stopv+0xa>
    3a02:	08 95       	ret

00003a04 <_Z14i2c_start_waith>:
    3a04:	bf 92       	push	r11
    3a06:	cf 92       	push	r12
    3a08:	df 92       	push	r13
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	b8 2e       	mov	r11, r24
    3a18:	cc eb       	ldi	r28, 0xBC	; 188
    3a1a:	d0 e0       	ldi	r29, 0x00	; 0
    3a1c:	09 eb       	ldi	r16, 0xB9	; 185
    3a1e:	10 e0       	ldi	r17, 0x00	; 0
    3a20:	0f 2e       	mov	r0, r31
    3a22:	f4 ea       	ldi	r31, 0xA4	; 164
    3a24:	df 2e       	mov	r13, r31
    3a26:	f0 2d       	mov	r31, r0
    3a28:	0f 2e       	mov	r0, r31
    3a2a:	fb eb       	ldi	r31, 0xBB	; 187
    3a2c:	ef 2e       	mov	r14, r31
    3a2e:	f1 2c       	mov	r15, r1
    3a30:	f0 2d       	mov	r31, r0
    3a32:	0f 2e       	mov	r0, r31
    3a34:	f4 e8       	ldi	r31, 0x84	; 132
    3a36:	cf 2e       	mov	r12, r31
    3a38:	f0 2d       	mov	r31, r0
    3a3a:	d8 82       	st	Y, r13
    3a3c:	88 81       	ld	r24, Y
    3a3e:	88 23       	and	r24, r24
    3a40:	ec f7       	brge	.-6      	; 0x3a3c <_Z14i2c_start_waith+0x38>
    3a42:	f8 01       	movw	r30, r16
    3a44:	80 81       	ld	r24, Z
    3a46:	88 7f       	andi	r24, 0xF8	; 248
    3a48:	88 30       	cpi	r24, 0x08	; 8
    3a4a:	b9 f7       	brne	.-18     	; 0x3a3a <_Z14i2c_start_waith+0x36>
    3a4c:	f7 01       	movw	r30, r14
    3a4e:	b0 82       	st	Z, r11
    3a50:	c8 82       	st	Y, r12
    3a52:	88 81       	ld	r24, Y
    3a54:	88 23       	and	r24, r24
    3a56:	ec f7       	brge	.-6      	; 0x3a52 <_Z14i2c_start_waith+0x4e>
    3a58:	f8 01       	movw	r30, r16
    3a5a:	80 81       	ld	r24, Z
    3a5c:	88 7f       	andi	r24, 0xF8	; 248
    3a5e:	88 31       	cpi	r24, 0x18	; 24
    3a60:	11 f0       	breq	.+4      	; 0x3a66 <_Z14i2c_start_waith+0x62>
    3a62:	c7 df       	rcall	.-114    	; 0x39f2 <_Z8i2c_stopv>
    3a64:	ea cf       	rjmp	.-44     	; 0x3a3a <_Z14i2c_start_waith+0x36>
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	ff 90       	pop	r15
    3a70:	ef 90       	pop	r14
    3a72:	df 90       	pop	r13
    3a74:	cf 90       	pop	r12
    3a76:	bf 90       	pop	r11
    3a78:	08 95       	ret

00003a7a <_Z9i2c_writeh>:
    3a7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3a7e:	84 e8       	ldi	r24, 0x84	; 132
    3a80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a84:	ec eb       	ldi	r30, 0xBC	; 188
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	80 81       	ld	r24, Z
    3a8a:	88 23       	and	r24, r24
    3a8c:	ec f7       	brge	.-6      	; 0x3a88 <_Z9i2c_writeh+0xe>
    3a8e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3a92:	98 7f       	andi	r25, 0xF8	; 248
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	98 32       	cpi	r25, 0x28	; 40
    3a98:	09 f4       	brne	.+2      	; 0x3a9c <_Z9i2c_writeh+0x22>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	08 95       	ret

00003a9e <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    3a9e:	84 ec       	ldi	r24, 0xC4	; 196
    3aa0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
    3aa4:	ec eb       	ldi	r30, 0xBC	; 188
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 81       	ld	r24, Z
    3aaa:	88 23       	and	r24, r24
    3aac:	ec f7       	brge	.-6      	; 0x3aa8 <_Z11i2c_readAckv+0xa>

    return TWDR;
    3aae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readAck */
    3ab2:	08 95       	ret

00003ab4 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    3ab4:	84 e8       	ldi	r24, 0x84	; 132
    3ab6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
    3aba:	ec eb       	ldi	r30, 0xBC	; 188
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	80 81       	ld	r24, Z
    3ac0:	88 23       	and	r24, r24
    3ac2:	ec f7       	brge	.-6      	; 0x3abe <_Z11i2c_readNakv+0xa>
	
    return TWDR;
    3ac4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

    3ac8:	08 95       	ret

00003aca <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    3aca:	1f 92       	push	r1
    3acc:	0f 92       	push	r0
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	0f 92       	push	r0
    3ad2:	11 24       	eor	r1, r1
    3ad4:	0b b6       	in	r0, 0x3b	; 59
    3ad6:	0f 92       	push	r0
    3ad8:	2f 93       	push	r18
    3ada:	8f 93       	push	r24
    3adc:	9f 93       	push	r25
    3ade:	ef 93       	push	r30
    3ae0:	ff 93       	push	r31
    3ae2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    3ae6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3aea:	88 71       	andi	r24, 0x18	; 24
    3aec:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <_ZL12UART0_RxHead>
    3af0:	ef 5f       	subi	r30, 0xFF	; 255
    3af2:	ef 71       	andi	r30, 0x1F	; 31
    3af4:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <_ZL12UART0_RxTail>
    3af8:	e9 17       	cp	r30, r25
    3afa:	39 f0       	breq	.+14     	; 0x3b0a <__vector_25+0x40>
    3afc:	e0 93 75 05 	sts	0x0575, r30	; 0x800575 <_ZL12UART0_RxHead>
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	e8 58       	subi	r30, 0x88	; 136
    3b04:	fa 4f       	sbci	r31, 0xFA	; 250
    3b06:	20 83       	st	Z, r18
    3b08:	01 c0       	rjmp	.+2      	; 0x3b0c <__vector_25+0x42>
    3b0a:	82 e0       	ldi	r24, 0x02	; 2
    3b0c:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <_ZL17UART0_LastRxError>
    3b10:	ff 91       	pop	r31
    3b12:	ef 91       	pop	r30
    3b14:	9f 91       	pop	r25
    3b16:	8f 91       	pop	r24
    3b18:	2f 91       	pop	r18
    3b1a:	0f 90       	pop	r0
    3b1c:	0b be       	out	0x3b, r0	; 59
    3b1e:	0f 90       	pop	r0
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	0f 90       	pop	r0
    3b24:	1f 90       	pop	r1
    3b26:	18 95       	reti

00003b28 <__vector_26>:
    3b28:	1f 92       	push	r1
    3b2a:	0f 92       	push	r0
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	0f 92       	push	r0
    3b30:	11 24       	eor	r1, r1
    3b32:	0b b6       	in	r0, 0x3b	; 59
    3b34:	0f 92       	push	r0
    3b36:	8f 93       	push	r24
    3b38:	9f 93       	push	r25
    3b3a:	ef 93       	push	r30
    3b3c:	ff 93       	push	r31
    3b3e:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ZL12UART0_TxHead>
    3b42:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ZL12UART0_TxTail>
    3b46:	98 17       	cp	r25, r24
    3b48:	69 f0       	breq	.+26     	; 0x3b64 <__vector_26+0x3c>
    3b4a:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <_ZL12UART0_TxTail>
    3b4e:	ef 5f       	subi	r30, 0xFF	; 255
    3b50:	ef 71       	andi	r30, 0x1F	; 31
    3b52:	e0 93 76 05 	sts	0x0576, r30	; 0x800576 <_ZL12UART0_TxTail>
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	e8 56       	subi	r30, 0x68	; 104
    3b5a:	fa 4f       	sbci	r31, 0xFA	; 250
    3b5c:	80 81       	ld	r24, Z
    3b5e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3b62:	05 c0       	rjmp	.+10     	; 0x3b6e <__vector_26+0x46>
    3b64:	e1 ec       	ldi	r30, 0xC1	; 193
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	80 81       	ld	r24, Z
    3b6a:	8f 7d       	andi	r24, 0xDF	; 223
    3b6c:	80 83       	st	Z, r24
    3b6e:	ff 91       	pop	r31
    3b70:	ef 91       	pop	r30
    3b72:	9f 91       	pop	r25
    3b74:	8f 91       	pop	r24
    3b76:	0f 90       	pop	r0
    3b78:	0b be       	out	0x3b, r0	; 59
    3b7a:	0f 90       	pop	r0
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	0f 90       	pop	r0
    3b80:	1f 90       	pop	r1
    3b82:	18 95       	reti

00003b84 <_Z10uart0_initj>:
    3b84:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <_ZL12UART0_TxHead>
    3b88:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <_ZL12UART0_TxTail>
    3b8c:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <_ZL12UART0_RxHead>
    3b90:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <_ZL12UART0_RxTail>
    3b94:	99 23       	and	r25, r25
    3b96:	24 f4       	brge	.+8      	; 0x3ba0 <_Z10uart0_initj+0x1c>
    3b98:	22 e0       	ldi	r18, 0x02	; 2
    3b9a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    3b9e:	9f 77       	andi	r25, 0x7F	; 127
    3ba0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    3ba4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    3ba8:	88 e9       	ldi	r24, 0x98	; 152
    3baa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    3bae:	86 e0       	ldi	r24, 0x06	; 6
    3bb0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    3bb4:	08 95       	ret

00003bb6 <_Z10uart0_putch>:
    3bb6:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <_ZL12UART0_TxHead>
    3bba:	2f 5f       	subi	r18, 0xFF	; 255
    3bbc:	2f 71       	andi	r18, 0x1F	; 31
    3bbe:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <_ZL12UART0_TxTail>
    3bc2:	29 17       	cp	r18, r25
    3bc4:	e1 f3       	breq	.-8      	; 0x3bbe <_Z10uart0_putch+0x8>
    3bc6:	e2 2f       	mov	r30, r18
    3bc8:	f0 e0       	ldi	r31, 0x00	; 0
    3bca:	e8 56       	subi	r30, 0x68	; 104
    3bcc:	fa 4f       	sbci	r31, 0xFA	; 250
    3bce:	80 83       	st	Z, r24
    3bd0:	20 93 77 05 	sts	0x0577, r18	; 0x800577 <_ZL12UART0_TxHead>
    3bd4:	e1 ec       	ldi	r30, 0xC1	; 193
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	80 81       	ld	r24, Z
    3bda:	80 62       	ori	r24, 0x20	; 32
    3bdc:	80 83       	st	Z, r24
    3bde:	08 95       	ret

00003be0 <_Z10uart0_putsPKc>:
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	ec 01       	movw	r28, r24
    3be6:	88 81       	ld	r24, Y
    3be8:	88 23       	and	r24, r24
    3bea:	29 f0       	breq	.+10     	; 0x3bf6 <_Z10uart0_putsPKc+0x16>
    3bec:	21 96       	adiw	r28, 0x01	; 1
    3bee:	e3 df       	rcall	.-58     	; 0x3bb6 <_Z10uart0_putch>
    3bf0:	89 91       	ld	r24, Y+
    3bf2:	81 11       	cpse	r24, r1
    3bf4:	fc cf       	rjmp	.-8      	; 0x3bee <_Z10uart0_putsPKc+0xe>
    3bf6:	df 91       	pop	r29
    3bf8:	cf 91       	pop	r28
    3bfa:	08 95       	ret

00003bfc <__vector_36>:
    3bfc:	1f 92       	push	r1
    3bfe:	0f 92       	push	r0
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	0f 92       	push	r0
    3c04:	11 24       	eor	r1, r1
    3c06:	0b b6       	in	r0, 0x3b	; 59
    3c08:	0f 92       	push	r0
    3c0a:	2f 93       	push	r18
    3c0c:	8f 93       	push	r24
    3c0e:	9f 93       	push	r25
    3c10:	ef 93       	push	r30
    3c12:	ff 93       	push	r31
    3c14:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    3c18:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3c1c:	88 71       	andi	r24, 0x18	; 24
    3c1e:	e0 91 30 05 	lds	r30, 0x0530	; 0x800530 <_ZL12UART1_RxHead>
    3c22:	ef 5f       	subi	r30, 0xFF	; 255
    3c24:	ef 71       	andi	r30, 0x1F	; 31
    3c26:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <_ZL12UART1_RxTail>
    3c2a:	e9 17       	cp	r30, r25
    3c2c:	39 f0       	breq	.+14     	; 0x3c3c <__vector_36+0x40>
    3c2e:	e0 93 30 05 	sts	0x0530, r30	; 0x800530 <_ZL12UART1_RxHead>
    3c32:	f0 e0       	ldi	r31, 0x00	; 0
    3c34:	ed 5c       	subi	r30, 0xCD	; 205
    3c36:	fa 4f       	sbci	r31, 0xFA	; 250
    3c38:	20 83       	st	Z, r18
    3c3a:	01 c0       	rjmp	.+2      	; 0x3c3e <__vector_36+0x42>
    3c3c:	82 e0       	ldi	r24, 0x02	; 2
    3c3e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <_ZL17UART1_LastRxError>
    3c42:	ff 91       	pop	r31
    3c44:	ef 91       	pop	r30
    3c46:	9f 91       	pop	r25
    3c48:	8f 91       	pop	r24
    3c4a:	2f 91       	pop	r18
    3c4c:	0f 90       	pop	r0
    3c4e:	0b be       	out	0x3b, r0	; 59
    3c50:	0f 90       	pop	r0
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	0f 90       	pop	r0
    3c56:	1f 90       	pop	r1
    3c58:	18 95       	reti

00003c5a <__vector_37>:
    3c5a:	1f 92       	push	r1
    3c5c:	0f 92       	push	r0
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	0f 92       	push	r0
    3c62:	11 24       	eor	r1, r1
    3c64:	0b b6       	in	r0, 0x3b	; 59
    3c66:	0f 92       	push	r0
    3c68:	8f 93       	push	r24
    3c6a:	9f 93       	push	r25
    3c6c:	ef 93       	push	r30
    3c6e:	ff 93       	push	r31
    3c70:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <_ZL12UART1_TxHead>
    3c74:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <_ZL12UART1_TxTail>
    3c78:	98 17       	cp	r25, r24
    3c7a:	69 f0       	breq	.+26     	; 0x3c96 <__vector_37+0x3c>
    3c7c:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <_ZL12UART1_TxTail>
    3c80:	ef 5f       	subi	r30, 0xFF	; 255
    3c82:	ef 71       	andi	r30, 0x1F	; 31
    3c84:	e0 93 31 05 	sts	0x0531, r30	; 0x800531 <_ZL12UART1_TxTail>
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	ed 5a       	subi	r30, 0xAD	; 173
    3c8c:	fa 4f       	sbci	r31, 0xFA	; 250
    3c8e:	80 81       	ld	r24, Z
    3c90:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3c94:	05 c0       	rjmp	.+10     	; 0x3ca0 <__vector_37+0x46>
    3c96:	e9 ec       	ldi	r30, 0xC9	; 201
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	80 81       	ld	r24, Z
    3c9c:	8f 7d       	andi	r24, 0xDF	; 223
    3c9e:	80 83       	st	Z, r24
    3ca0:	ff 91       	pop	r31
    3ca2:	ef 91       	pop	r30
    3ca4:	9f 91       	pop	r25
    3ca6:	8f 91       	pop	r24
    3ca8:	0f 90       	pop	r0
    3caa:	0b be       	out	0x3b, r0	; 59
    3cac:	0f 90       	pop	r0
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	0f 90       	pop	r0
    3cb2:	1f 90       	pop	r1
    3cb4:	18 95       	reti

00003cb6 <__vector_51>:
    3cb6:	1f 92       	push	r1
    3cb8:	0f 92       	push	r0
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	0f 92       	push	r0
    3cbe:	11 24       	eor	r1, r1
    3cc0:	8f 93       	push	r24
    3cc2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3cc6:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <buffer2>
    3cca:	8f 91       	pop	r24
    3ccc:	0f 90       	pop	r0
    3cce:	0f be       	out	0x3f, r0	; 63
    3cd0:	0f 90       	pop	r0
    3cd2:	1f 90       	pop	r1
    3cd4:	18 95       	reti

00003cd6 <__vector_52>:
    3cd6:	1f 92       	push	r1
    3cd8:	0f 92       	push	r0
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	0f 92       	push	r0
    3cde:	11 24       	eor	r1, r1
    3ce0:	0b b6       	in	r0, 0x3b	; 59
    3ce2:	0f 92       	push	r0
    3ce4:	8f 93       	push	r24
    3ce6:	9f 93       	push	r25
    3ce8:	ef 93       	push	r30
    3cea:	ff 93       	push	r31
    3cec:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <_ZL12UART2_TxHead>
    3cf0:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <_ZL12UART2_TxTail>
    3cf4:	98 17       	cp	r25, r24
    3cf6:	69 f0       	breq	.+26     	; 0x3d12 <__vector_52+0x3c>
    3cf8:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <_ZL12UART2_TxTail>
    3cfc:	ef 5f       	subi	r30, 0xFF	; 255
    3cfe:	ef 71       	andi	r30, 0x1F	; 31
    3d00:	e0 93 0c 05 	sts	0x050C, r30	; 0x80050c <_ZL12UART2_TxTail>
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	e2 5f       	subi	r30, 0xF2	; 242
    3d08:	fa 4f       	sbci	r31, 0xFA	; 250
    3d0a:	80 81       	ld	r24, Z
    3d0c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3d10:	05 c0       	rjmp	.+10     	; 0x3d1c <__vector_52+0x46>
    3d12:	e1 ed       	ldi	r30, 0xD1	; 209
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	8f 7d       	andi	r24, 0xDF	; 223
    3d1a:	80 83       	st	Z, r24
    3d1c:	ff 91       	pop	r31
    3d1e:	ef 91       	pop	r30
    3d20:	9f 91       	pop	r25
    3d22:	8f 91       	pop	r24
    3d24:	0f 90       	pop	r0
    3d26:	0b be       	out	0x3b, r0	; 59
    3d28:	0f 90       	pop	r0
    3d2a:	0f be       	out	0x3f, r0	; 63
    3d2c:	0f 90       	pop	r0
    3d2e:	1f 90       	pop	r1
    3d30:	18 95       	reti

00003d32 <_Z10uart2_initj>:
    3d32:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <_ZL12UART2_TxHead>
    3d36:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <_ZL12UART2_TxTail>
    3d3a:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <_ZL12UART2_RxHead>
    3d3e:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <_ZL12UART2_RxTail>
    3d42:	99 23       	and	r25, r25
    3d44:	24 f4       	brge	.+8      	; 0x3d4e <_Z10uart2_initj+0x1c>
    3d46:	22 e0       	ldi	r18, 0x02	; 2
    3d48:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    3d4c:	9f 77       	andi	r25, 0x7F	; 127
    3d4e:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    3d52:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    3d56:	88 e9       	ldi	r24, 0x98	; 152
    3d58:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    3d5c:	86 e0       	ldi	r24, 0x06	; 6
    3d5e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    3d62:	08 95       	ret

00003d64 <_Z10uart2_getcv>:
    3d64:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <buffer2>
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	08 95       	ret

00003d6c <_Z10uart2_putch>:
    3d6c:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <_ZL12UART2_TxHead>
    3d70:	2f 5f       	subi	r18, 0xFF	; 255
    3d72:	2f 71       	andi	r18, 0x1F	; 31
    3d74:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <_ZL12UART2_TxTail>
    3d78:	29 17       	cp	r18, r25
    3d7a:	e1 f3       	breq	.-8      	; 0x3d74 <_Z10uart2_putch+0x8>
    3d7c:	e2 2f       	mov	r30, r18
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	e2 5f       	subi	r30, 0xF2	; 242
    3d82:	fa 4f       	sbci	r31, 0xFA	; 250
    3d84:	80 83       	st	Z, r24
    3d86:	20 93 0d 05 	sts	0x050D, r18	; 0x80050d <_ZL12UART2_TxHead>
    3d8a:	e1 ed       	ldi	r30, 0xD1	; 209
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	80 62       	ori	r24, 0x20	; 32
    3d92:	80 83       	st	Z, r24
    3d94:	08 95       	ret

00003d96 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    3d96:	1f 92       	push	r1
    3d98:	0f 92       	push	r0
    3d9a:	0f b6       	in	r0, 0x3f	; 63
    3d9c:	0f 92       	push	r0
    3d9e:	11 24       	eor	r1, r1
    3da0:	0b b6       	in	r0, 0x3b	; 59
    3da2:	0f 92       	push	r0
    3da4:	2f 93       	push	r18
    3da6:	8f 93       	push	r24
    3da8:	9f 93       	push	r25
    3daa:	ef 93       	push	r30
    3dac:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    3dae:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    3db2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    3db6:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    3db8:	e0 91 c7 04 	lds	r30, 0x04C7	; 0x8004c7 <_ZL12UART3_RxHead>
    3dbc:	ef 5f       	subi	r30, 0xFF	; 255
    3dbe:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    3dc0:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <_ZL12UART3_RxTail>
    3dc4:	e9 17       	cp	r30, r25
    3dc6:	39 f0       	breq	.+14     	; 0x3dd6 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    3dc8:	e0 93 c7 04 	sts	0x04C7, r30	; 0x8004c7 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	e6 53       	subi	r30, 0x36	; 54
    3dd0:	fb 4f       	sbci	r31, 0xFB	; 251
    3dd2:	20 83       	st	Z, r18
    3dd4:	01 c0       	rjmp	.+2      	; 0x3dd8 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    3dd8:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <_ZL17UART3_LastRxError>
}
    3ddc:	ff 91       	pop	r31
    3dde:	ef 91       	pop	r30
    3de0:	9f 91       	pop	r25
    3de2:	8f 91       	pop	r24
    3de4:	2f 91       	pop	r18
    3de6:	0f 90       	pop	r0
    3de8:	0b be       	out	0x3b, r0	; 59
    3dea:	0f 90       	pop	r0
    3dec:	0f be       	out	0x3f, r0	; 63
    3dee:	0f 90       	pop	r0
    3df0:	1f 90       	pop	r1
    3df2:	18 95       	reti

00003df4 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    3df4:	1f 92       	push	r1
    3df6:	0f 92       	push	r0
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	0f 92       	push	r0
    3dfc:	11 24       	eor	r1, r1
    3dfe:	0b b6       	in	r0, 0x3b	; 59
    3e00:	0f 92       	push	r0
    3e02:	8f 93       	push	r24
    3e04:	9f 93       	push	r25
    3e06:	ef 93       	push	r30
    3e08:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    3e0a:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <_ZL12UART3_TxHead>
    3e0e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <_ZL12UART3_TxTail>
    3e12:	98 17       	cp	r25, r24
    3e14:	69 f0       	breq	.+26     	; 0x3e30 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    3e16:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <_ZL12UART3_TxTail>
    3e1a:	ef 5f       	subi	r30, 0xFF	; 255
    3e1c:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    3e1e:	e0 93 c8 04 	sts	0x04C8, r30	; 0x8004c8 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	e6 51       	subi	r30, 0x16	; 22
    3e26:	fb 4f       	sbci	r31, 0xFB	; 251
    3e28:	80 81       	ld	r24, Z
    3e2a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3e2e:	05 c0       	rjmp	.+10     	; 0x3e3a <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    3e30:	e1 e3       	ldi	r30, 0x31	; 49
    3e32:	f1 e0       	ldi	r31, 0x01	; 1
    3e34:	80 81       	ld	r24, Z
    3e36:	8f 7d       	andi	r24, 0xDF	; 223
    3e38:	80 83       	st	Z, r24
	}
}
    3e3a:	ff 91       	pop	r31
    3e3c:	ef 91       	pop	r30
    3e3e:	9f 91       	pop	r25
    3e40:	8f 91       	pop	r24
    3e42:	0f 90       	pop	r0
    3e44:	0b be       	out	0x3b, r0	; 59
    3e46:	0f 90       	pop	r0
    3e48:	0f be       	out	0x3f, r0	; 63
    3e4a:	0f 90       	pop	r0
    3e4c:	1f 90       	pop	r1
    3e4e:	18 95       	reti

00003e50 <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    3e50:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    3e54:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    3e58:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    3e5c:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    3e60:	99 23       	and	r25, r25
    3e62:	24 f4       	brge	.+8      	; 0x3e6c <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    3e64:	26 e0       	ldi	r18, 0x06	; 6
    3e66:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    3e6a:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    3e6c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    3e70:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    3e74:	88 e9       	ldi	r24, 0x98	; 152
    3e76:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    3e7a:	86 e0       	ldi	r24, 0x06	; 6
    3e7c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    3e80:	08 95       	ret

00003e82 <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    3e82:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <_ZL12UART3_RxHead>
    3e86:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <_ZL12UART3_RxTail>
    3e8a:	98 17       	cp	r25, r24
    3e8c:	91 f0       	breq	.+36     	; 0x3eb2 <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    3e8e:	e0 91 c6 04 	lds	r30, 0x04C6	; 0x8004c6 <_ZL12UART3_RxTail>
    3e92:	ef 5f       	subi	r30, 0xFF	; 255
    3e94:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    3e96:	e0 93 c6 04 	sts	0x04C6, r30	; 0x8004c6 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	e6 53       	subi	r30, 0x36	; 54
    3e9e:	fb 4f       	sbci	r31, 0xFB	; 251
    3ea0:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    3ea2:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <_ZL17UART3_LastRxError>
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	98 2f       	mov	r25, r24
    3eaa:	88 27       	eor	r24, r24
    3eac:	82 0f       	add	r24, r18
    3eae:	91 1d       	adc	r25, r1
    3eb0:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    3eb6:	08 95       	ret

00003eb8 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    3eb8:	20 91 c9 04 	lds	r18, 0x04C9	; 0x8004c9 <_ZL12UART3_TxHead>
    3ebc:	2f 5f       	subi	r18, 0xFF	; 255
    3ebe:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    3ec0:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <_ZL12UART3_TxTail>
    3ec4:	29 17       	cp	r18, r25
    3ec6:	e1 f3       	breq	.-8      	; 0x3ec0 <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    3ec8:	e2 2f       	mov	r30, r18
    3eca:	f0 e0       	ldi	r31, 0x00	; 0
    3ecc:	e6 51       	subi	r30, 0x16	; 22
    3ece:	fb 4f       	sbci	r31, 0xFB	; 251
    3ed0:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    3ed2:	20 93 c9 04 	sts	0x04C9, r18	; 0x8004c9 <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    3ed6:	e1 e3       	ldi	r30, 0x31	; 49
    3ed8:	f1 e0       	ldi	r31, 0x01	; 1
    3eda:	80 81       	ld	r24, Z
    3edc:	80 62       	ori	r24, 0x20	; 32
    3ede:	80 83       	st	Z, r24
    3ee0:	08 95       	ret

00003ee2 <__subsf3>:
    3ee2:	50 58       	subi	r21, 0x80	; 128

00003ee4 <__addsf3>:
    3ee4:	bb 27       	eor	r27, r27
    3ee6:	aa 27       	eor	r26, r26
    3ee8:	0e d0       	rcall	.+28     	; 0x3f06 <__addsf3x>
    3eea:	27 c2       	rjmp	.+1102   	; 0x433a <__fp_round>
    3eec:	f0 d1       	rcall	.+992    	; 0x42ce <__fp_pscA>
    3eee:	30 f0       	brcs	.+12     	; 0x3efc <__addsf3+0x18>
    3ef0:	f5 d1       	rcall	.+1002   	; 0x42dc <__fp_pscB>
    3ef2:	20 f0       	brcs	.+8      	; 0x3efc <__addsf3+0x18>
    3ef4:	31 f4       	brne	.+12     	; 0x3f02 <__addsf3+0x1e>
    3ef6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ef8:	11 f4       	brne	.+4      	; 0x3efe <__addsf3+0x1a>
    3efa:	1e f4       	brtc	.+6      	; 0x3f02 <__addsf3+0x1e>
    3efc:	c0 c1       	rjmp	.+896    	; 0x427e <__fp_nan>
    3efe:	0e f4       	brtc	.+2      	; 0x3f02 <__addsf3+0x1e>
    3f00:	e0 95       	com	r30
    3f02:	e7 fb       	bst	r30, 7
    3f04:	b6 c1       	rjmp	.+876    	; 0x4272 <__fp_inf>

00003f06 <__addsf3x>:
    3f06:	e9 2f       	mov	r30, r25
    3f08:	3a d2       	rcall	.+1140   	; 0x437e <__fp_split3>
    3f0a:	80 f3       	brcs	.-32     	; 0x3eec <__addsf3+0x8>
    3f0c:	ba 17       	cp	r27, r26
    3f0e:	62 07       	cpc	r22, r18
    3f10:	73 07       	cpc	r23, r19
    3f12:	84 07       	cpc	r24, r20
    3f14:	95 07       	cpc	r25, r21
    3f16:	18 f0       	brcs	.+6      	; 0x3f1e <__addsf3x+0x18>
    3f18:	71 f4       	brne	.+28     	; 0x3f36 <__addsf3x+0x30>
    3f1a:	9e f5       	brtc	.+102    	; 0x3f82 <__addsf3x+0x7c>
    3f1c:	52 c2       	rjmp	.+1188   	; 0x43c2 <__fp_zero>
    3f1e:	0e f4       	brtc	.+2      	; 0x3f22 <__addsf3x+0x1c>
    3f20:	e0 95       	com	r30
    3f22:	0b 2e       	mov	r0, r27
    3f24:	ba 2f       	mov	r27, r26
    3f26:	a0 2d       	mov	r26, r0
    3f28:	0b 01       	movw	r0, r22
    3f2a:	b9 01       	movw	r22, r18
    3f2c:	90 01       	movw	r18, r0
    3f2e:	0c 01       	movw	r0, r24
    3f30:	ca 01       	movw	r24, r20
    3f32:	a0 01       	movw	r20, r0
    3f34:	11 24       	eor	r1, r1
    3f36:	ff 27       	eor	r31, r31
    3f38:	59 1b       	sub	r21, r25
    3f3a:	99 f0       	breq	.+38     	; 0x3f62 <__addsf3x+0x5c>
    3f3c:	59 3f       	cpi	r21, 0xF9	; 249
    3f3e:	50 f4       	brcc	.+20     	; 0x3f54 <__addsf3x+0x4e>
    3f40:	50 3e       	cpi	r21, 0xE0	; 224
    3f42:	68 f1       	brcs	.+90     	; 0x3f9e <__addsf3x+0x98>
    3f44:	1a 16       	cp	r1, r26
    3f46:	f0 40       	sbci	r31, 0x00	; 0
    3f48:	a2 2f       	mov	r26, r18
    3f4a:	23 2f       	mov	r18, r19
    3f4c:	34 2f       	mov	r19, r20
    3f4e:	44 27       	eor	r20, r20
    3f50:	58 5f       	subi	r21, 0xF8	; 248
    3f52:	f3 cf       	rjmp	.-26     	; 0x3f3a <__addsf3x+0x34>
    3f54:	46 95       	lsr	r20
    3f56:	37 95       	ror	r19
    3f58:	27 95       	ror	r18
    3f5a:	a7 95       	ror	r26
    3f5c:	f0 40       	sbci	r31, 0x00	; 0
    3f5e:	53 95       	inc	r21
    3f60:	c9 f7       	brne	.-14     	; 0x3f54 <__addsf3x+0x4e>
    3f62:	7e f4       	brtc	.+30     	; 0x3f82 <__addsf3x+0x7c>
    3f64:	1f 16       	cp	r1, r31
    3f66:	ba 0b       	sbc	r27, r26
    3f68:	62 0b       	sbc	r22, r18
    3f6a:	73 0b       	sbc	r23, r19
    3f6c:	84 0b       	sbc	r24, r20
    3f6e:	ba f0       	brmi	.+46     	; 0x3f9e <__addsf3x+0x98>
    3f70:	91 50       	subi	r25, 0x01	; 1
    3f72:	a1 f0       	breq	.+40     	; 0x3f9c <__addsf3x+0x96>
    3f74:	ff 0f       	add	r31, r31
    3f76:	bb 1f       	adc	r27, r27
    3f78:	66 1f       	adc	r22, r22
    3f7a:	77 1f       	adc	r23, r23
    3f7c:	88 1f       	adc	r24, r24
    3f7e:	c2 f7       	brpl	.-16     	; 0x3f70 <__addsf3x+0x6a>
    3f80:	0e c0       	rjmp	.+28     	; 0x3f9e <__addsf3x+0x98>
    3f82:	ba 0f       	add	r27, r26
    3f84:	62 1f       	adc	r22, r18
    3f86:	73 1f       	adc	r23, r19
    3f88:	84 1f       	adc	r24, r20
    3f8a:	48 f4       	brcc	.+18     	; 0x3f9e <__addsf3x+0x98>
    3f8c:	87 95       	ror	r24
    3f8e:	77 95       	ror	r23
    3f90:	67 95       	ror	r22
    3f92:	b7 95       	ror	r27
    3f94:	f7 95       	ror	r31
    3f96:	9e 3f       	cpi	r25, 0xFE	; 254
    3f98:	08 f0       	brcs	.+2      	; 0x3f9c <__addsf3x+0x96>
    3f9a:	b3 cf       	rjmp	.-154    	; 0x3f02 <__addsf3+0x1e>
    3f9c:	93 95       	inc	r25
    3f9e:	88 0f       	add	r24, r24
    3fa0:	08 f0       	brcs	.+2      	; 0x3fa4 <__addsf3x+0x9e>
    3fa2:	99 27       	eor	r25, r25
    3fa4:	ee 0f       	add	r30, r30
    3fa6:	97 95       	ror	r25
    3fa8:	87 95       	ror	r24
    3faa:	08 95       	ret
    3fac:	90 d1       	rcall	.+800    	; 0x42ce <__fp_pscA>
    3fae:	58 f0       	brcs	.+22     	; 0x3fc6 <__addsf3x+0xc0>
    3fb0:	80 e8       	ldi	r24, 0x80	; 128
    3fb2:	91 e0       	ldi	r25, 0x01	; 1
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <__addsf3x+0xb2>
    3fb6:	9e ef       	ldi	r25, 0xFE	; 254
    3fb8:	91 d1       	rcall	.+802    	; 0x42dc <__fp_pscB>
    3fba:	28 f0       	brcs	.+10     	; 0x3fc6 <__addsf3x+0xc0>
    3fbc:	40 e8       	ldi	r20, 0x80	; 128
    3fbe:	51 e0       	ldi	r21, 0x01	; 1
    3fc0:	59 f4       	brne	.+22     	; 0x3fd8 <atan2+0xe>
    3fc2:	5e ef       	ldi	r21, 0xFE	; 254
    3fc4:	09 c0       	rjmp	.+18     	; 0x3fd8 <atan2+0xe>
    3fc6:	5b c1       	rjmp	.+694    	; 0x427e <__fp_nan>
    3fc8:	fc c1       	rjmp	.+1016   	; 0x43c2 <__fp_zero>

00003fca <atan2>:
    3fca:	e9 2f       	mov	r30, r25
    3fcc:	e0 78       	andi	r30, 0x80	; 128
    3fce:	d7 d1       	rcall	.+942    	; 0x437e <__fp_split3>
    3fd0:	68 f3       	brcs	.-38     	; 0x3fac <__addsf3x+0xa6>
    3fd2:	09 2e       	mov	r0, r25
    3fd4:	05 2a       	or	r0, r21
    3fd6:	c1 f3       	breq	.-16     	; 0x3fc8 <__addsf3x+0xc2>
    3fd8:	26 17       	cp	r18, r22
    3fda:	37 07       	cpc	r19, r23
    3fdc:	48 07       	cpc	r20, r24
    3fde:	59 07       	cpc	r21, r25
    3fe0:	38 f0       	brcs	.+14     	; 0x3ff0 <atan2+0x26>
    3fe2:	0e 2e       	mov	r0, r30
    3fe4:	07 f8       	bld	r0, 7
    3fe6:	e0 25       	eor	r30, r0
    3fe8:	69 f0       	breq	.+26     	; 0x4004 <atan2+0x3a>
    3fea:	e0 25       	eor	r30, r0
    3fec:	e0 64       	ori	r30, 0x40	; 64
    3fee:	0a c0       	rjmp	.+20     	; 0x4004 <atan2+0x3a>
    3ff0:	ef 63       	ori	r30, 0x3F	; 63
    3ff2:	07 f8       	bld	r0, 7
    3ff4:	00 94       	com	r0
    3ff6:	07 fa       	bst	r0, 7
    3ff8:	db 01       	movw	r26, r22
    3ffa:	b9 01       	movw	r22, r18
    3ffc:	9d 01       	movw	r18, r26
    3ffe:	dc 01       	movw	r26, r24
    4000:	ca 01       	movw	r24, r20
    4002:	ad 01       	movw	r20, r26
    4004:	ef 93       	push	r30
    4006:	4a d0       	rcall	.+148    	; 0x409c <__divsf3_pse>
    4008:	98 d1       	rcall	.+816    	; 0x433a <__fp_round>
    400a:	0a d0       	rcall	.+20     	; 0x4020 <atan>
    400c:	5f 91       	pop	r21
    400e:	55 23       	and	r21, r21
    4010:	31 f0       	breq	.+12     	; 0x401e <atan2+0x54>
    4012:	2b ed       	ldi	r18, 0xDB	; 219
    4014:	3f e0       	ldi	r19, 0x0F	; 15
    4016:	49 e4       	ldi	r20, 0x49	; 73
    4018:	50 fd       	sbrc	r21, 0
    401a:	49 ec       	ldi	r20, 0xC9	; 201
    401c:	63 cf       	rjmp	.-314    	; 0x3ee4 <__addsf3>
    401e:	08 95       	ret

00004020 <atan>:
    4020:	df 93       	push	r29
    4022:	dd 27       	eor	r29, r29
    4024:	b9 2f       	mov	r27, r25
    4026:	bf 77       	andi	r27, 0x7F	; 127
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	16 16       	cp	r1, r22
    402e:	17 06       	cpc	r1, r23
    4030:	48 07       	cpc	r20, r24
    4032:	5b 07       	cpc	r21, r27
    4034:	10 f4       	brcc	.+4      	; 0x403a <atan+0x1a>
    4036:	d9 2f       	mov	r29, r25
    4038:	cf d1       	rcall	.+926    	; 0x43d8 <inverse>
    403a:	9f 93       	push	r25
    403c:	8f 93       	push	r24
    403e:	7f 93       	push	r23
    4040:	6f 93       	push	r22
    4042:	7c d2       	rcall	.+1272   	; 0x453c <square>
    4044:	e4 ee       	ldi	r30, 0xE4	; 228
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	1d d1       	rcall	.+570    	; 0x4284 <__fp_powser>
    404a:	77 d1       	rcall	.+750    	; 0x433a <__fp_round>
    404c:	2f 91       	pop	r18
    404e:	3f 91       	pop	r19
    4050:	4f 91       	pop	r20
    4052:	5f 91       	pop	r21
    4054:	d4 d1       	rcall	.+936    	; 0x43fe <__mulsf3x>
    4056:	dd 23       	and	r29, r29
    4058:	49 f0       	breq	.+18     	; 0x406c <atan+0x4c>
    405a:	90 58       	subi	r25, 0x80	; 128
    405c:	a2 ea       	ldi	r26, 0xA2	; 162
    405e:	2a ed       	ldi	r18, 0xDA	; 218
    4060:	3f e0       	ldi	r19, 0x0F	; 15
    4062:	49 ec       	ldi	r20, 0xC9	; 201
    4064:	5f e3       	ldi	r21, 0x3F	; 63
    4066:	d0 78       	andi	r29, 0x80	; 128
    4068:	5d 27       	eor	r21, r29
    406a:	4d df       	rcall	.-358    	; 0x3f06 <__addsf3x>
    406c:	df 91       	pop	r29
    406e:	65 c1       	rjmp	.+714    	; 0x433a <__fp_round>

00004070 <__cmpsf2>:
    4070:	dc d0       	rcall	.+440    	; 0x422a <__fp_cmp>
    4072:	08 f4       	brcc	.+2      	; 0x4076 <__cmpsf2+0x6>
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	08 95       	ret

00004078 <cos>:
    4078:	39 d1       	rcall	.+626    	; 0x42ec <__fp_rempio2>
    407a:	e3 95       	inc	r30
    407c:	6f c1       	rjmp	.+734    	; 0x435c <__fp_sinus>

0000407e <__divsf3>:
    407e:	0c d0       	rcall	.+24     	; 0x4098 <__divsf3x>
    4080:	5c c1       	rjmp	.+696    	; 0x433a <__fp_round>
    4082:	2c d1       	rcall	.+600    	; 0x42dc <__fp_pscB>
    4084:	40 f0       	brcs	.+16     	; 0x4096 <__divsf3+0x18>
    4086:	23 d1       	rcall	.+582    	; 0x42ce <__fp_pscA>
    4088:	30 f0       	brcs	.+12     	; 0x4096 <__divsf3+0x18>
    408a:	21 f4       	brne	.+8      	; 0x4094 <__divsf3+0x16>
    408c:	5f 3f       	cpi	r21, 0xFF	; 255
    408e:	19 f0       	breq	.+6      	; 0x4096 <__divsf3+0x18>
    4090:	f0 c0       	rjmp	.+480    	; 0x4272 <__fp_inf>
    4092:	51 11       	cpse	r21, r1
    4094:	97 c1       	rjmp	.+814    	; 0x43c4 <__fp_szero>
    4096:	f3 c0       	rjmp	.+486    	; 0x427e <__fp_nan>

00004098 <__divsf3x>:
    4098:	72 d1       	rcall	.+740    	; 0x437e <__fp_split3>
    409a:	98 f3       	brcs	.-26     	; 0x4082 <__divsf3+0x4>

0000409c <__divsf3_pse>:
    409c:	99 23       	and	r25, r25
    409e:	c9 f3       	breq	.-14     	; 0x4092 <__divsf3+0x14>
    40a0:	55 23       	and	r21, r21
    40a2:	b1 f3       	breq	.-20     	; 0x4090 <__divsf3+0x12>
    40a4:	95 1b       	sub	r25, r21
    40a6:	55 0b       	sbc	r21, r21
    40a8:	bb 27       	eor	r27, r27
    40aa:	aa 27       	eor	r26, r26
    40ac:	62 17       	cp	r22, r18
    40ae:	73 07       	cpc	r23, r19
    40b0:	84 07       	cpc	r24, r20
    40b2:	38 f0       	brcs	.+14     	; 0x40c2 <__divsf3_pse+0x26>
    40b4:	9f 5f       	subi	r25, 0xFF	; 255
    40b6:	5f 4f       	sbci	r21, 0xFF	; 255
    40b8:	22 0f       	add	r18, r18
    40ba:	33 1f       	adc	r19, r19
    40bc:	44 1f       	adc	r20, r20
    40be:	aa 1f       	adc	r26, r26
    40c0:	a9 f3       	breq	.-22     	; 0x40ac <__divsf3_pse+0x10>
    40c2:	33 d0       	rcall	.+102    	; 0x412a <__divsf3_pse+0x8e>
    40c4:	0e 2e       	mov	r0, r30
    40c6:	3a f0       	brmi	.+14     	; 0x40d6 <__divsf3_pse+0x3a>
    40c8:	e0 e8       	ldi	r30, 0x80	; 128
    40ca:	30 d0       	rcall	.+96     	; 0x412c <__divsf3_pse+0x90>
    40cc:	91 50       	subi	r25, 0x01	; 1
    40ce:	50 40       	sbci	r21, 0x00	; 0
    40d0:	e6 95       	lsr	r30
    40d2:	00 1c       	adc	r0, r0
    40d4:	ca f7       	brpl	.-14     	; 0x40c8 <__divsf3_pse+0x2c>
    40d6:	29 d0       	rcall	.+82     	; 0x412a <__divsf3_pse+0x8e>
    40d8:	fe 2f       	mov	r31, r30
    40da:	27 d0       	rcall	.+78     	; 0x412a <__divsf3_pse+0x8e>
    40dc:	66 0f       	add	r22, r22
    40de:	77 1f       	adc	r23, r23
    40e0:	88 1f       	adc	r24, r24
    40e2:	bb 1f       	adc	r27, r27
    40e4:	26 17       	cp	r18, r22
    40e6:	37 07       	cpc	r19, r23
    40e8:	48 07       	cpc	r20, r24
    40ea:	ab 07       	cpc	r26, r27
    40ec:	b0 e8       	ldi	r27, 0x80	; 128
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <__divsf3_pse+0x56>
    40f0:	bb 0b       	sbc	r27, r27
    40f2:	80 2d       	mov	r24, r0
    40f4:	bf 01       	movw	r22, r30
    40f6:	ff 27       	eor	r31, r31
    40f8:	93 58       	subi	r25, 0x83	; 131
    40fa:	5f 4f       	sbci	r21, 0xFF	; 255
    40fc:	2a f0       	brmi	.+10     	; 0x4108 <__divsf3_pse+0x6c>
    40fe:	9e 3f       	cpi	r25, 0xFE	; 254
    4100:	51 05       	cpc	r21, r1
    4102:	68 f0       	brcs	.+26     	; 0x411e <__divsf3_pse+0x82>
    4104:	b6 c0       	rjmp	.+364    	; 0x4272 <__fp_inf>
    4106:	5e c1       	rjmp	.+700    	; 0x43c4 <__fp_szero>
    4108:	5f 3f       	cpi	r21, 0xFF	; 255
    410a:	ec f3       	brlt	.-6      	; 0x4106 <__divsf3_pse+0x6a>
    410c:	98 3e       	cpi	r25, 0xE8	; 232
    410e:	dc f3       	brlt	.-10     	; 0x4106 <__divsf3_pse+0x6a>
    4110:	86 95       	lsr	r24
    4112:	77 95       	ror	r23
    4114:	67 95       	ror	r22
    4116:	b7 95       	ror	r27
    4118:	f7 95       	ror	r31
    411a:	9f 5f       	subi	r25, 0xFF	; 255
    411c:	c9 f7       	brne	.-14     	; 0x4110 <__divsf3_pse+0x74>
    411e:	88 0f       	add	r24, r24
    4120:	91 1d       	adc	r25, r1
    4122:	96 95       	lsr	r25
    4124:	87 95       	ror	r24
    4126:	97 f9       	bld	r25, 7
    4128:	08 95       	ret
    412a:	e1 e0       	ldi	r30, 0x01	; 1
    412c:	66 0f       	add	r22, r22
    412e:	77 1f       	adc	r23, r23
    4130:	88 1f       	adc	r24, r24
    4132:	bb 1f       	adc	r27, r27
    4134:	62 17       	cp	r22, r18
    4136:	73 07       	cpc	r23, r19
    4138:	84 07       	cpc	r24, r20
    413a:	ba 07       	cpc	r27, r26
    413c:	20 f0       	brcs	.+8      	; 0x4146 <__divsf3_pse+0xaa>
    413e:	62 1b       	sub	r22, r18
    4140:	73 0b       	sbc	r23, r19
    4142:	84 0b       	sbc	r24, r20
    4144:	ba 0b       	sbc	r27, r26
    4146:	ee 1f       	adc	r30, r30
    4148:	88 f7       	brcc	.-30     	; 0x412c <__divsf3_pse+0x90>
    414a:	e0 95       	com	r30
    414c:	08 95       	ret

0000414e <__fixsfsi>:
    414e:	04 d0       	rcall	.+8      	; 0x4158 <__fixunssfsi>
    4150:	68 94       	set
    4152:	b1 11       	cpse	r27, r1
    4154:	37 c1       	rjmp	.+622    	; 0x43c4 <__fp_szero>
    4156:	08 95       	ret

00004158 <__fixunssfsi>:
    4158:	1a d1       	rcall	.+564    	; 0x438e <__fp_splitA>
    415a:	88 f0       	brcs	.+34     	; 0x417e <__fixunssfsi+0x26>
    415c:	9f 57       	subi	r25, 0x7F	; 127
    415e:	90 f0       	brcs	.+36     	; 0x4184 <__fixunssfsi+0x2c>
    4160:	b9 2f       	mov	r27, r25
    4162:	99 27       	eor	r25, r25
    4164:	b7 51       	subi	r27, 0x17	; 23
    4166:	a0 f0       	brcs	.+40     	; 0x4190 <__fixunssfsi+0x38>
    4168:	d1 f0       	breq	.+52     	; 0x419e <__fixunssfsi+0x46>
    416a:	66 0f       	add	r22, r22
    416c:	77 1f       	adc	r23, r23
    416e:	88 1f       	adc	r24, r24
    4170:	99 1f       	adc	r25, r25
    4172:	1a f0       	brmi	.+6      	; 0x417a <__fixunssfsi+0x22>
    4174:	ba 95       	dec	r27
    4176:	c9 f7       	brne	.-14     	; 0x416a <__fixunssfsi+0x12>
    4178:	12 c0       	rjmp	.+36     	; 0x419e <__fixunssfsi+0x46>
    417a:	b1 30       	cpi	r27, 0x01	; 1
    417c:	81 f0       	breq	.+32     	; 0x419e <__fixunssfsi+0x46>
    417e:	21 d1       	rcall	.+578    	; 0x43c2 <__fp_zero>
    4180:	b1 e0       	ldi	r27, 0x01	; 1
    4182:	08 95       	ret
    4184:	1e c1       	rjmp	.+572    	; 0x43c2 <__fp_zero>
    4186:	67 2f       	mov	r22, r23
    4188:	78 2f       	mov	r23, r24
    418a:	88 27       	eor	r24, r24
    418c:	b8 5f       	subi	r27, 0xF8	; 248
    418e:	39 f0       	breq	.+14     	; 0x419e <__fixunssfsi+0x46>
    4190:	b9 3f       	cpi	r27, 0xF9	; 249
    4192:	cc f3       	brlt	.-14     	; 0x4186 <__fixunssfsi+0x2e>
    4194:	86 95       	lsr	r24
    4196:	77 95       	ror	r23
    4198:	67 95       	ror	r22
    419a:	b3 95       	inc	r27
    419c:	d9 f7       	brne	.-10     	; 0x4194 <__fixunssfsi+0x3c>
    419e:	3e f4       	brtc	.+14     	; 0x41ae <__fixunssfsi+0x56>
    41a0:	90 95       	com	r25
    41a2:	80 95       	com	r24
    41a4:	70 95       	com	r23
    41a6:	61 95       	neg	r22
    41a8:	7f 4f       	sbci	r23, 0xFF	; 255
    41aa:	8f 4f       	sbci	r24, 0xFF	; 255
    41ac:	9f 4f       	sbci	r25, 0xFF	; 255
    41ae:	08 95       	ret

000041b0 <__floatunsisf>:
    41b0:	e8 94       	clt
    41b2:	09 c0       	rjmp	.+18     	; 0x41c6 <__floatsisf+0x12>

000041b4 <__floatsisf>:
    41b4:	97 fb       	bst	r25, 7
    41b6:	3e f4       	brtc	.+14     	; 0x41c6 <__floatsisf+0x12>
    41b8:	90 95       	com	r25
    41ba:	80 95       	com	r24
    41bc:	70 95       	com	r23
    41be:	61 95       	neg	r22
    41c0:	7f 4f       	sbci	r23, 0xFF	; 255
    41c2:	8f 4f       	sbci	r24, 0xFF	; 255
    41c4:	9f 4f       	sbci	r25, 0xFF	; 255
    41c6:	99 23       	and	r25, r25
    41c8:	a9 f0       	breq	.+42     	; 0x41f4 <__floatsisf+0x40>
    41ca:	f9 2f       	mov	r31, r25
    41cc:	96 e9       	ldi	r25, 0x96	; 150
    41ce:	bb 27       	eor	r27, r27
    41d0:	93 95       	inc	r25
    41d2:	f6 95       	lsr	r31
    41d4:	87 95       	ror	r24
    41d6:	77 95       	ror	r23
    41d8:	67 95       	ror	r22
    41da:	b7 95       	ror	r27
    41dc:	f1 11       	cpse	r31, r1
    41de:	f8 cf       	rjmp	.-16     	; 0x41d0 <__floatsisf+0x1c>
    41e0:	fa f4       	brpl	.+62     	; 0x4220 <__floatsisf+0x6c>
    41e2:	bb 0f       	add	r27, r27
    41e4:	11 f4       	brne	.+4      	; 0x41ea <__floatsisf+0x36>
    41e6:	60 ff       	sbrs	r22, 0
    41e8:	1b c0       	rjmp	.+54     	; 0x4220 <__floatsisf+0x6c>
    41ea:	6f 5f       	subi	r22, 0xFF	; 255
    41ec:	7f 4f       	sbci	r23, 0xFF	; 255
    41ee:	8f 4f       	sbci	r24, 0xFF	; 255
    41f0:	9f 4f       	sbci	r25, 0xFF	; 255
    41f2:	16 c0       	rjmp	.+44     	; 0x4220 <__floatsisf+0x6c>
    41f4:	88 23       	and	r24, r24
    41f6:	11 f0       	breq	.+4      	; 0x41fc <__floatsisf+0x48>
    41f8:	96 e9       	ldi	r25, 0x96	; 150
    41fa:	11 c0       	rjmp	.+34     	; 0x421e <__floatsisf+0x6a>
    41fc:	77 23       	and	r23, r23
    41fe:	21 f0       	breq	.+8      	; 0x4208 <__floatsisf+0x54>
    4200:	9e e8       	ldi	r25, 0x8E	; 142
    4202:	87 2f       	mov	r24, r23
    4204:	76 2f       	mov	r23, r22
    4206:	05 c0       	rjmp	.+10     	; 0x4212 <__floatsisf+0x5e>
    4208:	66 23       	and	r22, r22
    420a:	71 f0       	breq	.+28     	; 0x4228 <__floatsisf+0x74>
    420c:	96 e8       	ldi	r25, 0x86	; 134
    420e:	86 2f       	mov	r24, r22
    4210:	70 e0       	ldi	r23, 0x00	; 0
    4212:	60 e0       	ldi	r22, 0x00	; 0
    4214:	2a f0       	brmi	.+10     	; 0x4220 <__floatsisf+0x6c>
    4216:	9a 95       	dec	r25
    4218:	66 0f       	add	r22, r22
    421a:	77 1f       	adc	r23, r23
    421c:	88 1f       	adc	r24, r24
    421e:	da f7       	brpl	.-10     	; 0x4216 <__floatsisf+0x62>
    4220:	88 0f       	add	r24, r24
    4222:	96 95       	lsr	r25
    4224:	87 95       	ror	r24
    4226:	97 f9       	bld	r25, 7
    4228:	08 95       	ret

0000422a <__fp_cmp>:
    422a:	99 0f       	add	r25, r25
    422c:	00 08       	sbc	r0, r0
    422e:	55 0f       	add	r21, r21
    4230:	aa 0b       	sbc	r26, r26
    4232:	e0 e8       	ldi	r30, 0x80	; 128
    4234:	fe ef       	ldi	r31, 0xFE	; 254
    4236:	16 16       	cp	r1, r22
    4238:	17 06       	cpc	r1, r23
    423a:	e8 07       	cpc	r30, r24
    423c:	f9 07       	cpc	r31, r25
    423e:	c0 f0       	brcs	.+48     	; 0x4270 <__fp_cmp+0x46>
    4240:	12 16       	cp	r1, r18
    4242:	13 06       	cpc	r1, r19
    4244:	e4 07       	cpc	r30, r20
    4246:	f5 07       	cpc	r31, r21
    4248:	98 f0       	brcs	.+38     	; 0x4270 <__fp_cmp+0x46>
    424a:	62 1b       	sub	r22, r18
    424c:	73 0b       	sbc	r23, r19
    424e:	84 0b       	sbc	r24, r20
    4250:	95 0b       	sbc	r25, r21
    4252:	39 f4       	brne	.+14     	; 0x4262 <__fp_cmp+0x38>
    4254:	0a 26       	eor	r0, r26
    4256:	61 f0       	breq	.+24     	; 0x4270 <__fp_cmp+0x46>
    4258:	23 2b       	or	r18, r19
    425a:	24 2b       	or	r18, r20
    425c:	25 2b       	or	r18, r21
    425e:	21 f4       	brne	.+8      	; 0x4268 <__fp_cmp+0x3e>
    4260:	08 95       	ret
    4262:	0a 26       	eor	r0, r26
    4264:	09 f4       	brne	.+2      	; 0x4268 <__fp_cmp+0x3e>
    4266:	a1 40       	sbci	r26, 0x01	; 1
    4268:	a6 95       	lsr	r26
    426a:	8f ef       	ldi	r24, 0xFF	; 255
    426c:	81 1d       	adc	r24, r1
    426e:	81 1d       	adc	r24, r1
    4270:	08 95       	ret

00004272 <__fp_inf>:
    4272:	97 f9       	bld	r25, 7
    4274:	9f 67       	ori	r25, 0x7F	; 127
    4276:	80 e8       	ldi	r24, 0x80	; 128
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	60 e0       	ldi	r22, 0x00	; 0
    427c:	08 95       	ret

0000427e <__fp_nan>:
    427e:	9f ef       	ldi	r25, 0xFF	; 255
    4280:	80 ec       	ldi	r24, 0xC0	; 192
    4282:	08 95       	ret

00004284 <__fp_powser>:
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	1f 93       	push	r17
    428a:	0f 93       	push	r16
    428c:	ff 92       	push	r15
    428e:	ef 92       	push	r14
    4290:	df 92       	push	r13
    4292:	7b 01       	movw	r14, r22
    4294:	8c 01       	movw	r16, r24
    4296:	68 94       	set
    4298:	05 c0       	rjmp	.+10     	; 0x42a4 <__fp_powser+0x20>
    429a:	da 2e       	mov	r13, r26
    429c:	ef 01       	movw	r28, r30
    429e:	af d0       	rcall	.+350    	; 0x43fe <__mulsf3x>
    42a0:	fe 01       	movw	r30, r28
    42a2:	e8 94       	clt
    42a4:	a5 91       	lpm	r26, Z+
    42a6:	25 91       	lpm	r18, Z+
    42a8:	35 91       	lpm	r19, Z+
    42aa:	45 91       	lpm	r20, Z+
    42ac:	55 91       	lpm	r21, Z+
    42ae:	ae f3       	brts	.-22     	; 0x429a <__fp_powser+0x16>
    42b0:	ef 01       	movw	r28, r30
    42b2:	29 de       	rcall	.-942    	; 0x3f06 <__addsf3x>
    42b4:	fe 01       	movw	r30, r28
    42b6:	97 01       	movw	r18, r14
    42b8:	a8 01       	movw	r20, r16
    42ba:	da 94       	dec	r13
    42bc:	79 f7       	brne	.-34     	; 0x429c <__fp_powser+0x18>
    42be:	df 90       	pop	r13
    42c0:	ef 90       	pop	r14
    42c2:	ff 90       	pop	r15
    42c4:	0f 91       	pop	r16
    42c6:	1f 91       	pop	r17
    42c8:	cf 91       	pop	r28
    42ca:	df 91       	pop	r29
    42cc:	08 95       	ret

000042ce <__fp_pscA>:
    42ce:	00 24       	eor	r0, r0
    42d0:	0a 94       	dec	r0
    42d2:	16 16       	cp	r1, r22
    42d4:	17 06       	cpc	r1, r23
    42d6:	18 06       	cpc	r1, r24
    42d8:	09 06       	cpc	r0, r25
    42da:	08 95       	ret

000042dc <__fp_pscB>:
    42dc:	00 24       	eor	r0, r0
    42de:	0a 94       	dec	r0
    42e0:	12 16       	cp	r1, r18
    42e2:	13 06       	cpc	r1, r19
    42e4:	14 06       	cpc	r1, r20
    42e6:	05 06       	cpc	r0, r21
    42e8:	08 95       	ret
    42ea:	c9 cf       	rjmp	.-110    	; 0x427e <__fp_nan>

000042ec <__fp_rempio2>:
    42ec:	50 d0       	rcall	.+160    	; 0x438e <__fp_splitA>
    42ee:	e8 f3       	brcs	.-6      	; 0x42ea <__fp_pscB+0xe>
    42f0:	e8 94       	clt
    42f2:	e0 e0       	ldi	r30, 0x00	; 0
    42f4:	bb 27       	eor	r27, r27
    42f6:	9f 57       	subi	r25, 0x7F	; 127
    42f8:	f0 f0       	brcs	.+60     	; 0x4336 <__fp_rempio2+0x4a>
    42fa:	2a ed       	ldi	r18, 0xDA	; 218
    42fc:	3f e0       	ldi	r19, 0x0F	; 15
    42fe:	49 ec       	ldi	r20, 0xC9	; 201
    4300:	06 c0       	rjmp	.+12     	; 0x430e <__fp_rempio2+0x22>
    4302:	ee 0f       	add	r30, r30
    4304:	bb 0f       	add	r27, r27
    4306:	66 1f       	adc	r22, r22
    4308:	77 1f       	adc	r23, r23
    430a:	88 1f       	adc	r24, r24
    430c:	28 f0       	brcs	.+10     	; 0x4318 <__fp_rempio2+0x2c>
    430e:	b2 3a       	cpi	r27, 0xA2	; 162
    4310:	62 07       	cpc	r22, r18
    4312:	73 07       	cpc	r23, r19
    4314:	84 07       	cpc	r24, r20
    4316:	28 f0       	brcs	.+10     	; 0x4322 <__fp_rempio2+0x36>
    4318:	b2 5a       	subi	r27, 0xA2	; 162
    431a:	62 0b       	sbc	r22, r18
    431c:	73 0b       	sbc	r23, r19
    431e:	84 0b       	sbc	r24, r20
    4320:	e3 95       	inc	r30
    4322:	9a 95       	dec	r25
    4324:	72 f7       	brpl	.-36     	; 0x4302 <__fp_rempio2+0x16>
    4326:	80 38       	cpi	r24, 0x80	; 128
    4328:	30 f4       	brcc	.+12     	; 0x4336 <__fp_rempio2+0x4a>
    432a:	9a 95       	dec	r25
    432c:	bb 0f       	add	r27, r27
    432e:	66 1f       	adc	r22, r22
    4330:	77 1f       	adc	r23, r23
    4332:	88 1f       	adc	r24, r24
    4334:	d2 f7       	brpl	.-12     	; 0x432a <__fp_rempio2+0x3e>
    4336:	90 48       	sbci	r25, 0x80	; 128
    4338:	06 c1       	rjmp	.+524    	; 0x4546 <__fp_mpack_finite>

0000433a <__fp_round>:
    433a:	09 2e       	mov	r0, r25
    433c:	03 94       	inc	r0
    433e:	00 0c       	add	r0, r0
    4340:	11 f4       	brne	.+4      	; 0x4346 <__fp_round+0xc>
    4342:	88 23       	and	r24, r24
    4344:	52 f0       	brmi	.+20     	; 0x435a <__fp_round+0x20>
    4346:	bb 0f       	add	r27, r27
    4348:	40 f4       	brcc	.+16     	; 0x435a <__fp_round+0x20>
    434a:	bf 2b       	or	r27, r31
    434c:	11 f4       	brne	.+4      	; 0x4352 <__fp_round+0x18>
    434e:	60 ff       	sbrs	r22, 0
    4350:	04 c0       	rjmp	.+8      	; 0x435a <__fp_round+0x20>
    4352:	6f 5f       	subi	r22, 0xFF	; 255
    4354:	7f 4f       	sbci	r23, 0xFF	; 255
    4356:	8f 4f       	sbci	r24, 0xFF	; 255
    4358:	9f 4f       	sbci	r25, 0xFF	; 255
    435a:	08 95       	ret

0000435c <__fp_sinus>:
    435c:	ef 93       	push	r30
    435e:	e0 ff       	sbrs	r30, 0
    4360:	06 c0       	rjmp	.+12     	; 0x436e <__fp_sinus+0x12>
    4362:	a2 ea       	ldi	r26, 0xA2	; 162
    4364:	2a ed       	ldi	r18, 0xDA	; 218
    4366:	3f e0       	ldi	r19, 0x0F	; 15
    4368:	49 ec       	ldi	r20, 0xC9	; 201
    436a:	5f eb       	ldi	r21, 0xBF	; 191
    436c:	cc dd       	rcall	.-1128   	; 0x3f06 <__addsf3x>
    436e:	e5 df       	rcall	.-54     	; 0x433a <__fp_round>
    4370:	0f 90       	pop	r0
    4372:	03 94       	inc	r0
    4374:	01 fc       	sbrc	r0, 1
    4376:	90 58       	subi	r25, 0x80	; 128
    4378:	e1 e1       	ldi	r30, 0x11	; 17
    437a:	f1 e0       	ldi	r31, 0x01	; 1
    437c:	f7 c0       	rjmp	.+494    	; 0x456c <__fp_powsodd>

0000437e <__fp_split3>:
    437e:	57 fd       	sbrc	r21, 7
    4380:	90 58       	subi	r25, 0x80	; 128
    4382:	44 0f       	add	r20, r20
    4384:	55 1f       	adc	r21, r21
    4386:	59 f0       	breq	.+22     	; 0x439e <__fp_splitA+0x10>
    4388:	5f 3f       	cpi	r21, 0xFF	; 255
    438a:	71 f0       	breq	.+28     	; 0x43a8 <__fp_splitA+0x1a>
    438c:	47 95       	ror	r20

0000438e <__fp_splitA>:
    438e:	88 0f       	add	r24, r24
    4390:	97 fb       	bst	r25, 7
    4392:	99 1f       	adc	r25, r25
    4394:	61 f0       	breq	.+24     	; 0x43ae <__fp_splitA+0x20>
    4396:	9f 3f       	cpi	r25, 0xFF	; 255
    4398:	79 f0       	breq	.+30     	; 0x43b8 <__fp_splitA+0x2a>
    439a:	87 95       	ror	r24
    439c:	08 95       	ret
    439e:	12 16       	cp	r1, r18
    43a0:	13 06       	cpc	r1, r19
    43a2:	14 06       	cpc	r1, r20
    43a4:	55 1f       	adc	r21, r21
    43a6:	f2 cf       	rjmp	.-28     	; 0x438c <__fp_split3+0xe>
    43a8:	46 95       	lsr	r20
    43aa:	f1 df       	rcall	.-30     	; 0x438e <__fp_splitA>
    43ac:	08 c0       	rjmp	.+16     	; 0x43be <__fp_splitA+0x30>
    43ae:	16 16       	cp	r1, r22
    43b0:	17 06       	cpc	r1, r23
    43b2:	18 06       	cpc	r1, r24
    43b4:	99 1f       	adc	r25, r25
    43b6:	f1 cf       	rjmp	.-30     	; 0x439a <__fp_splitA+0xc>
    43b8:	86 95       	lsr	r24
    43ba:	71 05       	cpc	r23, r1
    43bc:	61 05       	cpc	r22, r1
    43be:	08 94       	sec
    43c0:	08 95       	ret

000043c2 <__fp_zero>:
    43c2:	e8 94       	clt

000043c4 <__fp_szero>:
    43c4:	bb 27       	eor	r27, r27
    43c6:	66 27       	eor	r22, r22
    43c8:	77 27       	eor	r23, r23
    43ca:	cb 01       	movw	r24, r22
    43cc:	97 f9       	bld	r25, 7
    43ce:	08 95       	ret

000043d0 <__gesf2>:
    43d0:	2c df       	rcall	.-424    	; 0x422a <__fp_cmp>
    43d2:	08 f4       	brcc	.+2      	; 0x43d6 <__gesf2+0x6>
    43d4:	8f ef       	ldi	r24, 0xFF	; 255
    43d6:	08 95       	ret

000043d8 <inverse>:
    43d8:	9b 01       	movw	r18, r22
    43da:	ac 01       	movw	r20, r24
    43dc:	60 e0       	ldi	r22, 0x00	; 0
    43de:	70 e0       	ldi	r23, 0x00	; 0
    43e0:	80 e8       	ldi	r24, 0x80	; 128
    43e2:	9f e3       	ldi	r25, 0x3F	; 63
    43e4:	4c ce       	rjmp	.-872    	; 0x407e <__divsf3>

000043e6 <__mulsf3>:
    43e6:	0b d0       	rcall	.+22     	; 0x43fe <__mulsf3x>
    43e8:	a8 cf       	rjmp	.-176    	; 0x433a <__fp_round>
    43ea:	71 df       	rcall	.-286    	; 0x42ce <__fp_pscA>
    43ec:	28 f0       	brcs	.+10     	; 0x43f8 <__mulsf3+0x12>
    43ee:	76 df       	rcall	.-276    	; 0x42dc <__fp_pscB>
    43f0:	18 f0       	brcs	.+6      	; 0x43f8 <__mulsf3+0x12>
    43f2:	95 23       	and	r25, r21
    43f4:	09 f0       	breq	.+2      	; 0x43f8 <__mulsf3+0x12>
    43f6:	3d cf       	rjmp	.-390    	; 0x4272 <__fp_inf>
    43f8:	42 cf       	rjmp	.-380    	; 0x427e <__fp_nan>
    43fa:	11 24       	eor	r1, r1
    43fc:	e3 cf       	rjmp	.-58     	; 0x43c4 <__fp_szero>

000043fe <__mulsf3x>:
    43fe:	bf df       	rcall	.-130    	; 0x437e <__fp_split3>
    4400:	a0 f3       	brcs	.-24     	; 0x43ea <__mulsf3+0x4>

00004402 <__mulsf3_pse>:
    4402:	95 9f       	mul	r25, r21
    4404:	d1 f3       	breq	.-12     	; 0x43fa <__mulsf3+0x14>
    4406:	95 0f       	add	r25, r21
    4408:	50 e0       	ldi	r21, 0x00	; 0
    440a:	55 1f       	adc	r21, r21
    440c:	62 9f       	mul	r22, r18
    440e:	f0 01       	movw	r30, r0
    4410:	72 9f       	mul	r23, r18
    4412:	bb 27       	eor	r27, r27
    4414:	f0 0d       	add	r31, r0
    4416:	b1 1d       	adc	r27, r1
    4418:	63 9f       	mul	r22, r19
    441a:	aa 27       	eor	r26, r26
    441c:	f0 0d       	add	r31, r0
    441e:	b1 1d       	adc	r27, r1
    4420:	aa 1f       	adc	r26, r26
    4422:	64 9f       	mul	r22, r20
    4424:	66 27       	eor	r22, r22
    4426:	b0 0d       	add	r27, r0
    4428:	a1 1d       	adc	r26, r1
    442a:	66 1f       	adc	r22, r22
    442c:	82 9f       	mul	r24, r18
    442e:	22 27       	eor	r18, r18
    4430:	b0 0d       	add	r27, r0
    4432:	a1 1d       	adc	r26, r1
    4434:	62 1f       	adc	r22, r18
    4436:	73 9f       	mul	r23, r19
    4438:	b0 0d       	add	r27, r0
    443a:	a1 1d       	adc	r26, r1
    443c:	62 1f       	adc	r22, r18
    443e:	83 9f       	mul	r24, r19
    4440:	a0 0d       	add	r26, r0
    4442:	61 1d       	adc	r22, r1
    4444:	22 1f       	adc	r18, r18
    4446:	74 9f       	mul	r23, r20
    4448:	33 27       	eor	r19, r19
    444a:	a0 0d       	add	r26, r0
    444c:	61 1d       	adc	r22, r1
    444e:	23 1f       	adc	r18, r19
    4450:	84 9f       	mul	r24, r20
    4452:	60 0d       	add	r22, r0
    4454:	21 1d       	adc	r18, r1
    4456:	82 2f       	mov	r24, r18
    4458:	76 2f       	mov	r23, r22
    445a:	6a 2f       	mov	r22, r26
    445c:	11 24       	eor	r1, r1
    445e:	9f 57       	subi	r25, 0x7F	; 127
    4460:	50 40       	sbci	r21, 0x00	; 0
    4462:	8a f0       	brmi	.+34     	; 0x4486 <__mulsf3_pse+0x84>
    4464:	e1 f0       	breq	.+56     	; 0x449e <__mulsf3_pse+0x9c>
    4466:	88 23       	and	r24, r24
    4468:	4a f0       	brmi	.+18     	; 0x447c <__mulsf3_pse+0x7a>
    446a:	ee 0f       	add	r30, r30
    446c:	ff 1f       	adc	r31, r31
    446e:	bb 1f       	adc	r27, r27
    4470:	66 1f       	adc	r22, r22
    4472:	77 1f       	adc	r23, r23
    4474:	88 1f       	adc	r24, r24
    4476:	91 50       	subi	r25, 0x01	; 1
    4478:	50 40       	sbci	r21, 0x00	; 0
    447a:	a9 f7       	brne	.-22     	; 0x4466 <__mulsf3_pse+0x64>
    447c:	9e 3f       	cpi	r25, 0xFE	; 254
    447e:	51 05       	cpc	r21, r1
    4480:	70 f0       	brcs	.+28     	; 0x449e <__mulsf3_pse+0x9c>
    4482:	f7 ce       	rjmp	.-530    	; 0x4272 <__fp_inf>
    4484:	9f cf       	rjmp	.-194    	; 0x43c4 <__fp_szero>
    4486:	5f 3f       	cpi	r21, 0xFF	; 255
    4488:	ec f3       	brlt	.-6      	; 0x4484 <__mulsf3_pse+0x82>
    448a:	98 3e       	cpi	r25, 0xE8	; 232
    448c:	dc f3       	brlt	.-10     	; 0x4484 <__mulsf3_pse+0x82>
    448e:	86 95       	lsr	r24
    4490:	77 95       	ror	r23
    4492:	67 95       	ror	r22
    4494:	b7 95       	ror	r27
    4496:	f7 95       	ror	r31
    4498:	e7 95       	ror	r30
    449a:	9f 5f       	subi	r25, 0xFF	; 255
    449c:	c1 f7       	brne	.-16     	; 0x448e <__mulsf3_pse+0x8c>
    449e:	fe 2b       	or	r31, r30
    44a0:	88 0f       	add	r24, r24
    44a2:	91 1d       	adc	r25, r1
    44a4:	96 95       	lsr	r25
    44a6:	87 95       	ror	r24
    44a8:	97 f9       	bld	r25, 7
    44aa:	08 95       	ret

000044ac <sin>:
    44ac:	9f 93       	push	r25
    44ae:	1e df       	rcall	.-452    	; 0x42ec <__fp_rempio2>
    44b0:	0f 90       	pop	r0
    44b2:	07 fc       	sbrc	r0, 7
    44b4:	ee 5f       	subi	r30, 0xFE	; 254
    44b6:	52 cf       	rjmp	.-348    	; 0x435c <__fp_sinus>
    44b8:	11 f4       	brne	.+4      	; 0x44be <sin+0x12>
    44ba:	0e f4       	brtc	.+2      	; 0x44be <sin+0x12>
    44bc:	e0 ce       	rjmp	.-576    	; 0x427e <__fp_nan>
    44be:	41 c0       	rjmp	.+130    	; 0x4542 <__fp_mpack>

000044c0 <sqrt>:
    44c0:	66 df       	rcall	.-308    	; 0x438e <__fp_splitA>
    44c2:	d0 f3       	brcs	.-12     	; 0x44b8 <sin+0xc>
    44c4:	99 23       	and	r25, r25
    44c6:	d9 f3       	breq	.-10     	; 0x44be <sin+0x12>
    44c8:	ce f3       	brts	.-14     	; 0x44bc <sin+0x10>
    44ca:	9f 57       	subi	r25, 0x7F	; 127
    44cc:	55 0b       	sbc	r21, r21
    44ce:	87 ff       	sbrs	r24, 7
    44d0:	46 d0       	rcall	.+140    	; 0x455e <__fp_norm2>
    44d2:	00 24       	eor	r0, r0
    44d4:	a0 e6       	ldi	r26, 0x60	; 96
    44d6:	40 ea       	ldi	r20, 0xA0	; 160
    44d8:	90 01       	movw	r18, r0
    44da:	80 58       	subi	r24, 0x80	; 128
    44dc:	56 95       	lsr	r21
    44de:	97 95       	ror	r25
    44e0:	28 f4       	brcc	.+10     	; 0x44ec <sqrt+0x2c>
    44e2:	80 5c       	subi	r24, 0xC0	; 192
    44e4:	66 0f       	add	r22, r22
    44e6:	77 1f       	adc	r23, r23
    44e8:	88 1f       	adc	r24, r24
    44ea:	20 f0       	brcs	.+8      	; 0x44f4 <sqrt+0x34>
    44ec:	26 17       	cp	r18, r22
    44ee:	37 07       	cpc	r19, r23
    44f0:	48 07       	cpc	r20, r24
    44f2:	30 f4       	brcc	.+12     	; 0x4500 <sqrt+0x40>
    44f4:	62 1b       	sub	r22, r18
    44f6:	73 0b       	sbc	r23, r19
    44f8:	84 0b       	sbc	r24, r20
    44fa:	20 29       	or	r18, r0
    44fc:	31 29       	or	r19, r1
    44fe:	4a 2b       	or	r20, r26
    4500:	a6 95       	lsr	r26
    4502:	17 94       	ror	r1
    4504:	07 94       	ror	r0
    4506:	20 25       	eor	r18, r0
    4508:	31 25       	eor	r19, r1
    450a:	4a 27       	eor	r20, r26
    450c:	58 f7       	brcc	.-42     	; 0x44e4 <sqrt+0x24>
    450e:	66 0f       	add	r22, r22
    4510:	77 1f       	adc	r23, r23
    4512:	88 1f       	adc	r24, r24
    4514:	20 f0       	brcs	.+8      	; 0x451e <sqrt+0x5e>
    4516:	26 17       	cp	r18, r22
    4518:	37 07       	cpc	r19, r23
    451a:	48 07       	cpc	r20, r24
    451c:	30 f4       	brcc	.+12     	; 0x452a <sqrt+0x6a>
    451e:	62 0b       	sbc	r22, r18
    4520:	73 0b       	sbc	r23, r19
    4522:	84 0b       	sbc	r24, r20
    4524:	20 0d       	add	r18, r0
    4526:	31 1d       	adc	r19, r1
    4528:	41 1d       	adc	r20, r1
    452a:	a0 95       	com	r26
    452c:	81 f7       	brne	.-32     	; 0x450e <sqrt+0x4e>
    452e:	b9 01       	movw	r22, r18
    4530:	84 2f       	mov	r24, r20
    4532:	91 58       	subi	r25, 0x81	; 129
    4534:	88 0f       	add	r24, r24
    4536:	96 95       	lsr	r25
    4538:	87 95       	ror	r24
    453a:	08 95       	ret

0000453c <square>:
    453c:	9b 01       	movw	r18, r22
    453e:	ac 01       	movw	r20, r24
    4540:	52 cf       	rjmp	.-348    	; 0x43e6 <__mulsf3>

00004542 <__fp_mpack>:
    4542:	9f 3f       	cpi	r25, 0xFF	; 255
    4544:	31 f0       	breq	.+12     	; 0x4552 <__fp_mpack_finite+0xc>

00004546 <__fp_mpack_finite>:
    4546:	91 50       	subi	r25, 0x01	; 1
    4548:	20 f4       	brcc	.+8      	; 0x4552 <__fp_mpack_finite+0xc>
    454a:	87 95       	ror	r24
    454c:	77 95       	ror	r23
    454e:	67 95       	ror	r22
    4550:	b7 95       	ror	r27
    4552:	88 0f       	add	r24, r24
    4554:	91 1d       	adc	r25, r1
    4556:	96 95       	lsr	r25
    4558:	87 95       	ror	r24
    455a:	97 f9       	bld	r25, 7
    455c:	08 95       	ret

0000455e <__fp_norm2>:
    455e:	91 50       	subi	r25, 0x01	; 1
    4560:	50 40       	sbci	r21, 0x00	; 0
    4562:	66 0f       	add	r22, r22
    4564:	77 1f       	adc	r23, r23
    4566:	88 1f       	adc	r24, r24
    4568:	d2 f7       	brpl	.-12     	; 0x455e <__fp_norm2>
    456a:	08 95       	ret

0000456c <__fp_powsodd>:
    456c:	9f 93       	push	r25
    456e:	8f 93       	push	r24
    4570:	7f 93       	push	r23
    4572:	6f 93       	push	r22
    4574:	ff 93       	push	r31
    4576:	ef 93       	push	r30
    4578:	9b 01       	movw	r18, r22
    457a:	ac 01       	movw	r20, r24
    457c:	34 df       	rcall	.-408    	; 0x43e6 <__mulsf3>
    457e:	ef 91       	pop	r30
    4580:	ff 91       	pop	r31
    4582:	80 de       	rcall	.-768    	; 0x4284 <__fp_powser>
    4584:	2f 91       	pop	r18
    4586:	3f 91       	pop	r19
    4588:	4f 91       	pop	r20
    458a:	5f 91       	pop	r21
    458c:	2c cf       	rjmp	.-424    	; 0x43e6 <__mulsf3>

0000458e <__divmodhi4>:
    458e:	97 fb       	bst	r25, 7
    4590:	07 2e       	mov	r0, r23
    4592:	16 f4       	brtc	.+4      	; 0x4598 <__divmodhi4+0xa>
    4594:	00 94       	com	r0
    4596:	06 d0       	rcall	.+12     	; 0x45a4 <__divmodhi4_neg1>
    4598:	77 fd       	sbrc	r23, 7
    459a:	08 d0       	rcall	.+16     	; 0x45ac <__divmodhi4_neg2>
    459c:	0b d0       	rcall	.+22     	; 0x45b4 <__udivmodhi4>
    459e:	07 fc       	sbrc	r0, 7
    45a0:	05 d0       	rcall	.+10     	; 0x45ac <__divmodhi4_neg2>
    45a2:	3e f4       	brtc	.+14     	; 0x45b2 <__divmodhi4_exit>

000045a4 <__divmodhi4_neg1>:
    45a4:	90 95       	com	r25
    45a6:	81 95       	neg	r24
    45a8:	9f 4f       	sbci	r25, 0xFF	; 255
    45aa:	08 95       	ret

000045ac <__divmodhi4_neg2>:
    45ac:	70 95       	com	r23
    45ae:	61 95       	neg	r22
    45b0:	7f 4f       	sbci	r23, 0xFF	; 255

000045b2 <__divmodhi4_exit>:
    45b2:	08 95       	ret

000045b4 <__udivmodhi4>:
    45b4:	aa 1b       	sub	r26, r26
    45b6:	bb 1b       	sub	r27, r27
    45b8:	51 e1       	ldi	r21, 0x11	; 17
    45ba:	07 c0       	rjmp	.+14     	; 0x45ca <__udivmodhi4_ep>

000045bc <__udivmodhi4_loop>:
    45bc:	aa 1f       	adc	r26, r26
    45be:	bb 1f       	adc	r27, r27
    45c0:	a6 17       	cp	r26, r22
    45c2:	b7 07       	cpc	r27, r23
    45c4:	10 f0       	brcs	.+4      	; 0x45ca <__udivmodhi4_ep>
    45c6:	a6 1b       	sub	r26, r22
    45c8:	b7 0b       	sbc	r27, r23

000045ca <__udivmodhi4_ep>:
    45ca:	88 1f       	adc	r24, r24
    45cc:	99 1f       	adc	r25, r25
    45ce:	5a 95       	dec	r21
    45d0:	a9 f7       	brne	.-22     	; 0x45bc <__udivmodhi4_loop>
    45d2:	80 95       	com	r24
    45d4:	90 95       	com	r25
    45d6:	bc 01       	movw	r22, r24
    45d8:	cd 01       	movw	r24, r26
    45da:	08 95       	ret

000045dc <__tablejump2__>:
    45dc:	ee 0f       	add	r30, r30
    45de:	ff 1f       	adc	r31, r31
    45e0:	88 1f       	adc	r24, r24
    45e2:	8b bf       	out	0x3b, r24	; 59
    45e4:	07 90       	elpm	r0, Z+
    45e6:	f6 91       	elpm	r31, Z
    45e8:	e0 2d       	mov	r30, r0
    45ea:	19 94       	eijmp

000045ec <_exit>:
    45ec:	f8 94       	cli

000045ee <__stop_program>:
    45ee:	ff cf       	rjmp	.-2      	; 0x45ee <__stop_program>
